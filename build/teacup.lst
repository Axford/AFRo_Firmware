
build/teacup.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800200  0000474c  000047e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000474c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004e8  00800228  00800228  00004808  2**0
                  ALLOC
  3 .debug_aranges 00000580  00000000  00000000  00004808  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000c3b  00000000  00000000  00004d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005654  00000000  00000000  000059c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001e06  00000000  00000000  0000b017  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000043d8  00000000  00000000  0000ce1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000860  00000000  00000000  000111f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000012ee  00000000  00000000  00011a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000252c  00000000  00000000  00012d46  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000508  00000000  00000000  00015272  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

/*! Read analog value from saved result array
	\param channel Channel to be read
	\return analog reading, 10-bit right aligned
*/
uint16_t	analog_read(uint8_t index) {
       0:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__ctors_end>
#elif defined (__AVR_ATmega8__)
    while (bit_is_clear(UCSRA, UDRE));      // espera que el micro est√© pronto para trasmitir
    UDR = data;                             // escribe el byte a trasmitir  
#endif     
    return data;
}
       4:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
 * @param y2 y component of second vector
 * @param F2 feed rate of second move
 */
int dda_jerk_size_2d(int32_t x1, int32_t y1, uint32_t F1, int32_t x2, int32_t y2, uint32_t F2) {
  return MAX(dda_jerk_size_1d(x1,F1,x2,F2),dda_jerk_size_1d(y1,F1,y2,F2));
}
       8:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
  \return sqrt(a - 1) < returnvalue <= sqrt(a)

  This is a binary search but it uses only the minimum required bits for
  each step.
*/
uint16_t int_sqrt(uint32_t a) {
       c:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
	} 
}

/// DEBUG - print queue.
/// Qt/hs format, t is tail, h is head, s is F/full, E/empty or neither
void print_queue() {
      10:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
*                                                                           *
* Relies on the global variable next_target.N being valid.                  *
*                                                                           *
\***************************************************************************/

void request_resend(void) {
      14:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
	\param h which heater we're running the loop for
	\param type which temp sensor type this heater is attached to
	\param current_temp the temperature that the associated temp sensor is reporting
	\param target_temp the temperature we're trying to achieve
*/
void heater_tick(heater_t h, temp_type_t type, uint16_t current_temp, uint16_t target_temp) {
      18:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
		queue_wait();
		// set position to MAX
    startpoint.axis[Z] = next_target.target.axis[Z] = (int32_t)(Z_MAX * 1000.);
		dda_new_startpoint();
	#endif
}
      1c:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
}
#endif /* USB_SERIAL */

/// send a whole block
void serial_writeblock(void *data, int datalen)
{
      20:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
	}
}

/// return most recent reading for a sensor
/// \param index sensor to read
uint16_t temp_get(temp_sensor_t index) {
      24:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      28:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      2c:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      30:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      34:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      38:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      3c:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      40:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      44:	0c 94 cc 20 	jmp	0x4198	; 0x4198 <__vector_17>
      48:	0c 94 53 21 	jmp	0x42a6	; 0x42a6 <__vector_18>
      4c:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      50:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      54:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      58:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      5c:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      60:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      64:	0c 94 0a 1e 	jmp	0x3c14	; 0x3c14 <__vector_25>
      68:	0c 94 3f 1e 	jmp	0x3c7e	; 0x3c7e <__vector_26>
      6c:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      70:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      74:	0c 94 07 02 	jmp	0x40e	; 0x40e <__vector_29>
      78:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      7c:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      80:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      84:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      88:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      8c:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      90:	0c 94 12 02 	jmp	0x424	; 0x424 <__vector_36>
      94:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      98:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      9c:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      a0:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      a4:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      a8:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      ac:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      b0:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      b4:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      b8:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      bc:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      c0:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      c4:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      c8:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      cc:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      d0:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      d4:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      d8:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      dc:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      e0:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      e4:	3c 03       	fmul	r19, r20
      e6:	3a 03       	fmul	r19, r18
      e8:	38 03       	fmul	r19, r16
      ea:	38 03       	fmul	r19, r16
      ec:	38 03       	fmul	r19, r16
      ee:	38 03       	fmul	r19, r16
      f0:	3c 03       	fmul	r19, r20
      f2:	3a 03       	fmul	r19, r18
      f4:	3c 03       	fmul	r19, r20
      f6:	3a 03       	fmul	r19, r18
      f8:	3a 03       	fmul	r19, r18
      fa:	38 03       	fmul	r19, r16
      fc:	38 03       	fmul	r19, r16
      fe:	38 03       	fmul	r19, r16
     100:	3c 03       	fmul	r19, r20
     102:	3a 03       	fmul	r19, r18
     104:	38 03       	fmul	r19, r16
     106:	38 03       	fmul	r19, r16
     108:	38 03       	fmul	r19, r16
     10a:	38 03       	fmul	r19, r16
     10c:	3c 03       	fmul	r19, r20
     10e:	3a 03       	fmul	r19, r18
     110:	3c 03       	fmul	r19, r20
     112:	3a 03       	fmul	r19, r18
     114:	38 03       	fmul	r19, r16
     116:	38 03       	fmul	r19, r16
     118:	38 03       	fmul	r19, r16
     11a:	38 03       	fmul	r19, r16
     11c:	38 03       	fmul	r19, r16
     11e:	38 03       	fmul	r19, r16
     120:	3c 03       	fmul	r19, r20
     122:	3a 03       	fmul	r19, r18
     124:	3c 03       	fmul	r19, r20
     126:	3a 03       	fmul	r19, r18
     128:	3c 03       	fmul	r19, r20
     12a:	3a 03       	fmul	r19, r18
     12c:	3c 03       	fmul	r19, r20
     12e:	3a 03       	fmul	r19, r18
     130:	3c 03       	fmul	r19, r20
     132:	3a 03       	fmul	r19, r18
     134:	3c 03       	fmul	r19, r20
     136:	3a 03       	fmul	r19, r18
     138:	38 03       	fmul	r19, r16
     13a:	38 03       	fmul	r19, r16
     13c:	38 03       	fmul	r19, r16
     13e:	3a 03       	fmul	r19, r18
     140:	38 03       	fmul	r19, r16
     142:	38 03       	fmul	r19, r16
     144:	3c 03       	fmul	r19, r20
     146:	48 03       	fmul	r20, r16
     148:	48 03       	fmul	r20, r16
     14a:	48 03       	fmul	r20, r16
     14c:	4c 03       	fmul	r20, r20
     14e:	4a 03       	fmul	r20, r18
     150:	4c 03       	fmul	r20, r20
     152:	4a 03       	fmul	r20, r18
     154:	4a 03       	fmul	r20, r18
     156:	48 03       	fmul	r20, r16
     158:	48 03       	fmul	r20, r16
     15a:	48 03       	fmul	r20, r16
     15c:	4c 03       	fmul	r20, r20
     15e:	4a 03       	fmul	r20, r18
     160:	48 03       	fmul	r20, r16
     162:	48 03       	fmul	r20, r16
     164:	48 03       	fmul	r20, r16
     166:	48 03       	fmul	r20, r16
     168:	4a 03       	fmul	r20, r18
     16a:	4a 03       	fmul	r20, r18
     16c:	4a 03       	fmul	r20, r18
     16e:	4a 03       	fmul	r20, r18
     170:	48 03       	fmul	r20, r16
     172:	48 03       	fmul	r20, r16
     174:	48 03       	fmul	r20, r16
     176:	48 03       	fmul	r20, r16
     178:	48 03       	fmul	r20, r16
     17a:	48 03       	fmul	r20, r16
     17c:	4c 03       	fmul	r20, r20
     17e:	4a 03       	fmul	r20, r18
     180:	4c 03       	fmul	r20, r20
     182:	4a 03       	fmul	r20, r18
     184:	4c 03       	fmul	r20, r20
     186:	4a 03       	fmul	r20, r18
     188:	4a 03       	fmul	r20, r18
     18a:	4a 03       	fmul	r20, r18
     18c:	4a 03       	fmul	r20, r18
     18e:	4a 03       	fmul	r20, r18
     190:	4a 03       	fmul	r20, r18
     192:	4a 03       	fmul	r20, r18
     194:	4a 03       	fmul	r20, r18
     196:	4a 03       	fmul	r20, r18
     198:	48 03       	fmul	r20, r16
     19a:	4a 03       	fmul	r20, r18
     19c:	4a 03       	fmul	r20, r18
     19e:	48 03       	fmul	r20, r16
     1a0:	4c 03       	fmul	r20, r20

000001a2 <steps_per_mm_P.2343>:
     1a2:	00 01 00 00 00 01 00 00 07 04 00 00 0a 00 00 00     ................

000001b2 <c0_P>:
     1b2:	6d 28 02 00 6d 28 02 00 46 13 01 00 15 eb 0a 00     m(..m(..F.......

000001c2 <steps_per_m_P>:
     1c2:	00 e8 03 00 00 e8 03 00 58 bb 0f 00 10 27 00 00     ........X....'..

000001d2 <maximum_feedrate_P>:
     1d2:	f4 01 00 00 f4 01 00 00 d0 07 00 00 f4 01 00 00     ................

000001e2 <__c.2115>:
     1e2:	45 72 72 6f 72 3a 20 6c 6f 6f 6b 20 61 68 65 61     Error: look ahea
     1f2:	64 20 6e 6f 74 20 66 61 73 74 20 65 6e 6f 75 67     d not fast enoug
     202:	68 0d 0a 00                                         h...

00000206 <__c.2020>:
     206:	0d 0a 00                                            ...

00000209 <__c.2018>:
     209:	65 72 72 6f 72 3a 20 65 6d 65 72 67 65 6e 63 79     error: emergency
     219:	20 73 74 6f 70 3a 00                                 stop:.

00000220 <axis_qn_P>:
	...
     228:	01 00 00 00 00 00 00 00                             ........

00000230 <axis_qr_P>:
     230:	00 e8 03 00 00 e8 03 00 18 79 00 00 10 27 00 00     .........y...'..

00000240 <__c.1724>:
     240:	51 25 64 2f 25 64 25 63 00                          Q%d/%d%c.

00000249 <__c.1710>:
     249:	57 61 69 74 69 6e 67 20 66 6f 72 20 74 61 72 67     Waiting for targ
     259:	65 74 20 74 65 6d 70 0a 00                          et temp..

00000262 <__c.1677>:
     262:	54 65 6d 70 20 61 63 68 69 65 76 65 64 0a 00        Temp achieved..

00000271 <__c.1851>:
     271:	72 73 20 00                                         rs .

00000275 <__c.1739>:
     275:	72 73 20 4e 25 6c 64 20 45 78 70 65 63 74 65 64     rs N%ld Expected
     285:	20 63 68 65 63 6b 73 75 6d 20 25 64 0a 00            checksum %d..

00000293 <__c.1737>:
     293:	6f 6b 20 00                                         ok .

00000297 <__c.1790>:
     297:	45 3a 20 42 61 64 20 4d 2d 63 6f 64 65 20 25 64     E: Bad M-code %d
	...

000002a8 <__c.1786>:
     2a8:	7a 5f 6d 69 6e 3a 00                                z_min:.

000002af <__c.1784>:
     2af:	74 72 69 67 67 65 72 65 64 20 00                    triggered .

000002ba <__c.1781>:
     2ba:	6f 70 65 6e 20 00                                   open .

000002c0 <__c.1776>:
     2c0:	46 49 52 4d 57 41 52 45 5f 4e 41 4d 45 3a 54 65     FIRMWARE_NAME:Te
     2d0:	61 63 75 70 20 46 49 52 4d 57 41 52 45 5f 55 52     acup FIRMWARE_UR
     2e0:	4c 3a 68 74 74 70 3a 2f 2f 67 69 74 68 75 62 2e     L:http://github.
     2f0:	63 6f 6d 2f 74 72 61 75 6d 66 6c 75 67 2f 54 65     com/traumflug/Te
     300:	61 63 75 70 5f 46 69 72 6d 77 61 72 65 2f 20 50     acup_Firmware/ P
     310:	52 4f 54 4f 43 4f 4c 5f 56 45 52 53 49 4f 4e 3a     ROTOCOL_VERSION:
     320:	31 2e 30 20 4d 41 43 48 49 4e 45 5f 54 59 50 45     1.0 MACHINE_TYPE
     330:	3a 4d 65 6e 64 65 6c 20 45 58 54 52 55 44 45 52     :Mendel EXTRUDER
     340:	5f 43 4f 55 4e 54 3a 25 64 20 54 45 4d 50 5f 53     _COUNT:%d TEMP_S
     350:	45 4e 53 4f 52 5f 43 4f 55 4e 54 3a 25 64 20 48     ENSOR_COUNT:%d H
     360:	45 41 54 45 52 5f 43 4f 55 4e 54 3a 25 64 00        EATER_COUNT:%d.

0000036f <__c.1773>:
     36f:	58 3a 25 6c 71 2c 59 3a 25 6c 71 2c 5a 3a 25 6c     X:%lq,Y:%lq,Z:%l
     37f:	71 2c 45 3a 25 6c 71 2c 46 3a 25 6c 75 00           q,E:%lq,F:%lu.

0000038d <__c.1755>:
     38d:	0a 73 74 6f 70 0a 00                                .stop..

00000394 <__c.1748>:
     394:	45 3a 20 42 61 64 20 47 2d 63 6f 64 65 20 25 64     E: Bad G-code %d
	...

000003a5 <__c.1809>:
     3a5:	73 74 61 72 74 0a 6f 6b 0a 00                       start.ok..

000003af <__c.1364>:
     3af:	30 78 00                                            0x.

000003b2 <__ctors_end>:
     3b2:	11 24       	eor	r1, r1
     3b4:	1f be       	out	0x3f, r1	; 63
     3b6:	cf ef       	ldi	r28, 0xFF	; 255
     3b8:	d1 e2       	ldi	r29, 0x21	; 33
     3ba:	de bf       	out	0x3e, r29	; 62
     3bc:	cd bf       	out	0x3d, r28	; 61
     3be:	00 e0       	ldi	r16, 0x00	; 0
     3c0:	0c bf       	out	0x3c, r16	; 60

000003c2 <__do_copy_data>:
     3c2:	12 e0       	ldi	r17, 0x02	; 2
     3c4:	a0 e0       	ldi	r26, 0x00	; 0
     3c6:	b2 e0       	ldi	r27, 0x02	; 2
     3c8:	ec e4       	ldi	r30, 0x4C	; 76
     3ca:	f7 e4       	ldi	r31, 0x47	; 71
     3cc:	00 e0       	ldi	r16, 0x00	; 0
     3ce:	0b bf       	out	0x3b, r16	; 59
     3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <__do_copy_data+0x14>
     3d2:	07 90       	elpm	r0, Z+
     3d4:	0d 92       	st	X+, r0
     3d6:	a8 32       	cpi	r26, 0x28	; 40
     3d8:	b1 07       	cpc	r27, r17
     3da:	d9 f7       	brne	.-10     	; 0x3d2 <__do_copy_data+0x10>
     3dc:	1b be       	out	0x3b, r1	; 59

000003de <__do_clear_bss>:
     3de:	17 e0       	ldi	r17, 0x07	; 7
     3e0:	a8 e2       	ldi	r26, 0x28	; 40
     3e2:	b2 e0       	ldi	r27, 0x02	; 2
     3e4:	01 c0       	rjmp	.+2      	; 0x3e8 <.do_clear_bss_start>

000003e6 <.do_clear_bss_loop>:
     3e6:	1d 92       	st	X+, r1

000003e8 <.do_clear_bss_start>:
     3e8:	a0 31       	cpi	r26, 0x10	; 16
     3ea:	b1 07       	cpc	r27, r17
     3ec:	e1 f7       	brne	.-8      	; 0x3e6 <.do_clear_bss_loop>
     3ee:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <main>
     3f2:	0c 94 a4 23 	jmp	0x4748	; 0x4748 <_exit>

000003f6 <__bad_interrupt>:
     3f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003fa <memcpy>:
     3fa:	fb 01       	movw	r30, r22
     3fc:	dc 01       	movw	r26, r24
     3fe:	02 c0       	rjmp	.+4      	; 0x404 <memcpy+0xa>
     400:	01 90       	ld	r0, Z+
     402:	0d 92       	st	X+, r0
     404:	41 50       	subi	r20, 0x01	; 1
     406:	50 40       	sbci	r21, 0x00	; 0
     408:	d8 f7       	brcc	.-10     	; 0x400 <memcpy+0x6>
     40a:	08 95       	ret

0000040c <analog_init>:
		#endif

		// now we start the first conversion and leave the rest to the interrupt
		ADCSRA |= MASK(ADIE) | MASK(ADSC);
	} /* analog_mask > 0 */
}
     40c:	08 95       	ret

0000040e <__vector_29>:

/*! Analog Interrupt

	This is where we read our analog value and store it in an array for later retrieval
*/
ISR(ADC_vect, ISR_NOBLOCK) {
     40e:	78 94       	sei
     410:	1f 92       	push	r1
     412:	0f 92       	push	r0
     414:	0f b6       	in	r0, 0x3f	; 63
     416:	0f 92       	push	r0
     418:	11 24       	eor	r1, r1
		#endif

		// After the mux has been set, start a new conversion 
		ADCSRA |= MASK(ADSC);
	}
}
     41a:	0f 90       	pop	r0
     41c:	0f be       	out	0x3f, r0	; 63
     41e:	0f 90       	pop	r0
     420:	1f 90       	pop	r1
     422:	18 95       	reti

00000424 <__vector_36>:
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega328P__)
ISR (USART_RX_vect) {
    AX12_ax_rx_buffer[(AX12_ax_rx_Pointer++)] = UDR0;    // esta es la rutina de interrupci√≥n de recepci√≥n
}                                                          
#elif defined (__AVR_ATmega1280__) || defined (__AVR_ATmega128__) || defined (__AVR_ATmega2560__)
ISR (USART1_RX_vect) {
     424:	1f 92       	push	r1
     426:	0f 92       	push	r0
     428:	0f b6       	in	r0, 0x3f	; 63
     42a:	0f 92       	push	r0
     42c:	0b b6       	in	r0, 0x3b	; 59
     42e:	0f 92       	push	r0
     430:	11 24       	eor	r1, r1
     432:	8f 93       	push	r24
     434:	9f 93       	push	r25
     436:	ef 93       	push	r30
     438:	ff 93       	push	r31
    AX12_ax_rx_buffer[(AX12_ax_rx_Pointer++)] = UDR1;    // esta es la rutina de interrupci√≥n de recepci√≥n
     43a:	80 91 3f 06 	lds	r24, 0x063F
     43e:	90 91 ce 00 	lds	r25, 0x00CE
     442:	e1 e6       	ldi	r30, 0x61	; 97
     444:	f6 e0       	ldi	r31, 0x06	; 6
     446:	e8 0f       	add	r30, r24
     448:	f1 1d       	adc	r31, r1
     44a:	90 83       	st	Z, r25
     44c:	8f 5f       	subi	r24, 0xFF	; 255
     44e:	80 93 3f 06 	sts	0x063F, r24
}                                                          // lo que hace es meter el byte recibido en el buffer
     452:	ff 91       	pop	r31
     454:	ef 91       	pop	r30
     456:	9f 91       	pop	r25
     458:	8f 91       	pop	r24
     45a:	0f 90       	pop	r0
     45c:	0b be       	out	0x3b, r0	; 59
     45e:	0f 90       	pop	r0
     460:	0f be       	out	0x3f, r0	; 63
     462:	0f 90       	pop	r0
     464:	1f 90       	pop	r1
     466:	18 95       	reti

00000468 <AX12_init>:
}                                                         // lo que hace es meter el byte recibido en el buffer
#endif    

/** initializes serial transmit at baud, 8-N-1 */
// nota: el AX12 internamente usa el Double Speed Operation (U2Xn=1). Ciertos baudrates no coinciden si no se usa este seteo
void AX12_init (long baud) {
     468:	9b 01       	movw	r18, r22
     46a:	ac 01       	movw	r20, r24
    unsigned int reg = F_CPU / (baud * 8) - 1;
     46c:	83 e0       	ldi	r24, 0x03	; 3
     46e:	22 0f       	add	r18, r18
     470:	33 1f       	adc	r19, r19
     472:	44 1f       	adc	r20, r20
     474:	55 1f       	adc	r21, r21
     476:	8a 95       	dec	r24
     478:	d1 f7       	brne	.-12     	; 0x46e <AX12_init+0x6>
     47a:	60 e0       	ldi	r22, 0x00	; 0
     47c:	74 e2       	ldi	r23, 0x24	; 36
     47e:	84 ef       	ldi	r24, 0xF4	; 244
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	0e 94 4c 23 	call	0x4698	; 0x4698 <__divmodsi4>
     486:	21 50       	subi	r18, 0x01	; 1
     488:	30 40       	sbci	r19, 0x00	; 0
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega328P__)
    bitSet (UCSR0A, U2X0); 
    UBRR0H = reg >> 8;                 // setea la velocidad del USART
    UBRR0L = reg & 0xFF; 
#elif defined (__AVR_ATmega1280__) || defined (__AVR_ATmega128__) || defined (__AVR_ATmega2560__)
    bitSet (UCSR1A, U2X1); 
     48a:	e8 ec       	ldi	r30, 0xC8	; 200
     48c:	f0 e0       	ldi	r31, 0x00	; 0
     48e:	80 81       	ld	r24, Z
     490:	82 60       	ori	r24, 0x02	; 2
     492:	80 83       	st	Z, r24
    UBRR1H = reg >> 8;
     494:	30 93 cd 00 	sts	0x00CD, r19
    UBRR1L = reg & 0xFF;               // setea la velocidad del USART
     498:	20 93 cc 00 	sts	0x00CC, r18
#elif defined (__AVR_ATmega8__)
    bitSet (UCSRA, U2X); 
    UBRRH = reg >> 8;
    UBRRL = reg & 0xFF;                // setea la velocidad del USART
#endif    
    ax_rx_Pointer = 0;
     49c:	10 92 40 06 	sts	0x0640, r1
    bitClear(UCSR0B, RXCIE0);    // deshabilita la interrupci√≥n de recepci√≥n
    bitClear(UCSR0B, RXEN0);     // deshabilila la recepci√≥n
    bitClear(UCSR0B, TXEN0);     // deshabilita la trasmisi√≥n
    bitSet(TIMSK0, TOIE0);          // rehabilita la interrupci√≥n del timer0 (nota: esto es s√≥lo para entornos Arduino)
#elif defined (__AVR_ATmega1280__) || defined (__AVR_ATmega128__) || defined (__AVR_ATmega2560__)
    bitClear(UCSR1B, RXCIE1);    // deshabilita la interrupci√≥n de recepci√≥n
     4a0:	e9 ec       	ldi	r30, 0xC9	; 201
     4a2:	f0 e0       	ldi	r31, 0x00	; 0
     4a4:	80 81       	ld	r24, Z
     4a6:	8f 77       	andi	r24, 0x7F	; 127
     4a8:	80 83       	st	Z, r24
    bitClear(UCSR1B, RXEN1);     // deshabilila la recepci√≥n
     4aa:	80 81       	ld	r24, Z
     4ac:	8f 7e       	andi	r24, 0xEF	; 239
     4ae:	80 83       	st	Z, r24
    bitClear(UCSR1B, TXEN1);     // deshabilita la trasmisi√≥n
     4b0:	80 81       	ld	r24, Z
     4b2:	87 7f       	andi	r24, 0xF7	; 247
     4b4:	80 83       	st	Z, r24
    bitSet(TIMSK0, TOIE0);          // rehabilita la interrupci√≥n del timer0 (nota: esto es s√≥lo para entornos Arduino)
     4b6:	ee e6       	ldi	r30, 0x6E	; 110
     4b8:	f0 e0       	ldi	r31, 0x00	; 0
     4ba:	80 81       	ld	r24, Z
     4bc:	81 60       	ori	r24, 0x01	; 1
     4be:	80 83       	st	Z, r24
    UBRRL = reg & 0xFF;                // setea la velocidad del USART
#endif    
    ax_rx_Pointer = 0;
    // deshabilita tanto recepci√≥n como trasmisi√≥n
    AX12_setNone();
}
     4c0:	08 95       	ret

000004c2 <AX12_sendPacket>:
/******************************************************************************
 * Packet Level
 ******************************************************************************/

/** send instruction packet */
void AX12_sendPacket (byte _id, byte datalength, byte instruction, byte* data) {
     4c2:	58 2f       	mov	r21, r24
     4c4:	94 2f       	mov	r25, r20
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega328P__)
    bitClear(UCSR0B, RXCIE0);    // deshabilita la interrupci√≥n de recepci√≥n
    bitClear(UCSR0B, RXEN0);     // deshabilila la recepci√≥n
    bitSet(UCSR0B, TXEN0);       // habilita la trasmisi√≥n
#elif defined (__AVR_ATmega1280__) || defined (__AVR_ATmega128__) || defined (__AVR_ATmega2560__)   
    bitClear(UCSR1B, RXCIE1);    // deshabilita la interrupci√≥n de recepci√≥n
     4c6:	80 91 c9 00 	lds	r24, 0x00C9
     4ca:	8f 77       	andi	r24, 0x7F	; 127
     4cc:	80 93 c9 00 	sts	0x00C9, r24
    bitClear(UCSR1B, RXEN1);     // deshabilila la recepci√≥n
     4d0:	80 91 c9 00 	lds	r24, 0x00C9
     4d4:	8f 7e       	andi	r24, 0xEF	; 239
     4d6:	80 93 c9 00 	sts	0x00C9, r24
    bitSet(UCSR1B, TXEN1);       // habilita la trasmisi√≥n
     4da:	80 91 c9 00 	lds	r24, 0x00C9
     4de:	88 60       	ori	r24, 0x08	; 8
     4e0:	80 93 c9 00 	sts	0x00C9, r24
byte AX12_writeByte (byte data) {
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega328P__)
    while (bit_is_clear(UCSR0A, UDRE0));    // espera que el micro est√© pronto para trasmitir
    UDR0 = data;                            // escribe el byte a trasmitir
#elif defined (__AVR_ATmega1280__) || defined (__AVR_ATmega128__) || defined (__AVR_ATmega2560__)
    while (bit_is_clear(UCSR1A, UDRE1));    // espera que el micro est√© pronto para trasmitir
     4e4:	80 91 c8 00 	lds	r24, 0x00C8
     4e8:	85 ff       	sbrs	r24, 5
     4ea:	fc cf       	rjmp	.-8      	; 0x4e4 <AX12_sendPacket+0x22>
    UDR1 = data;                            // escribe el byte a trasmitir
     4ec:	8f ef       	ldi	r24, 0xFF	; 255
     4ee:	80 93 ce 00 	sts	0x00CE, r24
byte AX12_writeByte (byte data) {
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega328P__)
    while (bit_is_clear(UCSR0A, UDRE0));    // espera que el micro est√© pronto para trasmitir
    UDR0 = data;                            // escribe el byte a trasmitir
#elif defined (__AVR_ATmega1280__) || defined (__AVR_ATmega128__) || defined (__AVR_ATmega2560__)
    while (bit_is_clear(UCSR1A, UDRE1));    // espera que el micro est√© pronto para trasmitir
     4f2:	80 91 c8 00 	lds	r24, 0x00C8
     4f6:	85 ff       	sbrs	r24, 5
     4f8:	fc cf       	rjmp	.-8      	; 0x4f2 <AX12_sendPacket+0x30>
    UDR1 = data;                            // escribe el byte a trasmitir
     4fa:	8f ef       	ldi	r24, 0xFF	; 255
     4fc:	80 93 ce 00 	sts	0x00CE, r24
byte AX12_writeByte (byte data) {
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega328P__)
    while (bit_is_clear(UCSR0A, UDRE0));    // espera que el micro est√© pronto para trasmitir
    UDR0 = data;                            // escribe el byte a trasmitir
#elif defined (__AVR_ATmega1280__) || defined (__AVR_ATmega128__) || defined (__AVR_ATmega2560__)
    while (bit_is_clear(UCSR1A, UDRE1));    // espera que el micro est√© pronto para trasmitir
     500:	80 91 c8 00 	lds	r24, 0x00C8
     504:	85 ff       	sbrs	r24, 5
     506:	fc cf       	rjmp	.-8      	; 0x500 <AX12_sendPacket+0x3e>
    UDR1 = data;                            // escribe el byte a trasmitir
     508:	50 93 ce 00 	sts	0x00CE, r21
    byte checksum = 0;
    AX12_setTX();
    AX12_writeByte (0xFF);
    AX12_writeByte (0xFF);
    checksum += AX12_writeByte (_id);
    checksum += AX12_writeByte (datalength + 2);
     50c:	46 2f       	mov	r20, r22
     50e:	4e 5f       	subi	r20, 0xFE	; 254
byte AX12_writeByte (byte data) {
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega328P__)
    while (bit_is_clear(UCSR0A, UDRE0));    // espera que el micro est√© pronto para trasmitir
    UDR0 = data;                            // escribe el byte a trasmitir
#elif defined (__AVR_ATmega1280__) || defined (__AVR_ATmega128__) || defined (__AVR_ATmega2560__)
    while (bit_is_clear(UCSR1A, UDRE1));    // espera que el micro est√© pronto para trasmitir
     510:	80 91 c8 00 	lds	r24, 0x00C8
     514:	85 ff       	sbrs	r24, 5
     516:	fc cf       	rjmp	.-8      	; 0x510 <AX12_sendPacket+0x4e>
    UDR1 = data;                            // escribe el byte a trasmitir
     518:	40 93 ce 00 	sts	0x00CE, r20
byte AX12_writeByte (byte data) {
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega328P__)
    while (bit_is_clear(UCSR0A, UDRE0));    // espera que el micro est√© pronto para trasmitir
    UDR0 = data;                            // escribe el byte a trasmitir
#elif defined (__AVR_ATmega1280__) || defined (__AVR_ATmega128__) || defined (__AVR_ATmega2560__)
    while (bit_is_clear(UCSR1A, UDRE1));    // espera que el micro est√© pronto para trasmitir
     51c:	80 91 c8 00 	lds	r24, 0x00C8
     520:	85 ff       	sbrs	r24, 5
     522:	fc cf       	rjmp	.-8      	; 0x51c <AX12_sendPacket+0x5a>
    UDR1 = data;                            // escribe el byte a trasmitir
     524:	90 93 ce 00 	sts	0x00CE, r25
    byte checksum = 0;
    AX12_setTX();
    AX12_writeByte (0xFF);
    AX12_writeByte (0xFF);
    checksum += AX12_writeByte (_id);
    checksum += AX12_writeByte (datalength + 2);
     528:	49 0f       	add	r20, r25
    checksum += AX12_writeByte (instruction);
     52a:	45 0f       	add	r20, r21
     52c:	f9 01       	movw	r30, r18
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	0a c0       	rjmp	.+20     	; 0x546 <AX12_sendPacket+0x84>
    for (byte f=0; f<datalength; f++) {     // data = par√°metros
      checksum += AX12_writeByte (data[f]);
     532:	20 81       	ld	r18, Z
byte AX12_writeByte (byte data) {
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega328P__)
    while (bit_is_clear(UCSR0A, UDRE0));    // espera que el micro est√© pronto para trasmitir
    UDR0 = data;                            // escribe el byte a trasmitir
#elif defined (__AVR_ATmega1280__) || defined (__AVR_ATmega128__) || defined (__AVR_ATmega2560__)
    while (bit_is_clear(UCSR1A, UDRE1));    // espera que el micro est√© pronto para trasmitir
     534:	80 91 c8 00 	lds	r24, 0x00C8
     538:	85 ff       	sbrs	r24, 5
     53a:	fc cf       	rjmp	.-8      	; 0x534 <AX12_sendPacket+0x72>
    UDR1 = data;                            // escribe el byte a trasmitir
     53c:	20 93 ce 00 	sts	0x00CE, r18
    AX12_writeByte (0xFF);
    checksum += AX12_writeByte (_id);
    checksum += AX12_writeByte (datalength + 2);
    checksum += AX12_writeByte (instruction);
    for (byte f=0; f<datalength; f++) {     // data = par√°metros
      checksum += AX12_writeByte (data[f]);
     540:	42 0f       	add	r20, r18
    AX12_writeByte (0xFF);
    AX12_writeByte (0xFF);
    checksum += AX12_writeByte (_id);
    checksum += AX12_writeByte (datalength + 2);
    checksum += AX12_writeByte (instruction);
    for (byte f=0; f<datalength; f++) {     // data = par√°metros
     542:	9f 5f       	subi	r25, 0xFF	; 255
     544:	31 96       	adiw	r30, 0x01	; 1
     546:	96 17       	cp	r25, r22
     548:	a0 f3       	brcs	.-24     	; 0x532 <AX12_sendPacket+0x70>
byte AX12_writeByte (byte data) {
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega328P__)
    while (bit_is_clear(UCSR0A, UDRE0));    // espera que el micro est√© pronto para trasmitir
    UDR0 = data;                            // escribe el byte a trasmitir
#elif defined (__AVR_ATmega1280__) || defined (__AVR_ATmega128__) || defined (__AVR_ATmega2560__)
    while (bit_is_clear(UCSR1A, UDRE1));    // espera que el micro est√© pronto para trasmitir
     54a:	80 91 c8 00 	lds	r24, 0x00C8
     54e:	85 ff       	sbrs	r24, 5
     550:	fc cf       	rjmp	.-8      	; 0x54a <AX12_sendPacket+0x88>
    checksum += AX12_writeByte (instruction);
    for (byte f=0; f<datalength; f++) {     // data = par√°metros
      checksum += AX12_writeByte (data[f]);
    }
    // checksum =
    AX12_writeByte (~checksum);
     552:	40 95       	com	r20
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega328P__)
    while (bit_is_clear(UCSR0A, UDRE0));    // espera que el micro est√© pronto para trasmitir
    UDR0 = data;                            // escribe el byte a trasmitir
#elif defined (__AVR_ATmega1280__) || defined (__AVR_ATmega128__) || defined (__AVR_ATmega2560__)
    while (bit_is_clear(UCSR1A, UDRE1));    // espera que el micro est√© pronto para trasmitir
    UDR1 = data;                            // escribe el byte a trasmitir
     554:	40 93 ce 00 	sts	0x00CE, r20
    bitClear(TIMSK0, TOIE0);   // deshabilita la interrupci√≥n del timer0 (nota: esto es s√≥lo para entornos Arduino)
    bitClear(UCSR0B, TXEN0);   // deshabilita la trasmisi√≥n
    bitSet(UCSR0B, RXEN0);     // habilita la recepci√≥n
    bitSet(UCSR0B, RXCIE0);    // habilita la interrupci√≥n de recepci√≥n
#elif defined (__AVR_ATmega1280__) || defined (__AVR_ATmega128__) || defined (__AVR_ATmega2560__)
    bitClear(TIMSK0, TOIE0);   // deshabilita la interrupci√≥n del timer0 (nota: esto es s√≥lo para entornos Arduino)
     558:	80 91 6e 00 	lds	r24, 0x006E
     55c:	8e 7f       	andi	r24, 0xFE	; 254
     55e:	80 93 6e 00 	sts	0x006E, r24
    bitClear(UCSR1B, TXEN1);   // deshabilita la trasmisi√≥n
     562:	80 91 c9 00 	lds	r24, 0x00C9
     566:	87 7f       	andi	r24, 0xF7	; 247
     568:	80 93 c9 00 	sts	0x00C9, r24
    bitSet(UCSR1B, RXEN1);     // habilita la recepci√≥n
     56c:	80 91 c9 00 	lds	r24, 0x00C9
     570:	80 61       	ori	r24, 0x10	; 16
     572:	80 93 c9 00 	sts	0x00C9, r24
    bitSet(UCSR1B, RXCIE1);    // habilita la interrupci√≥n de recepci√≥n
     576:	80 91 c9 00 	lds	r24, 0x00C9
     57a:	80 68       	ori	r24, 0x80	; 128
     57c:	80 93 c9 00 	sts	0x00C9, r24
    bitClear(TIMSK0, TOIE0); // deshabilita la interrupci√≥n del timer0 (nota: esto es s√≥lo para entornos Arduino)
    bitClear(UCSRB, TXEN);   // deshabilita la trasmisi√≥n
    bitSet(UCSRB, RXEN);     // habilita la recepci√≥n
    bitSet(UCSRB, RXCIE);    // habilita la interrupci√≥n de recepci√≥n 
#endif    
    ax_rx_Pointer = 0;         // resetea el puntero del buffer
     580:	10 92 40 06 	sts	0x0640, r1
      checksum += AX12_writeByte (data[f]);
    }
    // checksum =
    AX12_writeByte (~checksum);
    AX12_setRX();
}
     584:	08 95       	ret

00000586 <AX12_readPacket>:
/** retorna la posici√≥n en el buffer a partir de la cual se lee lo siguiente:
    posici√≥n [0] = status_id
    posici√≥n [1] = internal error (0 = OK)
    posici√≥n [2] = status_error
    posici√≥n [3,4,...] = status_data        */
byte AX12_readPacket () {
     586:	1f 93       	push	r17
     588:	70 e0       	ldi	r23, 0x00	; 0
     58a:	60 e0       	ldi	r22, 0x00	; 0
     58c:	07 c0       	rjmp	.+14     	; 0x59c <AX12_readPacket+0x16>
     58e:	4f 5f       	subi	r20, 0xFF	; 255
     590:	5f 4f       	sbci	r21, 0xFF	; 255
    // primero espera que llegue toda la data
    offset = 0; timeout = 0; bcount = 0;
    while (bcount < 13) {       // 13 es el largo m√°ximo que puede tener un packet
        ulCounter = 0;
        while ((bcount + offset) == AX12_ax_rx_Pointer) {
            if (ulCounter++ > 1100L) {                   // was 3000
     592:	84 e0       	ldi	r24, 0x04	; 4
     594:	4e 34       	cpi	r20, 0x4E	; 78
     596:	58 07       	cpc	r21, r24
     598:	19 f4       	brne	.+6      	; 0x5a0 <AX12_readPacket+0x1a>
     59a:	18 c0       	rjmp	.+48     	; 0x5cc <AX12_readPacket+0x46>
     59c:	40 e0       	ldi	r20, 0x00	; 0
     59e:	50 e0       	ldi	r21, 0x00	; 0
    byte timeout, error, status_length, checksum, offset, bcount;
    // primero espera que llegue toda la data
    offset = 0; timeout = 0; bcount = 0;
    while (bcount < 13) {       // 13 es el largo m√°ximo que puede tener un packet
        ulCounter = 0;
        while ((bcount + offset) == AX12_ax_rx_Pointer) {
     5a0:	e7 2f       	mov	r30, r23
     5a2:	f0 e0       	ldi	r31, 0x00	; 0
     5a4:	80 91 3f 06 	lds	r24, 0x063F
     5a8:	9f 01       	movw	r18, r30
     5aa:	26 0f       	add	r18, r22
     5ac:	31 1d       	adc	r19, r1
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	28 17       	cp	r18, r24
     5b2:	39 07       	cpc	r19, r25
     5b4:	61 f3       	breq	.-40     	; 0x58e <AX12_readPacket+0x8>
     5b6:	4f c0       	rjmp	.+158    	; 0x656 <AX12_readPacket+0xd0>
                timeout = 1;
                break;
            }
        }
        if (timeout) break;
        if ((bcount == 0) && (AX12_ax_rx_buffer[offset] != 0xff)) offset++;
     5b8:	ef 59       	subi	r30, 0x9F	; 159
     5ba:	f9 4f       	sbci	r31, 0xF9	; 249
     5bc:	80 81       	ld	r24, Z
     5be:	8f 3f       	cpi	r24, 0xFF	; 255
     5c0:	11 f0       	breq	.+4      	; 0x5c6 <AX12_readPacket+0x40>
     5c2:	7f 5f       	subi	r23, 0xFF	; 255
     5c4:	eb cf       	rjmp	.-42     	; 0x59c <AX12_readPacket+0x16>
        else bcount++;
     5c6:	6f 5f       	subi	r22, 0xFF	; 255
byte AX12_readPacket () {
    unsigned long ulCounter;
    byte timeout, error, status_length, checksum, offset, bcount;
    // primero espera que llegue toda la data
    offset = 0; timeout = 0; bcount = 0;
    while (bcount < 13) {       // 13 es el largo m√°ximo que puede tener un packet
     5c8:	6d 30       	cpi	r22, 0x0D	; 13
     5ca:	40 f3       	brcs	.-48     	; 0x59c <AX12_readPacket+0x16>
    bitClear(UCSR0B, RXCIE0);    // deshabilita la interrupci√≥n de recepci√≥n
    bitClear(UCSR0B, RXEN0);     // deshabilila la recepci√≥n
    bitClear(UCSR0B, TXEN0);     // deshabilita la trasmisi√≥n
    bitSet(TIMSK0, TOIE0);          // rehabilita la interrupci√≥n del timer0 (nota: esto es s√≥lo para entornos Arduino)
#elif defined (__AVR_ATmega1280__) || defined (__AVR_ATmega128__) || defined (__AVR_ATmega2560__)
    bitClear(UCSR1B, RXCIE1);    // deshabilita la interrupci√≥n de recepci√≥n
     5cc:	80 91 c9 00 	lds	r24, 0x00C9
     5d0:	8f 77       	andi	r24, 0x7F	; 127
     5d2:	80 93 c9 00 	sts	0x00C9, r24
    bitClear(UCSR1B, RXEN1);     // deshabilila la recepci√≥n
     5d6:	80 91 c9 00 	lds	r24, 0x00C9
     5da:	8f 7e       	andi	r24, 0xEF	; 239
     5dc:	80 93 c9 00 	sts	0x00C9, r24
    bitClear(UCSR1B, TXEN1);     // deshabilita la trasmisi√≥n
     5e0:	80 91 c9 00 	lds	r24, 0x00C9
     5e4:	87 7f       	andi	r24, 0xF7	; 247
     5e6:	80 93 c9 00 	sts	0x00C9, r24
    bitSet(TIMSK0, TOIE0);          // rehabilita la interrupci√≥n del timer0 (nota: esto es s√≥lo para entornos Arduino)
     5ea:	80 91 6e 00 	lds	r24, 0x006E
     5ee:	81 60       	ori	r24, 0x01	; 1
     5f0:	80 93 6e 00 	sts	0x006E, r24
     5f4:	90 e0       	ldi	r25, 0x00	; 0
    AX12_setNone();
    // ahora decodifica el packet
    // correcci√≥n de cabecera
    error = 0;                                             // c√≥digo interno de error
    do {
        error++;
     5f6:	9f 5f       	subi	r25, 0xFF	; 255
     5f8:	19 2f       	mov	r17, r25
     5fa:	17 0f       	add	r17, r23
     5fc:	26 2f       	mov	r18, r22
     5fe:	29 1b       	sub	r18, r25
        offset++;
        bcount--;
    } while (AX12_ax_rx_buffer[offset] == 255);
     600:	41 2f       	mov	r20, r17
     602:	50 e0       	ldi	r21, 0x00	; 0
     604:	fa 01       	movw	r30, r20
     606:	ef 59       	subi	r30, 0x9F	; 159
     608:	f9 4f       	sbci	r31, 0xF9	; 249
     60a:	80 81       	ld	r24, Z
     60c:	8f 3f       	cpi	r24, 0xFF	; 255
     60e:	99 f3       	breq	.-26     	; 0x5f6 <AX12_readPacket+0x70>
    if (error > 1) error = 0;                               // prueba de cabecera
     610:	92 30       	cpi	r25, 0x02	; 2
     612:	08 f0       	brcs	.+2      	; 0x616 <AX12_readPacket+0x90>
     614:	90 e0       	ldi	r25, 0x00	; 0
    // offset = primer byte del mensaje (sin cabecera)
    // bcount = largo del mensaje leido (sin cabecera)
    status_length = 2 + AX12_ax_rx_buffer[offset+1];            // largo del mensaje decodificado
     616:	da 01       	movw	r26, r20
     618:	11 96       	adiw	r26, 0x01	; 1
     61a:	fd 01       	movw	r30, r26
     61c:	ef 59       	subi	r30, 0x9F	; 159
     61e:	f9 4f       	sbci	r31, 0xF9	; 249
     620:	70 81       	ld	r23, Z
     622:	7e 5f       	subi	r23, 0xFE	; 254
    if (bcount != status_length) error+=2;                 // prueba de coherencia de data
     624:	27 13       	cpse	r18, r23
     626:	9e 5f       	subi	r25, 0xFE	; 254
     628:	9a 01       	movw	r18, r20
     62a:	60 e0       	ldi	r22, 0x00	; 0
     62c:	07 c0       	rjmp	.+14     	; 0x63c <AX12_readPacket+0xb6>
    checksum = 0;                                          // c√°lculo de checksum
    for (byte f=0; f<status_length; f++)
        checksum += AX12_ax_rx_buffer[offset+f];
     62e:	f9 01       	movw	r30, r18
     630:	ef 59       	subi	r30, 0x9F	; 159
     632:	f9 4f       	sbci	r31, 0xF9	; 249
     634:	80 81       	ld	r24, Z
     636:	68 0f       	add	r22, r24
     638:	2f 5f       	subi	r18, 0xFF	; 255
     63a:	3f 4f       	sbci	r19, 0xFF	; 255
    // offset = primer byte del mensaje (sin cabecera)
    // bcount = largo del mensaje leido (sin cabecera)
    status_length = 2 + AX12_ax_rx_buffer[offset+1];            // largo del mensaje decodificado
    if (bcount != status_length) error+=2;                 // prueba de coherencia de data
    checksum = 0;                                          // c√°lculo de checksum
    for (byte f=0; f<status_length; f++)
     63c:	82 2f       	mov	r24, r18
     63e:	84 1b       	sub	r24, r20
     640:	87 17       	cp	r24, r23
     642:	a8 f3       	brcs	.-22     	; 0x62e <AX12_readPacket+0xa8>
        checksum += AX12_ax_rx_buffer[offset+f];
    if (checksum != 255) error+=4;                          // prueba de checksum
     644:	6f 3f       	cpi	r22, 0xFF	; 255
     646:	09 f0       	breq	.+2      	; 0x64a <AX12_readPacket+0xc4>
     648:	9c 5f       	subi	r25, 0xFC	; 252
    AX12_ax_rx_buffer[offset+1] = error;
     64a:	af 59       	subi	r26, 0x9F	; 159
     64c:	b9 4f       	sbci	r27, 0xF9	; 249
     64e:	9c 93       	st	X, r25
    return offset;   
}
     650:	81 2f       	mov	r24, r17
     652:	1f 91       	pop	r17
     654:	08 95       	ret
                timeout = 1;
                break;
            }
        }
        if (timeout) break;
        if ((bcount == 0) && (AX12_ax_rx_buffer[offset] != 0xff)) offset++;
     656:	66 23       	and	r22, r22
     658:	09 f0       	breq	.+2      	; 0x65c <AX12_readPacket+0xd6>
     65a:	b5 cf       	rjmp	.-150    	; 0x5c6 <AX12_readPacket+0x40>
     65c:	ad cf       	rjmp	.-166    	; 0x5b8 <AX12_readPacket+0x32>

0000065e <lengthRead>:
  }
}

byte lengthRead (byte registr) {
    byte reglength = 0;
    switch (registr) {
     65e:	e8 2f       	mov	r30, r24
     660:	f0 e0       	ldi	r31, 0x00	; 0
     662:	e1 33       	cpi	r30, 0x31	; 49
     664:	f1 05       	cpc	r31, r1
     666:	30 f4       	brcc	.+12     	; 0x674 <lengthRead+0x16>
     668:	ee 58       	subi	r30, 0x8E	; 142
     66a:	ff 4f       	sbci	r31, 0xFF	; 255
     66c:	0c 94 9e 23 	jmp	0x473c	; 0x473c <__tablejump2__>
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	08 95       	ret
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	08 95       	ret
     678:	82 e0       	ldi	r24, 0x02	; 2
      case MAX_TORQUE: case DOWN_CALIBRATION: case UP_CALIBRATION: 
      case GOAL_POSITION: case MOVING_SPEED: case TORQUE_LIMIT: 
      case PRESENT_POSITION: case PRESENT_SPEED: case PRESENT_LOAD: case PUNCH: reglength = 2; break;
    }
    return reglength;
}
     67a:	08 95       	ret

0000067c <lengthWrite>:

byte lengthWrite (byte registr) {
    byte reglength = 0;
    switch (registr) {
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	fc 01       	movw	r30, r24
     680:	33 97       	sbiw	r30, 0x03	; 3
     682:	ee 32       	cpi	r30, 0x2E	; 46
     684:	f1 05       	cpc	r31, r1
     686:	30 f4       	brcc	.+12     	; 0x694 <lengthWrite+0x18>
     688:	ed 55       	subi	r30, 0x5D	; 93
     68a:	ff 4f       	sbci	r31, 0xFF	; 255
     68c:	0c 94 9e 23 	jmp	0x473c	; 0x473c <__tablejump2__>
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	08 95       	ret
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	08 95       	ret
     698:	82 e0       	ldi	r24, 0x02	; 2
      case CW_ANGLE_LIMIT: case CCW_ANGLE_LIMIT: 
      case MAX_TORQUE: case GOAL_POSITION: 
      case MOVING_SPEED: case TORQUE_LIMIT: case PUNCH: reglength = 2; break;
    }
    return reglength;
}
     69a:	08 95       	ret

0000069c <AX12_returnData>:


AX12data AX12_returnData (AX12servo servo, byte _srl) {
     69c:	a3 e0       	ldi	r26, 0x03	; 3
     69e:	b0 e0       	ldi	r27, 0x00	; 0
     6a0:	e4 e5       	ldi	r30, 0x54	; 84
     6a2:	f3 e0       	ldi	r31, 0x03	; 3
     6a4:	0c 94 76 23 	jmp	0x46ec	; 0x46ec <__prologue_saves__+0x1e>
     6a8:	69 83       	std	Y+1, r22	; 0x01
     6aa:	7a 83       	std	Y+2, r23	; 0x02
     6ac:	8b 83       	std	Y+3, r24	; 0x03
     6ae:	16 2f       	mov	r17, r22
  AX12data returndata;
  if (servo.SRL >= _srl) {
     6b0:	84 17       	cp	r24, r20
     6b2:	48 f1       	brcs	.+82     	; 0x706 <AX12_returnData+0x6a>
    byte index = AX12_readPacket ();
     6b4:	0e 94 c3 02 	call	0x586	; 0x586 <AX12_readPacket>
     6b8:	48 2f       	mov	r20, r24
    byte status_id = AX12_ax_rx_buffer [index];
     6ba:	e8 2f       	mov	r30, r24
     6bc:	f0 e0       	ldi	r31, 0x00	; 0
     6be:	df 01       	movw	r26, r30
     6c0:	af 59       	subi	r26, 0x9F	; 159
     6c2:	b9 4f       	sbci	r27, 0xF9	; 249
     6c4:	8c 91       	ld	r24, X
    byte int_error = AX12_ax_rx_buffer [index+1];
     6c6:	df 01       	movw	r26, r30
     6c8:	ae 59       	subi	r26, 0x9E	; 158
     6ca:	b9 4f       	sbci	r27, 0xF9	; 249
     6cc:	6c 91       	ld	r22, X
    byte status_error = AX12_ax_rx_buffer [index+2];
     6ce:	ed 59       	subi	r30, 0x9D	; 157
     6d0:	f9 4f       	sbci	r31, 0xF9	; 249
     6d2:	e0 81       	ld	r30, Z
    returndata.error = (int_error<<7) | status_error | ((status_id != servo.id)<<10);       // genera el mensaje de error, combinaci√≥n de error interno con error ax12
     6d4:	81 17       	cp	r24, r17
     6d6:	19 f4       	brne	.+6      	; 0x6de <AX12_returnData+0x42>
     6d8:	20 e0       	ldi	r18, 0x00	; 0
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <AX12_returnData+0x46>
     6de:	20 e0       	ldi	r18, 0x00	; 0
     6e0:	34 e0       	ldi	r19, 0x04	; 4
     6e2:	a6 2f       	mov	r26, r22
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	b6 95       	lsr	r27
     6e8:	ba 2f       	mov	r27, r26
     6ea:	aa 27       	eor	r26, r26
     6ec:	b7 95       	ror	r27
     6ee:	a7 95       	ror	r26
     6f0:	8e 2f       	mov	r24, r30
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a8 2b       	or	r26, r24
     6f6:	b9 2b       	or	r27, r25
     6f8:	a2 2b       	or	r26, r18
     6fa:	b3 2b       	or	r27, r19
    returndata.data = (byte*) &(AX12_ax_rx_buffer [index+3]);
     6fc:	e4 2f       	mov	r30, r20
     6fe:	f0 e0       	ldi	r31, 0x00	; 0
     700:	ec 59       	subi	r30, 0x9C	; 156
     702:	f9 4f       	sbci	r31, 0xF9	; 249
     704:	18 c0       	rjmp	.+48     	; 0x736 <AX12_returnData+0x9a>
    bitClear(UCSR0B, RXCIE0);    // deshabilita la interrupci√≥n de recepci√≥n
    bitClear(UCSR0B, RXEN0);     // deshabilila la recepci√≥n
    bitClear(UCSR0B, TXEN0);     // deshabilita la trasmisi√≥n
    bitSet(TIMSK0, TOIE0);          // rehabilita la interrupci√≥n del timer0 (nota: esto es s√≥lo para entornos Arduino)
#elif defined (__AVR_ATmega1280__) || defined (__AVR_ATmega128__) || defined (__AVR_ATmega2560__)
    bitClear(UCSR1B, RXCIE1);    // deshabilita la interrupci√≥n de recepci√≥n
     706:	80 91 c9 00 	lds	r24, 0x00C9
     70a:	8f 77       	andi	r24, 0x7F	; 127
     70c:	80 93 c9 00 	sts	0x00C9, r24
    bitClear(UCSR1B, RXEN1);     // deshabilila la recepci√≥n
     710:	80 91 c9 00 	lds	r24, 0x00C9
     714:	8f 7e       	andi	r24, 0xEF	; 239
     716:	80 93 c9 00 	sts	0x00C9, r24
    bitClear(UCSR1B, TXEN1);     // deshabilita la trasmisi√≥n
     71a:	80 91 c9 00 	lds	r24, 0x00C9
     71e:	87 7f       	andi	r24, 0xF7	; 247
     720:	80 93 c9 00 	sts	0x00C9, r24
    bitSet(TIMSK0, TOIE0);          // rehabilita la interrupci√≥n del timer0 (nota: esto es s√≥lo para entornos Arduino)
     724:	80 91 6e 00 	lds	r24, 0x006E
     728:	81 60       	ori	r24, 0x01	; 1
     72a:	80 93 6e 00 	sts	0x006E, r24
     72e:	e0 e0       	ldi	r30, 0x00	; 0
     730:	f0 e0       	ldi	r31, 0x00	; 0
     732:	af ef       	ldi	r26, 0xFF	; 255
     734:	bf ef       	ldi	r27, 0xFF	; 255
    AX12_setNone();
    returndata.error = -1;
    returndata.data = 0;
  }
  return returndata;
}
     736:	bd 01       	movw	r22, r26
     738:	cf 01       	movw	r24, r30
     73a:	23 96       	adiw	r28, 0x03	; 3
     73c:	e3 e0       	ldi	r30, 0x03	; 3
     73e:	0c 94 92 23 	jmp	0x4724	; 0x4724 <__epilogue_restores__+0x1e>

00000742 <AX12_processValue>:

void AX12_processValue (AX12servo servo, byte registr, int* value) {                           // procesa el valor para la salida segun la propiedad "inverse"
     742:	a3 e0       	ldi	r26, 0x03	; 3
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 77 23 	jmp	0x46ee	; 0x46ee <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	97 2f       	mov	r25, r23
     752:	7a 83       	std	Y+2, r23	; 0x02
     754:	8b 83       	std	Y+3, r24	; 0x03
     756:	f9 01       	movw	r30, r18
  switch (registr) {
     758:	44 32       	cpi	r20, 0x24	; 36
     75a:	51 f0       	breq	.+20     	; 0x770 <AX12_processValue+0x2e>
     75c:	45 32       	cpi	r20, 0x25	; 37
     75e:	18 f4       	brcc	.+6      	; 0x766 <AX12_processValue+0x24>
     760:	4e 31       	cpi	r20, 0x1E	; 30
     762:	31 f5       	brne	.+76     	; 0x7b0 <AX12_processValue+0x6e>
     764:	05 c0       	rjmp	.+10     	; 0x770 <AX12_processValue+0x2e>
     766:	46 32       	cpi	r20, 0x26	; 38
     768:	61 f0       	breq	.+24     	; 0x782 <AX12_processValue+0x40>
     76a:	48 32       	cpi	r20, 0x28	; 40
     76c:	09 f5       	brne	.+66     	; 0x7b0 <AX12_processValue+0x6e>
     76e:	09 c0       	rjmp	.+18     	; 0x782 <AX12_processValue+0x40>
    case PRESENT_POSITION: case GOAL_POSITION:
      if (servo.inverse) {*value = 1023 - *value;}
     770:	99 23       	and	r25, r25
     772:	f1 f0       	breq	.+60     	; 0x7b0 <AX12_processValue+0x6e>
     774:	8f ef       	ldi	r24, 0xFF	; 255
     776:	93 e0       	ldi	r25, 0x03	; 3
     778:	20 81       	ld	r18, Z
     77a:	31 81       	ldd	r19, Z+1	; 0x01
     77c:	82 1b       	sub	r24, r18
     77e:	93 0b       	sbc	r25, r19
     780:	15 c0       	rjmp	.+42     	; 0x7ac <AX12_processValue+0x6a>
      break;
    case PRESENT_SPEED: case PRESENT_LOAD:
      *value = ((*value)&0x03FF) * bin2sign(((*value)>0x03FF)^servo.inverse); 
     782:	20 81       	ld	r18, Z
     784:	31 81       	ldd	r19, Z+1	; 0x01
     786:	80 e0       	ldi	r24, 0x00	; 0
     788:	44 e0       	ldi	r20, 0x04	; 4
     78a:	20 30       	cpi	r18, 0x00	; 0
     78c:	34 07       	cpc	r19, r20
     78e:	0c f0       	brlt	.+2      	; 0x792 <AX12_processValue+0x50>
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	89 27       	eor	r24, r25
     794:	88 0f       	add	r24, r24
     796:	81 50       	subi	r24, 0x01	; 1
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	33 70       	andi	r19, 0x03	; 3
     79c:	ac 01       	movw	r20, r24
     79e:	42 9f       	mul	r20, r18
     7a0:	c0 01       	movw	r24, r0
     7a2:	43 9f       	mul	r20, r19
     7a4:	90 0d       	add	r25, r0
     7a6:	52 9f       	mul	r21, r18
     7a8:	90 0d       	add	r25, r0
     7aa:	11 24       	eor	r1, r1
     7ac:	91 83       	std	Z+1, r25	; 0x01
     7ae:	80 83       	st	Z, r24
      break;
  } 
     7b0:	23 96       	adiw	r28, 0x03	; 3
     7b2:	e2 e0       	ldi	r30, 0x02	; 2
     7b4:	0c 94 93 23 	jmp	0x4726	; 0x4726 <__epilogue_restores__+0x20>

000007b8 <AX12_writeData>:
  return AX12_returnData (servo, RETURN_READ);
}

/** write data + reg write */
// seteando a "true" el par√°metro adicional (isReg) se transforma en un reg write
int AX12_writeData (AX12servo servo, byte start, byte length, byte* values, boolean isReg) {
     7b8:	a3 e0       	ldi	r26, 0x03	; 3
     7ba:	b0 e0       	ldi	r27, 0x00	; 0
     7bc:	e2 ee       	ldi	r30, 0xE2	; 226
     7be:	f3 e0       	ldi	r31, 0x03	; 3
     7c0:	0c 94 6f 23 	jmp	0x46de	; 0x46de <__prologue_saves__+0x10>
     7c4:	96 2f       	mov	r25, r22
     7c6:	69 83       	std	Y+1, r22	; 0x01
     7c8:	7a 83       	std	Y+2, r23	; 0x02
     7ca:	8b 83       	std	Y+3, r24	; 0x03
     7cc:	c4 2e       	mov	r12, r20
     7ce:	f2 2e       	mov	r15, r18
     7d0:	b8 01       	movw	r22, r16
    }
    int error = AX12_returnData (servo, RETURN_ALL).error;
    if (start < 23) {delay_ms (5);}                   // si la operaci√≥n de escritura es en la EEPROM, este delay previene el embotellamiento
                                                   // (las operaciones en la EEPROM no suelen ser real-time)
    return error;
}
     7d2:	ad b6       	in	r10, 0x3d	; 61
     7d4:	be b6       	in	r11, 0x3e	; 62
  return AX12_returnData (servo, RETURN_READ);
}

/** write data + reg write */
// seteando a "true" el par√°metro adicional (isReg) se transforma en un reg write
int AX12_writeData (AX12servo servo, byte start, byte length, byte* values, boolean isReg) {
     7d6:	d9 2e       	mov	r13, r25
    byte data [length+1];
     7d8:	82 2f       	mov	r24, r18
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	01 96       	adiw	r24, 0x01	; 1
     7de:	2d b7       	in	r18, 0x3d	; 61
     7e0:	3e b7       	in	r19, 0x3e	; 62
     7e2:	28 1b       	sub	r18, r24
     7e4:	39 0b       	sbc	r19, r25
     7e6:	0f b6       	in	r0, 0x3f	; 63
     7e8:	f8 94       	cli
     7ea:	3e bf       	out	0x3e, r19	; 62
     7ec:	0f be       	out	0x3f, r0	; 63
     7ee:	2d bf       	out	0x3d, r18	; 61
     7f0:	0d b7       	in	r16, 0x3d	; 61
     7f2:	1e b7       	in	r17, 0x3e	; 62
     7f4:	0f 5f       	subi	r16, 0xFF	; 255
     7f6:	1f 4f       	sbci	r17, 0xFF	; 255
    data [0] = start; 
     7f8:	ed b7       	in	r30, 0x3d	; 61
     7fa:	fe b7       	in	r31, 0x3e	; 62
     7fc:	41 83       	std	Z+1, r20	; 0x01
    memcpy (&data[1], values, length);
     7fe:	98 01       	movw	r18, r16
     800:	2f 5f       	subi	r18, 0xFF	; 255
     802:	3f 4f       	sbci	r19, 0xFF	; 255
     804:	c9 01       	movw	r24, r18
     806:	4f 2d       	mov	r20, r15
     808:	50 e0       	ldi	r21, 0x00	; 0
     80a:	0e 94 fd 01 	call	0x3fa	; 0x3fa <memcpy>
     80e:	6f 2d       	mov	r22, r15
     810:	6f 5f       	subi	r22, 0xFF	; 255
    if (isReg) {
     812:	ee 20       	and	r14, r14
     814:	19 f0       	breq	.+6      	; 0x81c <AX12_writeData+0x64>
      AX12_sendPacket (servo.id, length+1, REG_WRITE, data);
     816:	8d 2d       	mov	r24, r13
     818:	44 e0       	ldi	r20, 0x04	; 4
     81a:	02 c0       	rjmp	.+4      	; 0x820 <AX12_writeData+0x68>
    } else {
      AX12_sendPacket (servo.id, length+1, WRITE_DATA, data);
     81c:	8d 2d       	mov	r24, r13
     81e:	43 e0       	ldi	r20, 0x03	; 3
     820:	98 01       	movw	r18, r16
     822:	0e 94 61 02 	call	0x4c2	; 0x4c2 <AX12_sendPacket>
    }
    int error = AX12_returnData (servo, RETURN_ALL).error;
     826:	d9 82       	std	Y+1, r13	; 0x01
     828:	6d 2d       	mov	r22, r13
     82a:	7a 81       	ldd	r23, Y+2	; 0x02
     82c:	8b 81       	ldd	r24, Y+3	; 0x03
     82e:	42 e0       	ldi	r20, 0x02	; 2
     830:	0e 94 4e 03 	call	0x69c	; 0x69c <AX12_returnData>
     834:	07 2f       	mov	r16, r23
     836:	16 2f       	mov	r17, r22
    if (start < 23) {delay_ms (5);}                   // si la operaci√≥n de escritura es en la EEPROM, este delay previene el embotellamiento
     838:	f6 e1       	ldi	r31, 0x16	; 22
     83a:	fc 15       	cp	r31, r12
     83c:	30 f0       	brcs	.+12     	; 0x84a <AX12_writeData+0x92>
     83e:	65 e0       	ldi	r22, 0x05	; 5
     840:	70 e0       	ldi	r23, 0x00	; 0
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <delay_ms>
                                                   // (las operaciones en la EEPROM no suelen ser real-time)
    return error;
}
     84a:	81 2f       	mov	r24, r17
     84c:	90 2f       	mov	r25, r16
     84e:	0f b6       	in	r0, 0x3f	; 63
     850:	f8 94       	cli
     852:	be be       	out	0x3e, r11	; 62
     854:	0f be       	out	0x3f, r0	; 63
     856:	ad be       	out	0x3d, r10	; 61
     858:	23 96       	adiw	r28, 0x03	; 3
     85a:	ea e0       	ldi	r30, 0x0A	; 10
     85c:	0c 94 8b 23 	jmp	0x4716	; 0x4716 <__epilogue_restores__+0x10>

00000860 <AX12_writeInfo>:
    return returninfo;
}

/** "intelligent" write data + reg write */
// seteando a "true" el par√°metro adicional se transforma en un reg write
int AX12_writeInfo (AX12servo servo, byte registr, int value, boolean isReg) {
     860:	a5 e0       	ldi	r26, 0x05	; 5
     862:	b0 e0       	ldi	r27, 0x00	; 0
     864:	e6 e3       	ldi	r30, 0x36	; 54
     866:	f4 e0       	ldi	r31, 0x04	; 4
     868:	0c 94 71 23 	jmp	0x46e2	; 0x46e2 <__prologue_saves__+0x14>
     86c:	69 83       	std	Y+1, r22	; 0x01
     86e:	7a 83       	std	Y+2, r23	; 0x02
     870:	8b 83       	std	Y+3, r24	; 0x03
     872:	f4 2e       	mov	r15, r20
     874:	3d 83       	std	Y+5, r19	; 0x05
     876:	2c 83       	std	Y+4, r18	; 0x04
     878:	e0 2e       	mov	r14, r16
    AX12_processValue (servo, registr, &value);
    byte values [reglength];
    values [0] = lowByte(value);
    if (reglength > 1) {values[1] = highByte(value);}
    return AX12_writeData (servo, registr, reglength, values, isReg);
}
     87a:	cd b6       	in	r12, 0x3d	; 61
     87c:	de b6       	in	r13, 0x3e	; 62
}

/** "intelligent" write data + reg write */
// seteando a "true" el par√°metro adicional se transforma en un reg write
int AX12_writeInfo (AX12servo servo, byte registr, int value, boolean isReg) {
    byte reglength = lengthWrite (registr);
     87e:	84 2f       	mov	r24, r20
     880:	0e 94 3e 03 	call	0x67c	; 0x67c <lengthWrite>
     884:	18 2f       	mov	r17, r24
    if (reglength==0) {return -2;}
     886:	88 23       	and	r24, r24
     888:	19 f4       	brne	.+6      	; 0x890 <AX12_writeInfo+0x30>
     88a:	2e ef       	ldi	r18, 0xFE	; 254
     88c:	3f ef       	ldi	r19, 0xFF	; 255
     88e:	2a c0       	rjmp	.+84     	; 0x8e4 <AX12_writeInfo+0x84>
    AX12_processValue (servo, registr, &value);
     890:	69 81       	ldd	r22, Y+1	; 0x01
     892:	7a 81       	ldd	r23, Y+2	; 0x02
     894:	8b 81       	ldd	r24, Y+3	; 0x03
     896:	4f 2d       	mov	r20, r15
     898:	9e 01       	movw	r18, r28
     89a:	2c 5f       	subi	r18, 0xFC	; 252
     89c:	3f 4f       	sbci	r19, 0xFF	; 255
     89e:	0e 94 a1 03 	call	0x742	; 0x742 <AX12_processValue>
    byte values [reglength];
     8a2:	8d b7       	in	r24, 0x3d	; 61
     8a4:	9e b7       	in	r25, 0x3e	; 62
     8a6:	81 1b       	sub	r24, r17
     8a8:	91 09       	sbc	r25, r1
     8aa:	0f b6       	in	r0, 0x3f	; 63
     8ac:	f8 94       	cli
     8ae:	9e bf       	out	0x3e, r25	; 62
     8b0:	0f be       	out	0x3f, r0	; 63
     8b2:	8d bf       	out	0x3d, r24	; 61
     8b4:	ed b7       	in	r30, 0x3d	; 61
     8b6:	fe b7       	in	r31, 0x3e	; 62
     8b8:	31 96       	adiw	r30, 0x01	; 1
    values [0] = lowByte(value);
     8ba:	8c 81       	ldd	r24, Y+4	; 0x04
     8bc:	9d 81       	ldd	r25, Y+5	; 0x05
     8be:	ad b7       	in	r26, 0x3d	; 61
     8c0:	be b7       	in	r27, 0x3e	; 62
     8c2:	11 96       	adiw	r26, 0x01	; 1
     8c4:	8c 93       	st	X, r24
    if (reglength > 1) {values[1] = highByte(value);}
     8c6:	11 30       	cpi	r17, 0x01	; 1
     8c8:	21 f0       	breq	.+8      	; 0x8d2 <AX12_writeInfo+0x72>
     8ca:	89 2f       	mov	r24, r25
     8cc:	99 0f       	add	r25, r25
     8ce:	99 0b       	sbc	r25, r25
     8d0:	81 83       	std	Z+1, r24	; 0x01
    return AX12_writeData (servo, registr, reglength, values, isReg);
     8d2:	69 81       	ldd	r22, Y+1	; 0x01
     8d4:	7a 81       	ldd	r23, Y+2	; 0x02
     8d6:	8b 81       	ldd	r24, Y+3	; 0x03
     8d8:	4f 2d       	mov	r20, r15
     8da:	21 2f       	mov	r18, r17
     8dc:	8f 01       	movw	r16, r30
     8de:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <AX12_writeData>
     8e2:	9c 01       	movw	r18, r24
}
     8e4:	c9 01       	movw	r24, r18
     8e6:	0f b6       	in	r0, 0x3f	; 63
     8e8:	f8 94       	cli
     8ea:	de be       	out	0x3e, r13	; 62
     8ec:	0f be       	out	0x3f, r0	; 63
     8ee:	cd be       	out	0x3d, r12	; 61
     8f0:	25 96       	adiw	r28, 0x05	; 5
     8f2:	e8 e0       	ldi	r30, 0x08	; 8
     8f4:	0c 94 8d 23 	jmp	0x471a	; 0x471a <__epilogue_restores__+0x14>

000008f8 <clock>:

/*! do reoccuring stuff

	call it occasionally in busy loops
*/
void clock() {
     8f8:	25 c0       	rjmp	.+74     	; 0x944 <clock+0x4c>
*/
static void clock_10ms(void) {
	// reset watchdog
	wd_reset();

	temp_tick();
     8fa:	0e 94 78 20 	call	0x40f0	; 0x40f0 <temp_sensor_tick>
     8fe:	1c c0       	rjmp	.+56     	; 0x938 <clock+0x40>
/*!	do stuff every 1/4 second

	called from clock_10ms(), do not call directly
*/
static void clock_250ms(void) {
  if (heaters_all_zero()) {
     900:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <heaters_all_zero>
     904:	88 23       	and	r24, r24
     906:	91 f0       	breq	.+36     	; 0x92c <clock+0x34>
		if (psu_timeout > (30 * 4)) {
     908:	80 91 33 06 	lds	r24, 0x0633
     90c:	89 37       	cpi	r24, 0x79	; 121
     90e:	18 f0       	brcs	.+6      	; 0x916 <clock+0x1e>
			power_off();
     910:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <power_off>
     914:	0b c0       	rjmp	.+22     	; 0x92c <clock+0x34>
		}
		else {
      ATOMIC_START
     916:	9f b7       	in	r25, 0x3f	; 63
     918:	f8 94       	cli
        psu_timeout++;
     91a:	80 91 33 06 	lds	r24, 0x0633
     91e:	8f 5f       	subi	r24, 0xFF	; 255
     920:	80 93 33 06 	sts	0x0633, r24
      ATOMIC_END
     924:	9f bf       	out	0x3f, r25	; 63
     926:	02 c0       	rjmp	.+4      	; 0x92c <clock+0x34>
		}
	}

	ifclock(clock_flag_1s) {
     928:	10 92 3e 06 	sts	0x063E, r1
     92c:	80 91 3e 06 	lds	r24, 0x063E
     930:	88 23       	and	r24, r24
     932:	d1 f7       	brne	.-12     	; 0x928 <clock+0x30>
	// reset watchdog
	wd_reset();

	temp_tick();

	ifclock(clock_flag_250ms) {
     934:	10 92 3d 06 	sts	0x063D, r1
     938:	80 91 3d 06 	lds	r24, 0x063D
     93c:	88 23       	and	r24, r24
     93e:	01 f7       	brne	.-64     	; 0x900 <clock+0x8>
/*! do reoccuring stuff

	call it occasionally in busy loops
*/
void clock() {
	ifclock(clock_flag_10ms) {
     940:	10 92 3c 06 	sts	0x063C, r1
     944:	80 91 3c 06 	lds	r24, 0x063C
     948:	88 23       	and	r24, r24
     94a:	b9 f6       	brne	.-82     	; 0x8fa <clock+0x2>
		clock_10ms();
	}
#ifdef SIMULATOR
  sim_time_warp();
#endif
}
     94c:	08 95       	ret

0000094e <dda_init>:

/*! Inititalise DDA movement structures
*/
void dda_init(void) {
	// set up default feedrate
	if (startpoint.F == 0)
     94e:	80 91 38 02 	lds	r24, 0x0238
     952:	90 91 39 02 	lds	r25, 0x0239
     956:	a0 91 3a 02 	lds	r26, 0x023A
     95a:	b0 91 3b 02 	lds	r27, 0x023B
     95e:	00 97       	sbiw	r24, 0x00	; 0
     960:	a1 05       	cpc	r26, r1
     962:	b1 05       	cpc	r27, r1
     964:	a1 f4       	brne	.+40     	; 0x98e <dda_init+0x40>
		startpoint.F = next_target.target.F = SEARCH_FEEDRATE_Z;
     966:	8a e0       	ldi	r24, 0x0A	; 10
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	a0 e0       	ldi	r26, 0x00	; 0
     96c:	b0 e0       	ldi	r27, 0x00	; 0
     96e:	80 93 18 06 	sts	0x0618, r24
     972:	90 93 19 06 	sts	0x0619, r25
     976:	a0 93 1a 06 	sts	0x061A, r26
     97a:	b0 93 1b 06 	sts	0x061B, r27
     97e:	80 93 38 02 	sts	0x0238, r24
     982:	90 93 39 02 	sts	0x0239, r25
     986:	a0 93 3a 02 	sts	0x023A, r26
     98a:	b0 93 3b 02 	sts	0x023B, r27
     98e:	08 95       	ret

00000990 <update_current_position>:
  cli(); // Compensate sei() above.
  busy = 0;
}

/// update global current_position struct
void update_current_position() {
     990:	2f 92       	push	r2
     992:	3f 92       	push	r3
     994:	5f 92       	push	r5
     996:	6f 92       	push	r6
     998:	7f 92       	push	r7
     99a:	8f 92       	push	r8
     99c:	9f 92       	push	r9
     99e:	af 92       	push	r10
     9a0:	bf 92       	push	r11
     9a2:	cf 92       	push	r12
     9a4:	df 92       	push	r13
     9a6:	0f 93       	push	r16
     9a8:	df 93       	push	r29
     9aa:	cf 93       	push	r28
     9ac:	cd b7       	in	r28, 0x3d	; 61
     9ae:	de b7       	in	r29, 0x3e	; 62
     9b0:	28 97       	sbiw	r28, 0x08	; 8
     9b2:	0f b6       	in	r0, 0x3f	; 63
     9b4:	f8 94       	cli
     9b6:	de bf       	out	0x3e, r29	; 62
     9b8:	0f be       	out	0x3f, r0	; 63
     9ba:	cd bf       	out	0x3d, r28	; 61
	DDA *dda = &movebuffer[mb_tail];
     9bc:	00 91 a9 02 	lds	r16, 0x02A9
    ((STEPS_PER_M_Y + 500) / 1000),
    ((STEPS_PER_M_Z + 500) / 1000),
    ((STEPS_PER_M_E + 500) / 1000)
  };

	if (queue_empty()) {
     9c0:	0e 94 8b 14 	call	0x2916	; 0x2916 <queue_empty>
     9c4:	88 23       	and	r24, r24
     9c6:	09 f4       	brne	.+2      	; 0x9ca <update_current_position+0x3a>
     9c8:	41 c0       	rjmp	.+130    	; 0xa4c <update_current_position+0xbc>
    for (i = X; i < AXIS_COUNT; i++) {
      current_position.axis[i] = startpoint.axis[i];
     9ca:	80 91 28 02 	lds	r24, 0x0228
     9ce:	90 91 29 02 	lds	r25, 0x0229
     9d2:	a0 91 2a 02 	lds	r26, 0x022A
     9d6:	b0 91 2b 02 	lds	r27, 0x022B
     9da:	80 93 52 02 	sts	0x0252, r24
     9de:	90 93 53 02 	sts	0x0253, r25
     9e2:	a0 93 54 02 	sts	0x0254, r26
     9e6:	b0 93 55 02 	sts	0x0255, r27
     9ea:	80 91 2c 02 	lds	r24, 0x022C
     9ee:	90 91 2d 02 	lds	r25, 0x022D
     9f2:	a0 91 2e 02 	lds	r26, 0x022E
     9f6:	b0 91 2f 02 	lds	r27, 0x022F
     9fa:	80 93 56 02 	sts	0x0256, r24
     9fe:	90 93 57 02 	sts	0x0257, r25
     a02:	a0 93 58 02 	sts	0x0258, r26
     a06:	b0 93 59 02 	sts	0x0259, r27
     a0a:	80 91 30 02 	lds	r24, 0x0230
     a0e:	90 91 31 02 	lds	r25, 0x0231
     a12:	a0 91 32 02 	lds	r26, 0x0232
     a16:	b0 91 33 02 	lds	r27, 0x0233
     a1a:	80 93 5a 02 	sts	0x025A, r24
     a1e:	90 93 5b 02 	sts	0x025B, r25
     a22:	a0 93 5c 02 	sts	0x025C, r26
     a26:	b0 93 5d 02 	sts	0x025D, r27
     a2a:	80 91 34 02 	lds	r24, 0x0234
     a2e:	90 91 35 02 	lds	r25, 0x0235
     a32:	a0 91 36 02 	lds	r26, 0x0236
     a36:	b0 91 37 02 	lds	r27, 0x0237
     a3a:	80 93 5e 02 	sts	0x025E, r24
     a3e:	90 93 5f 02 	sts	0x025F, r25
     a42:	a0 93 60 02 	sts	0x0260, r26
     a46:	b0 93 61 02 	sts	0x0261, r27
     a4a:	b3 c0       	rjmp	.+358    	; 0xbb2 <update_current_position+0x222>
  busy = 0;
}

/// update global current_position struct
void update_current_position() {
	DDA *dda = &movebuffer[mb_tail];
     a4c:	8b e6       	ldi	r24, 0x6B	; 107
     a4e:	08 9f       	mul	r16, r24
     a50:	10 01       	movw	r2, r0
     a52:	11 24       	eor	r1, r1
     a54:	8a ea       	ldi	r24, 0xAA	; 170
     a56:	92 e0       	ldi	r25, 0x02	; 2
     a58:	28 0e       	add	r2, r24
     a5a:	39 1e       	adc	r3, r25
	if (queue_empty()) {
    for (i = X; i < AXIS_COUNT; i++) {
      current_position.axis[i] = startpoint.axis[i];
    }
	}
	else if (dda->live) {
     a5c:	d1 01       	movw	r26, r2
     a5e:	55 96       	adiw	r26, 0x15	; 21
     a60:	8c 91       	ld	r24, X
     a62:	81 ff       	sbrs	r24, 1
     a64:	a6 c0       	rjmp	.+332    	; 0xbb2 <update_current_position+0x222>
     a66:	00 e0       	ldi	r16, 0x00	; 0
     a68:	66 24       	eor	r6, r6
     a6a:	77 24       	eor	r7, r7
    for (i = X; i < AXIS_COUNT; i++) {
      current_position.axis[i] = dda->endpoint.axis[i] -
     a6c:	c0 2e       	mov	r12, r16
     a6e:	dd 24       	eor	r13, r13
     a70:	f6 01       	movw	r30, r12
     a72:	ee 0f       	add	r30, r30
     a74:	ff 1f       	adc	r31, r31
     a76:	ee 0f       	add	r30, r30
     a78:	ff 1f       	adc	r31, r31
     a7a:	e2 0d       	add	r30, r2
     a7c:	f3 1d       	adc	r31, r3
     a7e:	80 80       	ld	r8, Z
     a80:	91 80       	ldd	r9, Z+1	; 0x01
     a82:	a2 80       	ldd	r10, Z+2	; 0x02
     a84:	b3 80       	ldd	r11, Z+3	; 0x03
}

/*! Find the direction of the 'n' axis
*/
static int8_t get_direction(DDA *dda, enum axis_e n) {
  if ((n == X && dda->x_direction) ||
     a86:	00 23       	and	r16, r16
     a88:	29 f4       	brne	.+10     	; 0xa94 <update_current_position+0x104>
     a8a:	f1 01       	movw	r30, r2
     a8c:	85 89       	ldd	r24, Z+21	; 0x15
     a8e:	84 fd       	sbrc	r24, 4
     a90:	17 c0       	rjmp	.+46     	; 0xac0 <update_current_position+0x130>
     a92:	19 c0       	rjmp	.+50     	; 0xac6 <update_current_position+0x136>
     a94:	01 30       	cpi	r16, 0x01	; 1
     a96:	31 f4       	brne	.+12     	; 0xaa4 <update_current_position+0x114>
     a98:	d1 01       	movw	r26, r2
     a9a:	55 96       	adiw	r26, 0x15	; 21
     a9c:	8c 91       	ld	r24, X
     a9e:	85 fd       	sbrc	r24, 5
     aa0:	0f c0       	rjmp	.+30     	; 0xac0 <update_current_position+0x130>
     aa2:	11 c0       	rjmp	.+34     	; 0xac6 <update_current_position+0x136>
     aa4:	02 30       	cpi	r16, 0x02	; 2
     aa6:	29 f4       	brne	.+10     	; 0xab2 <update_current_position+0x122>
     aa8:	f1 01       	movw	r30, r2
     aaa:	85 89       	ldd	r24, Z+21	; 0x15
     aac:	86 fd       	sbrc	r24, 6
     aae:	08 c0       	rjmp	.+16     	; 0xac0 <update_current_position+0x130>
     ab0:	0a c0       	rjmp	.+20     	; 0xac6 <update_current_position+0x136>
     ab2:	03 30       	cpi	r16, 0x03	; 3
     ab4:	41 f4       	brne	.+16     	; 0xac6 <update_current_position+0x136>
     ab6:	d1 01       	movw	r26, r2
     ab8:	55 96       	adiw	r26, 0x15	; 21
     aba:	8c 91       	ld	r24, X
     abc:	87 ff       	sbrs	r24, 7
     abe:	03 c0       	rjmp	.+6      	; 0xac6 <update_current_position+0x136>
     ac0:	55 24       	eor	r5, r5
     ac2:	53 94       	inc	r5
     ac4:	02 c0       	rjmp	.+4      	; 0xaca <update_current_position+0x13a>
     ac6:	55 24       	eor	r5, r5
     ac8:	5a 94       	dec	r5
          (int32_t)get_direction(dda, i) *
          // Should be: move_state.steps[i] * 1000000 / steps_per_m_P[i])
          // but steps[i] can be like 1000000 already, so we'd overflow.
          // Unfortunately, using muldiv() overwhelms the compiler.
          // Also keep the parens around this term, else results go wrong.
          ((move_state.steps[i] * 1000) / pgm_read_dword(&steps_per_mm_P[i]));
     aca:	20 2f       	mov	r18, r16
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	22 0f       	add	r18, r18
     ad0:	33 1f       	adc	r19, r19
     ad2:	22 0f       	add	r18, r18
     ad4:	33 1f       	adc	r19, r19
     ad6:	2e 55       	subi	r18, 0x5E	; 94
     ad8:	3e 4f       	sbci	r19, 0xFE	; 254
     ada:	f9 01       	movw	r30, r18
     adc:	85 91       	lpm	r24, Z+
     ade:	95 91       	lpm	r25, Z+
     ae0:	a5 91       	lpm	r26, Z+
     ae2:	b4 91       	lpm	r27, Z+
     ae4:	8d 83       	std	Y+5, r24	; 0x05
     ae6:	9e 83       	std	Y+6, r25	; 0x06
     ae8:	af 83       	std	Y+7, r26	; 0x07
     aea:	b8 87       	std	Y+8, r27	; 0x08
      current_position.axis[i] = startpoint.axis[i];
    }
	}
	else if (dda->live) {
    for (i = X; i < AXIS_COUNT; i++) {
      current_position.axis[i] = dda->endpoint.axis[i] -
     aec:	cc 0c       	add	r12, r12
     aee:	dd 1c       	adc	r13, r13
     af0:	cc 0c       	add	r12, r12
     af2:	dd 1c       	adc	r13, r13
     af4:	f6 01       	movw	r30, r12
     af6:	e9 58       	subi	r30, 0x89	; 137
     af8:	fd 4f       	sbci	r31, 0xFD	; 253
     afa:	60 81       	ld	r22, Z
     afc:	71 81       	ldd	r23, Z+1	; 0x01
     afe:	82 81       	ldd	r24, Z+2	; 0x02
     b00:	93 81       	ldd	r25, Z+3	; 0x03
     b02:	28 ee       	ldi	r18, 0xE8	; 232
     b04:	33 e0       	ldi	r19, 0x03	; 3
     b06:	40 e0       	ldi	r20, 0x00	; 0
     b08:	50 e0       	ldi	r21, 0x00	; 0
     b0a:	0e 94 f7 22 	call	0x45ee	; 0x45ee <__mulsi3>
     b0e:	2d 81       	ldd	r18, Y+5	; 0x05
     b10:	3e 81       	ldd	r19, Y+6	; 0x06
     b12:	4f 81       	ldd	r20, Y+7	; 0x07
     b14:	58 85       	ldd	r21, Y+8	; 0x08
     b16:	0e 94 2a 23 	call	0x4654	; 0x4654 <__udivmodsi4>
     b1a:	ca 01       	movw	r24, r20
     b1c:	b9 01       	movw	r22, r18
     b1e:	25 2d       	mov	r18, r5
     b20:	33 27       	eor	r19, r19
     b22:	27 fd       	sbrc	r18, 7
     b24:	30 95       	com	r19
     b26:	43 2f       	mov	r20, r19
     b28:	53 2f       	mov	r21, r19
     b2a:	0e 94 f7 22 	call	0x45ee	; 0x45ee <__mulsi3>
     b2e:	86 1a       	sub	r8, r22
     b30:	97 0a       	sbc	r9, r23
     b32:	a8 0a       	sbc	r10, r24
     b34:	b9 0a       	sbc	r11, r25
     b36:	82 e5       	ldi	r24, 0x52	; 82
     b38:	92 e0       	ldi	r25, 0x02	; 2
     b3a:	c8 0e       	add	r12, r24
     b3c:	d9 1e       	adc	r13, r25
     b3e:	d6 01       	movw	r26, r12
     b40:	8d 92       	st	X+, r8
     b42:	9d 92       	st	X+, r9
     b44:	ad 92       	st	X+, r10
     b46:	bc 92       	st	X, r11
     b48:	13 97       	sbiw	r26, 0x03	; 3
    for (i = X; i < AXIS_COUNT; i++) {
      current_position.axis[i] = startpoint.axis[i];
    }
	}
	else if (dda->live) {
    for (i = X; i < AXIS_COUNT; i++) {
     b4a:	0f 5f       	subi	r16, 0xFF	; 255
     b4c:	08 94       	sec
     b4e:	61 1c       	adc	r6, r1
     b50:	71 1c       	adc	r7, r1
     b52:	b4 e0       	ldi	r27, 0x04	; 4
     b54:	6b 16       	cp	r6, r27
     b56:	71 04       	cpc	r7, r1
     b58:	09 f0       	breq	.+2      	; 0xb5c <update_current_position+0x1cc>
     b5a:	88 cf       	rjmp	.-240    	; 0xa6c <update_current_position+0xdc>
          // Unfortunately, using muldiv() overwhelms the compiler.
          // Also keep the parens around this term, else results go wrong.
          ((move_state.steps[i] * 1000) / pgm_read_dword(&steps_per_mm_P[i]));
    }

    if (dda->endpoint.e_relative)
     b5c:	f1 01       	movw	r30, r2
     b5e:	84 89       	ldd	r24, Z+20	; 0x14
     b60:	80 ff       	sbrs	r24, 0
     b62:	27 c0       	rjmp	.+78     	; 0xbb2 <update_current_position+0x222>
      current_position.axis[E] =
          (move_state.steps[E] * 1000) / pgm_read_dword(&steps_per_mm_P[E]);
     b64:	2e ea       	ldi	r18, 0xAE	; 174
     b66:	31 e0       	ldi	r19, 0x01	; 1
     b68:	f9 01       	movw	r30, r18
     b6a:	85 91       	lpm	r24, Z+
     b6c:	95 91       	lpm	r25, Z+
     b6e:	a5 91       	lpm	r26, Z+
     b70:	b4 91       	lpm	r27, Z+
     b72:	89 83       	std	Y+1, r24	; 0x01
     b74:	9a 83       	std	Y+2, r25	; 0x02
     b76:	ab 83       	std	Y+3, r26	; 0x03
     b78:	bc 83       	std	Y+4, r27	; 0x04
          // Also keep the parens around this term, else results go wrong.
          ((move_state.steps[i] * 1000) / pgm_read_dword(&steps_per_mm_P[i]));
    }

    if (dda->endpoint.e_relative)
      current_position.axis[E] =
     b7a:	60 91 83 02 	lds	r22, 0x0283
     b7e:	70 91 84 02 	lds	r23, 0x0284
     b82:	80 91 85 02 	lds	r24, 0x0285
     b86:	90 91 86 02 	lds	r25, 0x0286
     b8a:	28 ee       	ldi	r18, 0xE8	; 232
     b8c:	33 e0       	ldi	r19, 0x03	; 3
     b8e:	40 e0       	ldi	r20, 0x00	; 0
     b90:	50 e0       	ldi	r21, 0x00	; 0
     b92:	0e 94 f7 22 	call	0x45ee	; 0x45ee <__mulsi3>
     b96:	29 81       	ldd	r18, Y+1	; 0x01
     b98:	3a 81       	ldd	r19, Y+2	; 0x02
     b9a:	4b 81       	ldd	r20, Y+3	; 0x03
     b9c:	5c 81       	ldd	r21, Y+4	; 0x04
     b9e:	0e 94 2a 23 	call	0x4654	; 0x4654 <__udivmodsi4>
     ba2:	20 93 5e 02 	sts	0x025E, r18
     ba6:	30 93 5f 02 	sts	0x025F, r19
     baa:	40 93 60 02 	sts	0x0260, r20
     bae:	50 93 61 02 	sts	0x0261, r21
          (move_state.steps[E] * 1000) / pgm_read_dword(&steps_per_mm_P[E]);

		// current_position.F is updated in dda_start()
	}
}
     bb2:	28 96       	adiw	r28, 0x08	; 8
     bb4:	0f b6       	in	r0, 0x3f	; 63
     bb6:	f8 94       	cli
     bb8:	de bf       	out	0x3e, r29	; 62
     bba:	0f be       	out	0x3f, r0	; 63
     bbc:	cd bf       	out	0x3d, r28	; 61
     bbe:	cf 91       	pop	r28
     bc0:	df 91       	pop	r29
     bc2:	0f 91       	pop	r16
     bc4:	df 90       	pop	r13
     bc6:	cf 90       	pop	r12
     bc8:	bf 90       	pop	r11
     bca:	af 90       	pop	r10
     bcc:	9f 90       	pop	r9
     bce:	8f 90       	pop	r8
     bd0:	7f 90       	pop	r7
     bd2:	6f 90       	pop	r6
     bd4:	5f 90       	pop	r5
     bd6:	3f 90       	pop	r3
     bd8:	2f 90       	pop	r2
     bda:	08 95       	ret

00000bdc <dda_clock>:

  In the future, arc movement calculations might go here, too. Updating
  movement direction 500 times a second is easily enough for smooth and
  accurate curves!
*/
void dda_clock() {
     bdc:	ef 92       	push	r14
     bde:	ff 92       	push	r15
     be0:	0f 93       	push	r16
     be2:	1f 93       	push	r17
     be4:	cf 93       	push	r28
     be6:	df 93       	push	r29
  #ifdef ACCELERATION_RAMPING
  uint32_t move_step_no, move_c;
  uint8_t recalc_speed;
  #endif

  dda = queue_current_movement();
     be8:	0e 94 a7 14 	call	0x294e	; 0x294e <queue_current_movement>
     bec:	ec 01       	movw	r28, r24
  if (dda != last_dda) {
     bee:	80 91 92 02 	lds	r24, 0x0292
     bf2:	90 91 93 02 	lds	r25, 0x0293
     bf6:	c8 17       	cp	r28, r24
     bf8:	d9 07       	cpc	r29, r25
     bfa:	81 f0       	breq	.+32     	; 0xc1c <dda_clock+0x40>
    move_state.debounce_count_xmin = move_state.debounce_count_ymin =
     bfc:	10 92 91 02 	sts	0x0291, r1
     c00:	10 92 90 02 	sts	0x0290, r1
     c04:	10 92 8f 02 	sts	0x028F, r1
     c08:	10 92 8e 02 	sts	0x028E, r1
     c0c:	10 92 8d 02 	sts	0x028D, r1
     c10:	10 92 8c 02 	sts	0x028C, r1
    move_state.debounce_count_zmin = move_state.debounce_count_xmax =
    move_state.debounce_count_ymax = move_state.debounce_count_zmax = 0;
    last_dda = dda;
     c14:	d0 93 93 02 	sts	0x0293, r29
     c18:	c0 93 92 02 	sts	0x0292, r28
  }

  if (dda == NULL)
     c1c:	20 97       	sbiw	r28, 0x00	; 0
     c1e:	09 f4       	brne	.+2      	; 0xc22 <dda_clock+0x46>
     c20:	15 c1       	rjmp	.+554    	; 0xe4c <dda_clock+0x270>
    return;

  // Lengthy calculations ahead!
  // Make sure we didn't re-enter, then allow nested interrupts.
  if (busy)
     c22:	80 91 94 02 	lds	r24, 0x0294
     c26:	88 23       	and	r24, r24
     c28:	09 f0       	breq	.+2      	; 0xc2c <dda_clock+0x50>
     c2a:	10 c1       	rjmp	.+544    	; 0xe4c <dda_clock+0x270>
    return;
  busy = 1;
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	80 93 94 02 	sts	0x0294, r24
  sei();
     c32:	78 94       	sei

  // Caution: we mangle step counters here without locking interrupts. This
  //          means, we trust dda isn't changed behind our back, which could
  //          in principle (but rarely) happen if endstops are checked not as
  //          endstop search, but as part of normal operations.
  if (dda->endstop_check && ! move_state.endstop_stop) {
     c34:	c7 59       	subi	r28, 0x97	; 151
     c36:	df 4f       	sbci	r29, 0xFF	; 255
     c38:	98 81       	ld	r25, Y
     c3a:	c9 56       	subi	r28, 0x69	; 105
     c3c:	d0 40       	sbci	r29, 0x00	; 0
     c3e:	99 23       	and	r25, r25
     c40:	09 f4       	brne	.+2      	; 0xc44 <dda_clock+0x68>
     c42:	6b c0       	rjmp	.+214    	; 0xd1a <dda_clock+0x13e>
     c44:	80 91 8b 02 	lds	r24, 0x028B
     c48:	88 23       	and	r24, r24
     c4a:	09 f0       	breq	.+2      	; 0xc4e <dda_clock+0x72>
     c4c:	66 c0       	rjmp	.+204    	; 0xd1a <dda_clock+0x13e>
                        move_state.debounce_count_ymax >= ENDSTOP_STEPS;
    }
    #endif

    #if defined Z_MIN_PIN || defined Z_MAX_PIN
    if (dda->endstop_check & 0x4) {
     c4e:	92 ff       	sbrs	r25, 2
     c50:	64 c0       	rjmp	.+200    	; 0xd1a <dda_clock+0x13e>
      #if defined Z_MIN_PIN
      if (z_min() == dda->endstop_stop_cond)
     c52:	8c b1       	in	r24, 0x0c	; 12
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	35 e0       	ldi	r19, 0x05	; 5
     c58:	96 95       	lsr	r25
     c5a:	87 95       	ror	r24
     c5c:	3a 95       	dec	r19
     c5e:	e1 f7       	brne	.-8      	; 0xc58 <dda_clock+0x7c>
     c60:	80 95       	com	r24
     c62:	90 95       	com	r25
     c64:	81 70       	andi	r24, 0x01	; 1
     c66:	90 70       	andi	r25, 0x00	; 0
     c68:	c6 59       	subi	r28, 0x96	; 150
     c6a:	df 4f       	sbci	r29, 0xFF	; 255
     c6c:	28 81       	ld	r18, Y
     c6e:	ca 56       	subi	r28, 0x6A	; 106
     c70:	d0 40       	sbci	r29, 0x00	; 0
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	82 17       	cp	r24, r18
     c76:	93 07       	cpc	r25, r19
     c78:	31 f4       	brne	.+12     	; 0xc86 <dda_clock+0xaa>
        move_state.debounce_count_zmin++;
     c7a:	80 91 8e 02 	lds	r24, 0x028E
     c7e:	8f 5f       	subi	r24, 0xFF	; 255
     c80:	80 93 8e 02 	sts	0x028E, r24
     c84:	02 c0       	rjmp	.+4      	; 0xc8a <dda_clock+0xae>
      else
        move_state.debounce_count_zmin = 0;
     c86:	10 92 8e 02 	sts	0x028E, r1
      if (z_max() == dda->endstop_stop_cond)
        move_state.debounce_count_zmax++;
      else
        move_state.debounce_count_zmax = 0;
      #endif
      endstop_trigger = move_state.debounce_count_zmin >= ENDSTOP_STEPS ||
     c8a:	80 91 8e 02 	lds	r24, 0x028E
     c8e:	84 30       	cpi	r24, 0x04	; 4
     c90:	28 f4       	brcc	.+10     	; 0xc9c <dda_clock+0xc0>
     c92:	80 91 91 02 	lds	r24, 0x0291
     c96:	84 30       	cpi	r24, 0x04	; 4
     c98:	08 f4       	brcc	.+2      	; 0xc9c <dda_clock+0xc0>
     c9a:	3f c0       	rjmp	.+126    	; 0xd1a <dda_clock+0x13e>
    // If an endstop is definitely triggered, stop the movement.
    if (endstop_trigger) {
      #ifdef ACCELERATION_RAMPING
        // For always smooth operations, don't halt apruptly,
        // but start deceleration here.
        ATOMIC_START
     c9c:	6f b7       	in	r22, 0x3f	; 63
     c9e:	f8 94       	cli
          move_state.endstop_stop = 1;
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	80 93 8b 02 	sts	0x028B, r24
          if (move_state.step_no < dda->rampup_steps)  // still accelerating
     ca6:	e0 90 87 02 	lds	r14, 0x0287
     caa:	f0 90 88 02 	lds	r15, 0x0288
     cae:	00 91 89 02 	lds	r16, 0x0289
     cb2:	10 91 8a 02 	lds	r17, 0x028A
     cb6:	8b ad       	ldd	r24, Y+59	; 0x3b
     cb8:	9c ad       	ldd	r25, Y+60	; 0x3c
     cba:	ad ad       	ldd	r26, Y+61	; 0x3d
     cbc:	be ad       	ldd	r27, Y+62	; 0x3e
     cbe:	e8 16       	cp	r14, r24
     cc0:	f9 06       	cpc	r15, r25
     cc2:	0a 07       	cpc	r16, r26
     cc4:	1b 07       	cpc	r17, r27
     cc6:	38 f4       	brcc	.+14     	; 0xcd6 <dda_clock+0xfa>
            dda->total_steps = move_state.step_no * 2;
     cc8:	d8 01       	movw	r26, r16
     cca:	c7 01       	movw	r24, r14
     ccc:	88 0f       	add	r24, r24
     cce:	99 1f       	adc	r25, r25
     cd0:	aa 1f       	adc	r26, r26
     cd2:	bb 1f       	adc	r27, r27
     cd4:	12 c0       	rjmp	.+36     	; 0xcfa <dda_clock+0x11e>
          else
            // A "-=" would overflow earlier.
            dda->total_steps = dda->total_steps - dda->rampdown_steps +
     cd6:	8f a1       	ldd	r24, Y+39	; 0x27
     cd8:	98 a5       	ldd	r25, Y+40	; 0x28
     cda:	a9 a5       	ldd	r26, Y+41	; 0x29
     cdc:	ba a5       	ldd	r27, Y+42	; 0x2a
     cde:	8e 0d       	add	r24, r14
     ce0:	9f 1d       	adc	r25, r15
     ce2:	a0 1f       	adc	r26, r16
     ce4:	b1 1f       	adc	r27, r17
     ce6:	ef 96       	adiw	r28, 0x3f	; 63
     ce8:	28 81       	ld	r18, Y
     cea:	39 81       	ldd	r19, Y+1	; 0x01
     cec:	4a 81       	ldd	r20, Y+2	; 0x02
     cee:	5b 81       	ldd	r21, Y+3	; 0x03
     cf0:	ef 97       	sbiw	r28, 0x3f	; 63
     cf2:	82 1b       	sub	r24, r18
     cf4:	93 0b       	sbc	r25, r19
     cf6:	a4 0b       	sbc	r26, r20
     cf8:	b5 0b       	sbc	r27, r21
     cfa:	8f a3       	std	Y+39, r24	; 0x27
     cfc:	98 a7       	std	Y+40, r25	; 0x28
     cfe:	a9 a7       	std	Y+41, r26	; 0x29
     d00:	ba a7       	std	Y+42, r27	; 0x2a
                               move_state.step_no;
          dda->rampdown_steps = move_state.step_no;
     d02:	ef 96       	adiw	r28, 0x3f	; 63
     d04:	e8 82       	st	Y, r14
     d06:	f9 82       	std	Y+1, r15	; 0x01
     d08:	0a 83       	std	Y+2, r16	; 0x02
     d0a:	1b 83       	std	Y+3, r17	; 0x03
     d0c:	ef 97       	sbiw	r28, 0x3f	; 63
        ATOMIC_END
     d0e:	6f bf       	out	0x3f, r22	; 63
        // Not atomic, because not used in dda_step().
        dda->rampup_steps = 0; // in case we're still accelerating
     d10:	1b ae       	std	Y+59, r1	; 0x3b
     d12:	1c ae       	std	Y+60, r1	; 0x3c
     d14:	1d ae       	std	Y+61, r1	; 0x3d
     d16:	1e ae       	std	Y+62, r1	; 0x3e
		#endif
		#ifdef Y_MAX_PIN
			WRITE(Y_MAX_PIN, 0);
		#endif
		#ifdef Z_MIN_PIN
			WRITE(Z_MIN_PIN, 0);
     d18:	75 98       	cbi	0x0e, 5	; 14

  #ifdef ACCELERATION_RAMPING
    // For maths about stepper speed profiles, see
    // http://www.embedded.com/design/mcus-processors-and-socs/4006438/Generate-stepper-motor-speed-profiles-in-real-time
    // and http://www.atmel.com/images/doc8017.pdf (Atmel app note AVR446)
    ATOMIC_START
     d1a:	8f b7       	in	r24, 0x3f	; 63
     d1c:	f8 94       	cli
      move_step_no = move_state.step_no;
     d1e:	e0 90 87 02 	lds	r14, 0x0287
     d22:	f0 90 88 02 	lds	r15, 0x0288
     d26:	00 91 89 02 	lds	r16, 0x0289
     d2a:	10 91 8a 02 	lds	r17, 0x028A
      // All other variables are read-only or unused in dda_step(),
      // so no need for atomic operations.
    ATOMIC_END
     d2e:	8f bf       	out	0x3f, r24	; 63

    recalc_speed = 0;
    if (move_step_no < dda->rampup_steps) {
     d30:	8b ad       	ldd	r24, Y+59	; 0x3b
     d32:	9c ad       	ldd	r25, Y+60	; 0x3c
     d34:	ad ad       	ldd	r26, Y+61	; 0x3d
     d36:	be ad       	ldd	r27, Y+62	; 0x3e
     d38:	e8 16       	cp	r14, r24
     d3a:	f9 06       	cpc	r15, r25
     d3c:	0a 07       	cpc	r16, r26
     d3e:	1b 07       	cpc	r17, r27
     d40:	68 f4       	brcc	.+26     	; 0xd5c <dda_clock+0x180>
      #ifdef LOOKAHEAD
        dda->n = dda->start_steps + move_step_no;
     d42:	c1 5b       	subi	r28, 0xB1	; 177
     d44:	df 4f       	sbci	r29, 0xFF	; 255
     d46:	88 81       	ld	r24, Y
     d48:	99 81       	ldd	r25, Y+1	; 0x01
     d4a:	aa 81       	ldd	r26, Y+2	; 0x02
     d4c:	bb 81       	ldd	r27, Y+3	; 0x03
     d4e:	cf 54       	subi	r28, 0x4F	; 79
     d50:	d0 40       	sbci	r29, 0x00	; 0
     d52:	8e 0d       	add	r24, r14
     d54:	9f 1d       	adc	r25, r15
     d56:	a0 1f       	adc	r26, r16
     d58:	b1 1f       	adc	r27, r17
     d5a:	20 c0       	rjmp	.+64     	; 0xd9c <dda_clock+0x1c0>
      #else
        dda->n = move_step_no;
      #endif
      recalc_speed = 1;
    }
    else if (move_step_no >= dda->rampdown_steps) {
     d5c:	ef 96       	adiw	r28, 0x3f	; 63
     d5e:	88 81       	ld	r24, Y
     d60:	99 81       	ldd	r25, Y+1	; 0x01
     d62:	aa 81       	ldd	r26, Y+2	; 0x02
     d64:	bb 81       	ldd	r27, Y+3	; 0x03
     d66:	ef 97       	sbiw	r28, 0x3f	; 63
     d68:	e8 16       	cp	r14, r24
     d6a:	f9 06       	cpc	r15, r25
     d6c:	0a 07       	cpc	r16, r26
     d6e:	1b 07       	cpc	r17, r27
     d70:	08 f4       	brcc	.+2      	; 0xd74 <dda_clock+0x198>
     d72:	69 c0       	rjmp	.+210    	; 0xe46 <dda_clock+0x26a>
      #ifdef LOOKAHEAD
        dda->n = dda->total_steps - move_step_no + dda->end_steps;
     d74:	cd 5a       	subi	r28, 0xAD	; 173
     d76:	df 4f       	sbci	r29, 0xFF	; 255
     d78:	88 81       	ld	r24, Y
     d7a:	99 81       	ldd	r25, Y+1	; 0x01
     d7c:	aa 81       	ldd	r26, Y+2	; 0x02
     d7e:	bb 81       	ldd	r27, Y+3	; 0x03
     d80:	c3 55       	subi	r28, 0x53	; 83
     d82:	d0 40       	sbci	r29, 0x00	; 0
     d84:	2f a1       	ldd	r18, Y+39	; 0x27
     d86:	38 a5       	ldd	r19, Y+40	; 0x28
     d88:	49 a5       	ldd	r20, Y+41	; 0x29
     d8a:	5a a5       	ldd	r21, Y+42	; 0x2a
     d8c:	82 0f       	add	r24, r18
     d8e:	93 1f       	adc	r25, r19
     d90:	a4 1f       	adc	r26, r20
     d92:	b5 1f       	adc	r27, r21
     d94:	8e 19       	sub	r24, r14
     d96:	9f 09       	sbc	r25, r15
     d98:	a0 0b       	sbc	r26, r16
     d9a:	b1 0b       	sbc	r27, r17
     d9c:	8f ab       	std	Y+55, r24	; 0x37
     d9e:	98 af       	std	Y+56, r25	; 0x38
     da0:	a9 af       	std	Y+57, r26	; 0x39
     da2:	ba af       	std	Y+58, r27	; 0x3a
        dda->n = dda->total_steps - move_step_no;
      #endif
      recalc_speed = 1;
    }
    if (recalc_speed) {
      if (dda->n == 0)
     da4:	2f a9       	ldd	r18, Y+55	; 0x37
     da6:	38 ad       	ldd	r19, Y+56	; 0x38
     da8:	49 ad       	ldd	r20, Y+57	; 0x39
     daa:	5a ad       	ldd	r21, Y+58	; 0x3a
     dac:	fe 01       	movw	r30, r28
     dae:	e8 59       	subi	r30, 0x98	; 152
     db0:	ff 4f       	sbci	r31, 0xFF	; 255
     db2:	21 15       	cp	r18, r1
     db4:	31 05       	cpc	r19, r1
     db6:	41 05       	cpc	r20, r1
     db8:	51 05       	cpc	r21, r1
     dba:	71 f4       	brne	.+28     	; 0xdd8 <dda_clock+0x1fc>
        move_c = pgm_read_dword(&c0_P[dda->fast_axis]);
     dbc:	80 81       	ld	r24, Z
     dbe:	e8 2f       	mov	r30, r24
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	ee 0f       	add	r30, r30
     dc4:	ff 1f       	adc	r31, r31
     dc6:	ee 0f       	add	r30, r30
     dc8:	ff 1f       	adc	r31, r31
     dca:	ee 54       	subi	r30, 0x4E	; 78
     dcc:	fe 4f       	sbci	r31, 0xFE	; 254
     dce:	65 91       	lpm	r22, Z+
     dd0:	75 91       	lpm	r23, Z+
     dd2:	85 91       	lpm	r24, Z+
     dd4:	94 91       	lpm	r25, Z+
     dd6:	1f c0       	rjmp	.+62     	; 0xe16 <dda_clock+0x23a>
      else
        // Explicit formula: c0 * (sqrt(n + 1) - sqrt(n)),
        // approximation here: c0 * (1 / (2 * sqrt(n))).
        // This >> 13 looks odd, but is verified with the explicit formula.
        move_c = (pgm_read_dword(&c0_P[dda->fast_axis]) *
     dd8:	80 81       	ld	r24, Z
     dda:	e8 2f       	mov	r30, r24
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	ee 0f       	add	r30, r30
     de0:	ff 1f       	adc	r31, r31
     de2:	ee 0f       	add	r30, r30
     de4:	ff 1f       	adc	r31, r31
     de6:	ee 54       	subi	r30, 0x4E	; 78
     de8:	fe 4f       	sbci	r31, 0xFE	; 254
     dea:	e5 90       	lpm	r14, Z+
     dec:	f5 90       	lpm	r15, Z+
     dee:	05 91       	lpm	r16, Z+
     df0:	14 91       	lpm	r17, Z+
     df2:	c9 01       	movw	r24, r18
     df4:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <int_inv_sqrt>
     df8:	a0 e0       	ldi	r26, 0x00	; 0
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	bc 01       	movw	r22, r24
     dfe:	cd 01       	movw	r24, r26
     e00:	a8 01       	movw	r20, r16
     e02:	97 01       	movw	r18, r14
     e04:	0e 94 f7 22 	call	0x45ee	; 0x45ee <__mulsi3>
     e08:	ed e0       	ldi	r30, 0x0D	; 13
     e0a:	96 95       	lsr	r25
     e0c:	87 95       	ror	r24
     e0e:	77 95       	ror	r23
     e10:	67 95       	ror	r22
     e12:	ea 95       	dec	r30
     e14:	d1 f7       	brne	.-12     	; 0xe0a <dda_clock+0x22e>
     e16:	cd 5b       	subi	r28, 0xBD	; 189
     e18:	df 4f       	sbci	r29, 0xFF	; 255
     e1a:	e8 80       	ld	r14, Y
     e1c:	f9 80       	ldd	r15, Y+1	; 0x01
     e1e:	0a 81       	ldd	r16, Y+2	; 0x02
     e20:	1b 81       	ldd	r17, Y+3	; 0x03
     e22:	c3 54       	subi	r28, 0x43	; 67
     e24:	d0 40       	sbci	r29, 0x00	; 0
     e26:	9b 01       	movw	r18, r22
     e28:	ac 01       	movw	r20, r24
     e2a:	6e 15       	cp	r22, r14
     e2c:	7f 05       	cpc	r23, r15
     e2e:	80 07       	cpc	r24, r16
     e30:	91 07       	cpc	r25, r17
     e32:	10 f4       	brcc	.+4      	; 0xe38 <dda_clock+0x25c>
     e34:	a8 01       	movw	r20, r16
     e36:	97 01       	movw	r18, r14
          dda->rampdown_steps = dda->total_steps - dda->rampup_steps;
        #endif
      }

      // Write results.
      ATOMIC_START
     e38:	8f b7       	in	r24, 0x3f	; 63
     e3a:	f8 94       	cli
        dda->c = move_c;
     e3c:	2b ab       	std	Y+51, r18	; 0x33
     e3e:	3c ab       	std	Y+52, r19	; 0x34
     e40:	4d ab       	std	Y+53, r20	; 0x35
     e42:	5e ab       	std	Y+54, r21	; 0x36
      ATOMIC_END
     e44:	8f bf       	out	0x3f, r24	; 63
    }
  #endif

  cli(); // Compensate sei() above.
     e46:	f8 94       	cli
  busy = 0;
     e48:	10 92 94 02 	sts	0x0294, r1
}
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
     e50:	e6 e0       	ldi	r30, 0x06	; 6
     e52:	0c 94 8f 23 	jmp	0x471e	; 0x471e <__epilogue_restores__+0x18>

00000e56 <dda_step>:
        However, this resulted in at least 16% performance loss, no matter
        how it was done. On how to measure, see commit "testcases: Add
        config.h". On the various tries and measurement results, see commits
        starting with "DDA: Move axis calculations into loops, part 6".
*/
void dda_step(DDA *dda) {
     e56:	ef 92       	push	r14
     e58:	ff 92       	push	r15
     e5a:	0f 93       	push	r16
     e5c:	1f 93       	push	r17
     e5e:	fc 01       	movw	r30, r24

#if ! defined ACCELERATION_TEMPORAL
  if (move_state.steps[X]) {
     e60:	e0 90 77 02 	lds	r14, 0x0277
     e64:	f0 90 78 02 	lds	r15, 0x0278
     e68:	00 91 79 02 	lds	r16, 0x0279
     e6c:	10 91 7a 02 	lds	r17, 0x027A
     e70:	e1 14       	cp	r14, r1
     e72:	f1 04       	cpc	r15, r1
     e74:	01 05       	cpc	r16, r1
     e76:	11 05       	cpc	r17, r1
     e78:	c1 f1       	breq	.+112    	; 0xeea <dda_step+0x94>
    move_state.counter[X] -= dda->delta[X];
     e7a:	20 91 67 02 	lds	r18, 0x0267
     e7e:	30 91 68 02 	lds	r19, 0x0268
     e82:	40 91 69 02 	lds	r20, 0x0269
     e86:	50 91 6a 02 	lds	r21, 0x026A
     e8a:	87 89       	ldd	r24, Z+23	; 0x17
     e8c:	90 8d       	ldd	r25, Z+24	; 0x18
     e8e:	a1 8d       	ldd	r26, Z+25	; 0x19
     e90:	b2 8d       	ldd	r27, Z+26	; 0x1a
     e92:	28 1b       	sub	r18, r24
     e94:	39 0b       	sbc	r19, r25
     e96:	4a 0b       	sbc	r20, r26
     e98:	5b 0b       	sbc	r21, r27
     e9a:	20 93 67 02 	sts	0x0267, r18
     e9e:	30 93 68 02 	sts	0x0268, r19
     ea2:	40 93 69 02 	sts	0x0269, r20
     ea6:	50 93 6a 02 	sts	0x026A, r21
    if (move_state.counter[X] < 0) {
     eaa:	57 ff       	sbrs	r21, 7
     eac:	1e c0       	rjmp	.+60     	; 0xeea <dda_step+0x94>
			x_step();
     eae:	88 9a       	sbi	0x11, 0	; 17
      move_state.steps[X]--;
     eb0:	08 94       	sec
     eb2:	e1 08       	sbc	r14, r1
     eb4:	f1 08       	sbc	r15, r1
     eb6:	01 09       	sbc	r16, r1
     eb8:	11 09       	sbc	r17, r1
     eba:	e0 92 77 02 	sts	0x0277, r14
     ebe:	f0 92 78 02 	sts	0x0278, r15
     ec2:	00 93 79 02 	sts	0x0279, r16
     ec6:	10 93 7a 02 	sts	0x027A, r17
      move_state.counter[X] += dda->total_steps;
     eca:	87 a1       	ldd	r24, Z+39	; 0x27
     ecc:	90 a5       	ldd	r25, Z+40	; 0x28
     ece:	a1 a5       	ldd	r26, Z+41	; 0x29
     ed0:	b2 a5       	ldd	r27, Z+42	; 0x2a
     ed2:	28 0f       	add	r18, r24
     ed4:	39 1f       	adc	r19, r25
     ed6:	4a 1f       	adc	r20, r26
     ed8:	5b 1f       	adc	r21, r27
     eda:	20 93 67 02 	sts	0x0267, r18
     ede:	30 93 68 02 	sts	0x0268, r19
     ee2:	40 93 69 02 	sts	0x0269, r20
     ee6:	50 93 6a 02 	sts	0x026A, r21
    move_state.all_time = move_state.time[X];
	}
#endif

#if ! defined ACCELERATION_TEMPORAL
  if (move_state.steps[Y]) {
     eea:	e0 90 7b 02 	lds	r14, 0x027B
     eee:	f0 90 7c 02 	lds	r15, 0x027C
     ef2:	00 91 7d 02 	lds	r16, 0x027D
     ef6:	10 91 7e 02 	lds	r17, 0x027E
     efa:	e1 14       	cp	r14, r1
     efc:	f1 04       	cpc	r15, r1
     efe:	01 05       	cpc	r16, r1
     f00:	11 05       	cpc	r17, r1
     f02:	c1 f1       	breq	.+112    	; 0xf74 <dda_step+0x11e>
    move_state.counter[Y] -= dda->delta[Y];
     f04:	20 91 6b 02 	lds	r18, 0x026B
     f08:	30 91 6c 02 	lds	r19, 0x026C
     f0c:	40 91 6d 02 	lds	r20, 0x026D
     f10:	50 91 6e 02 	lds	r21, 0x026E
     f14:	83 8d       	ldd	r24, Z+27	; 0x1b
     f16:	94 8d       	ldd	r25, Z+28	; 0x1c
     f18:	a5 8d       	ldd	r26, Z+29	; 0x1d
     f1a:	b6 8d       	ldd	r27, Z+30	; 0x1e
     f1c:	28 1b       	sub	r18, r24
     f1e:	39 0b       	sbc	r19, r25
     f20:	4a 0b       	sbc	r20, r26
     f22:	5b 0b       	sbc	r21, r27
     f24:	20 93 6b 02 	sts	0x026B, r18
     f28:	30 93 6c 02 	sts	0x026C, r19
     f2c:	40 93 6d 02 	sts	0x026D, r20
     f30:	50 93 6e 02 	sts	0x026E, r21
    if (move_state.counter[Y] < 0) {
     f34:	57 ff       	sbrs	r21, 7
     f36:	1e c0       	rjmp	.+60     	; 0xf74 <dda_step+0x11e>
			y_step();
     f38:	8e 9a       	sbi	0x11, 6	; 17
      move_state.steps[Y]--;
     f3a:	08 94       	sec
     f3c:	e1 08       	sbc	r14, r1
     f3e:	f1 08       	sbc	r15, r1
     f40:	01 09       	sbc	r16, r1
     f42:	11 09       	sbc	r17, r1
     f44:	e0 92 7b 02 	sts	0x027B, r14
     f48:	f0 92 7c 02 	sts	0x027C, r15
     f4c:	00 93 7d 02 	sts	0x027D, r16
     f50:	10 93 7e 02 	sts	0x027E, r17
      move_state.counter[Y] += dda->total_steps;
     f54:	87 a1       	ldd	r24, Z+39	; 0x27
     f56:	90 a5       	ldd	r25, Z+40	; 0x28
     f58:	a1 a5       	ldd	r26, Z+41	; 0x29
     f5a:	b2 a5       	ldd	r27, Z+42	; 0x2a
     f5c:	28 0f       	add	r18, r24
     f5e:	39 1f       	adc	r19, r25
     f60:	4a 1f       	adc	r20, r26
     f62:	5b 1f       	adc	r21, r27
     f64:	20 93 6b 02 	sts	0x026B, r18
     f68:	30 93 6c 02 	sts	0x026C, r19
     f6c:	40 93 6d 02 	sts	0x026D, r20
     f70:	50 93 6e 02 	sts	0x026E, r21
    move_state.all_time = move_state.time[Y];
	}
#endif

#if ! defined ACCELERATION_TEMPORAL
  if (move_state.steps[Z]) {
     f74:	e0 90 7f 02 	lds	r14, 0x027F
     f78:	f0 90 80 02 	lds	r15, 0x0280
     f7c:	00 91 81 02 	lds	r16, 0x0281
     f80:	10 91 82 02 	lds	r17, 0x0282
     f84:	e1 14       	cp	r14, r1
     f86:	f1 04       	cpc	r15, r1
     f88:	01 05       	cpc	r16, r1
     f8a:	11 05       	cpc	r17, r1
     f8c:	c1 f1       	breq	.+112    	; 0xffe <dda_step+0x1a8>
    move_state.counter[Z] -= dda->delta[Z];
     f8e:	20 91 6f 02 	lds	r18, 0x026F
     f92:	30 91 70 02 	lds	r19, 0x0270
     f96:	40 91 71 02 	lds	r20, 0x0271
     f9a:	50 91 72 02 	lds	r21, 0x0272
     f9e:	87 8d       	ldd	r24, Z+31	; 0x1f
     fa0:	90 a1       	ldd	r25, Z+32	; 0x20
     fa2:	a1 a1       	ldd	r26, Z+33	; 0x21
     fa4:	b2 a1       	ldd	r27, Z+34	; 0x22
     fa6:	28 1b       	sub	r18, r24
     fa8:	39 0b       	sbc	r19, r25
     faa:	4a 0b       	sbc	r20, r26
     fac:	5b 0b       	sbc	r21, r27
     fae:	20 93 6f 02 	sts	0x026F, r18
     fb2:	30 93 70 02 	sts	0x0270, r19
     fb6:	40 93 71 02 	sts	0x0271, r20
     fba:	50 93 72 02 	sts	0x0272, r21
    if (move_state.counter[Z] < 0) {
     fbe:	57 ff       	sbrs	r21, 7
     fc0:	1e c0       	rjmp	.+60     	; 0xffe <dda_step+0x1a8>
			z_step();
     fc2:	41 9a       	sbi	0x08, 1	; 8
      move_state.steps[Z]--;
     fc4:	08 94       	sec
     fc6:	e1 08       	sbc	r14, r1
     fc8:	f1 08       	sbc	r15, r1
     fca:	01 09       	sbc	r16, r1
     fcc:	11 09       	sbc	r17, r1
     fce:	e0 92 7f 02 	sts	0x027F, r14
     fd2:	f0 92 80 02 	sts	0x0280, r15
     fd6:	00 93 81 02 	sts	0x0281, r16
     fda:	10 93 82 02 	sts	0x0282, r17
      move_state.counter[Z] += dda->total_steps;
     fde:	87 a1       	ldd	r24, Z+39	; 0x27
     fe0:	90 a5       	ldd	r25, Z+40	; 0x28
     fe2:	a1 a5       	ldd	r26, Z+41	; 0x29
     fe4:	b2 a5       	ldd	r27, Z+42	; 0x2a
     fe6:	28 0f       	add	r18, r24
     fe8:	39 1f       	adc	r19, r25
     fea:	4a 1f       	adc	r20, r26
     fec:	5b 1f       	adc	r21, r27
     fee:	20 93 6f 02 	sts	0x026F, r18
     ff2:	30 93 70 02 	sts	0x0270, r19
     ff6:	40 93 71 02 	sts	0x0271, r20
     ffa:	50 93 72 02 	sts	0x0272, r21
    move_state.all_time = move_state.time[Z];
	}
#endif

#if ! defined ACCELERATION_TEMPORAL
  if (move_state.steps[E]) {
     ffe:	e0 90 83 02 	lds	r14, 0x0283
    1002:	f0 90 84 02 	lds	r15, 0x0284
    1006:	00 91 85 02 	lds	r16, 0x0285
    100a:	10 91 86 02 	lds	r17, 0x0286
    100e:	e1 14       	cp	r14, r1
    1010:	f1 04       	cpc	r15, r1
    1012:	01 05       	cpc	r16, r1
    1014:	11 05       	cpc	r17, r1
    1016:	c1 f1       	breq	.+112    	; 0x1088 <dda_step+0x232>
    move_state.counter[E] -= dda->delta[E];
    1018:	20 91 73 02 	lds	r18, 0x0273
    101c:	30 91 74 02 	lds	r19, 0x0274
    1020:	40 91 75 02 	lds	r20, 0x0275
    1024:	50 91 76 02 	lds	r21, 0x0276
    1028:	83 a1       	ldd	r24, Z+35	; 0x23
    102a:	94 a1       	ldd	r25, Z+36	; 0x24
    102c:	a5 a1       	ldd	r26, Z+37	; 0x25
    102e:	b6 a1       	ldd	r27, Z+38	; 0x26
    1030:	28 1b       	sub	r18, r24
    1032:	39 0b       	sbc	r19, r25
    1034:	4a 0b       	sbc	r20, r26
    1036:	5b 0b       	sbc	r21, r27
    1038:	20 93 73 02 	sts	0x0273, r18
    103c:	30 93 74 02 	sts	0x0274, r19
    1040:	40 93 75 02 	sts	0x0275, r20
    1044:	50 93 76 02 	sts	0x0276, r21
    if (move_state.counter[E] < 0) {
    1048:	57 ff       	sbrs	r21, 7
    104a:	1e c0       	rjmp	.+60     	; 0x1088 <dda_step+0x232>
			e_step();
    104c:	14 9a       	sbi	0x02, 4	; 2
      move_state.steps[E]--;
    104e:	08 94       	sec
    1050:	e1 08       	sbc	r14, r1
    1052:	f1 08       	sbc	r15, r1
    1054:	01 09       	sbc	r16, r1
    1056:	11 09       	sbc	r17, r1
    1058:	e0 92 83 02 	sts	0x0283, r14
    105c:	f0 92 84 02 	sts	0x0284, r15
    1060:	00 93 85 02 	sts	0x0285, r16
    1064:	10 93 86 02 	sts	0x0286, r17
      move_state.counter[E] += dda->total_steps;
    1068:	87 a1       	ldd	r24, Z+39	; 0x27
    106a:	90 a5       	ldd	r25, Z+40	; 0x28
    106c:	a1 a5       	ldd	r26, Z+41	; 0x29
    106e:	b2 a5       	ldd	r27, Z+42	; 0x2a
    1070:	28 0f       	add	r18, r24
    1072:	39 1f       	adc	r19, r25
    1074:	4a 1f       	adc	r20, r26
    1076:	5b 1f       	adc	r21, r27
    1078:	20 93 73 02 	sts	0x0273, r18
    107c:	30 93 74 02 	sts	0x0274, r19
    1080:	40 93 75 02 	sts	0x0275, r20
    1084:	50 93 76 02 	sts	0x0276, r21
			// else we are already at target speed
		}
	#endif

	#ifdef ACCELERATION_RAMPING
		move_state.step_no++;
    1088:	80 91 87 02 	lds	r24, 0x0287
    108c:	90 91 88 02 	lds	r25, 0x0288
    1090:	a0 91 89 02 	lds	r26, 0x0289
    1094:	b0 91 8a 02 	lds	r27, 0x028A
    1098:	01 96       	adiw	r24, 0x01	; 1
    109a:	a1 1d       	adc	r26, r1
    109c:	b1 1d       	adc	r27, r1
    109e:	80 93 87 02 	sts	0x0287, r24
    10a2:	90 93 88 02 	sts	0x0288, r25
    10a6:	a0 93 89 02 	sts	0x0289, r26
    10aa:	b0 93 8a 02 	sts	0x028A, r27
      }
    }
	#endif

  // If there are no steps left or an endstop stop happened, we have finished.
  if ((move_state.steps[X] == 0 && move_state.steps[Y] == 0 &&
    10ae:	80 91 77 02 	lds	r24, 0x0277
    10b2:	90 91 78 02 	lds	r25, 0x0278
    10b6:	a0 91 79 02 	lds	r26, 0x0279
    10ba:	b0 91 7a 02 	lds	r27, 0x027A
    10be:	00 97       	sbiw	r24, 0x00	; 0
    10c0:	a1 05       	cpc	r26, r1
    10c2:	b1 05       	cpc	r27, r1
    10c4:	21 f5       	brne	.+72     	; 0x110e <dda_step+0x2b8>
    10c6:	80 91 7b 02 	lds	r24, 0x027B
    10ca:	90 91 7c 02 	lds	r25, 0x027C
    10ce:	a0 91 7d 02 	lds	r26, 0x027D
    10d2:	b0 91 7e 02 	lds	r27, 0x027E
    10d6:	00 97       	sbiw	r24, 0x00	; 0
    10d8:	a1 05       	cpc	r26, r1
    10da:	b1 05       	cpc	r27, r1
    10dc:	c1 f4       	brne	.+48     	; 0x110e <dda_step+0x2b8>
    10de:	80 91 7f 02 	lds	r24, 0x027F
    10e2:	90 91 80 02 	lds	r25, 0x0280
    10e6:	a0 91 81 02 	lds	r26, 0x0281
    10ea:	b0 91 82 02 	lds	r27, 0x0282
    10ee:	00 97       	sbiw	r24, 0x00	; 0
    10f0:	a1 05       	cpc	r26, r1
    10f2:	b1 05       	cpc	r27, r1
    10f4:	61 f4       	brne	.+24     	; 0x110e <dda_step+0x2b8>
    10f6:	80 91 83 02 	lds	r24, 0x0283
    10fa:	90 91 84 02 	lds	r25, 0x0284
    10fe:	a0 91 85 02 	lds	r26, 0x0285
    1102:	b0 91 86 02 	lds	r27, 0x0286
    1106:	00 97       	sbiw	r24, 0x00	; 0
    1108:	a1 05       	cpc	r26, r1
    110a:	b1 05       	cpc	r27, r1
    110c:	69 f0       	breq	.+26     	; 0x1128 <dda_step+0x2d2>
    110e:	80 91 8b 02 	lds	r24, 0x028B
    1112:	88 23       	and	r24, r24
    1114:	a1 f0       	breq	.+40     	; 0x113e <dda_step+0x2e8>
    1116:	87 a9       	ldd	r24, Z+55	; 0x37
    1118:	90 ad       	ldd	r25, Z+56	; 0x38
    111a:	a1 ad       	ldd	r26, Z+57	; 0x39
    111c:	b2 ad       	ldd	r27, Z+58	; 0x3a
    111e:	18 16       	cp	r1, r24
    1120:	19 06       	cpc	r1, r25
    1122:	1a 06       	cpc	r1, r26
    1124:	1b 06       	cpc	r1, r27
    1126:	5c f0       	brlt	.+22     	; 0x113e <dda_step+0x2e8>
       move_state.steps[Z] == 0 && move_state.steps[E] == 0)
    #ifdef ACCELERATION_RAMPING
      || (move_state.endstop_stop && dda->n <= 0)
    #endif
      ) {
		dda->live = 0;
    1128:	85 89       	ldd	r24, Z+21	; 0x15
    112a:	8d 7f       	andi	r24, 0xFD	; 253
    dda->done = 1;
    112c:	84 60       	ori	r24, 0x04	; 4
    112e:	85 8b       	std	Z+21, r24	; 0x15
    #ifdef LOOKAHEAD
    // If look-ahead was using this move, it could have missed our activation:
    // make sure the ids do not match.
    dda->id--;
    1130:	e9 59       	subi	r30, 0x99	; 153
    1132:	ff 4f       	sbci	r31, 0xFF	; 255
    1134:	80 81       	ld	r24, Z
    1136:	81 50       	subi	r24, 0x01	; 1
    1138:	80 83       	st	Z, r24
    #endif
		#ifdef	DC_EXTRUDER
			heater_set(DC_EXTRUDER, 0);
		#endif
		// z stepper is only enabled while moving
		z_disable();
    113a:	47 9a       	sbi	0x08, 7	; 8
    113c:	08 c0       	rjmp	.+16     	; 0x114e <dda_step+0x2f8>

    // No need to restart timer here.
    // After having finished, dda_start() will do it.
	}
  else {
		psu_timeout = 0;
    113e:	10 92 33 06 	sts	0x0633, r1
    setTimer(dda->c);
    1142:	63 a9       	ldd	r22, Z+51	; 0x33
    1144:	74 a9       	ldd	r23, Z+52	; 0x34
    1146:	85 a9       	ldd	r24, Z+53	; 0x35
    1148:	96 a9       	ldd	r25, Z+54	; 0x36
    114a:	0e 94 8c 20 	call	0x4118	; 0x4118 <setTimer>
  }

	// turn off step outputs, hopefully they've been on long enough by now to register with the drivers
	// if not, too bad. or insert a (very!) small delay here, or fire up a spare timer or something.
	// we also hope that we don't step before the drivers register the low- limit maximum speed if you think this is a problem.
	unstep();
    114e:	88 98       	cbi	0x11, 0	; 17
    1150:	8e 98       	cbi	0x11, 6	; 17
    1152:	41 98       	cbi	0x08, 1	; 8
    1154:	14 98       	cbi	0x02, 4	; 2
}
    1156:	1f 91       	pop	r17
    1158:	0f 91       	pop	r16
    115a:	ff 90       	pop	r15
    115c:	ef 90       	pop	r14
    115e:	08 95       	ret

00001160 <dda_start>:

	We also mark this DDA as running, so other parts of the firmware know that something is happening

	Called both inside and outside of interrupts.
*/
void dda_start(DDA *dda) {
    1160:	cf 93       	push	r28
    1162:	df 93       	push	r29
    1164:	ec 01       	movw	r28, r24
  if (DEBUG_DDA && (debug_flags & DEBUG_DDA))
    sersendf_P(PSTR("Start: X %lq  Y %lq  Z %lq  F %lu\n"),
               dda->endpoint.axis[X], dda->endpoint.axis[Y],
               dda->endpoint.axis[Z], dda->endpoint.F);

	if ( ! dda->nullmove) {
    1166:	8d 89       	ldd	r24, Y+21	; 0x15
    1168:	80 fd       	sbrc	r24, 0
    116a:	75 c0       	rjmp	.+234    	; 0x1256 <dda_start+0xf6>
		// get ready to go
		psu_timeout = 0;
    116c:	10 92 33 06 	sts	0x0633, r1
    if (dda->delta[Z])
    1170:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1172:	98 a1       	ldd	r25, Y+32	; 0x20
    1174:	a9 a1       	ldd	r26, Y+33	; 0x21
    1176:	ba a1       	ldd	r27, Y+34	; 0x22
    1178:	00 97       	sbiw	r24, 0x00	; 0
    117a:	a1 05       	cpc	r26, r1
    117c:	b1 05       	cpc	r27, r1
    117e:	09 f0       	breq	.+2      	; 0x1182 <dda_start+0x22>
			z_enable();
    1180:	47 98       	cbi	0x08, 7	; 8
		if (dda->endstop_check)
    1182:	c7 59       	subi	r28, 0x97	; 151
    1184:	df 4f       	sbci	r29, 0xFF	; 255
    1186:	88 81       	ld	r24, Y
    1188:	c9 56       	subi	r28, 0x69	; 105
    118a:	d0 40       	sbci	r29, 0x00	; 0
    118c:	81 11       	cpse	r24, r1
		#endif
		#ifdef Y_MAX_PIN
			WRITE(Y_MAX_PIN, 1);
		#endif
		#ifdef Z_MIN_PIN
			WRITE(Z_MIN_PIN, 1);
    118e:	75 9a       	sbi	0x0e, 5	; 14
			endstops_on();

		// set direction outputs
		x_direction(dda->x_direction);
    1190:	8d 89       	ldd	r24, Y+21	; 0x15
    1192:	84 ff       	sbrs	r24, 4
    1194:	02 c0       	rjmp	.+4      	; 0x119a <dda_start+0x3a>
    1196:	89 9a       	sbi	0x11, 1	; 17
    1198:	01 c0       	rjmp	.+2      	; 0x119c <dda_start+0x3c>
    119a:	89 98       	cbi	0x11, 1	; 17
		y_direction(dda->y_direction);
    119c:	8d 89       	ldd	r24, Y+21	; 0x15
    119e:	85 fd       	sbrc	r24, 5
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <dda_start+0x46>
    11a2:	8f 9a       	sbi	0x11, 7	; 17
    11a4:	01 c0       	rjmp	.+2      	; 0x11a8 <dda_start+0x48>
    11a6:	8f 98       	cbi	0x11, 7	; 17
		z_direction(dda->z_direction);
    11a8:	8d 89       	ldd	r24, Y+21	; 0x15
    11aa:	86 fd       	sbrc	r24, 6
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <dda_start+0x52>
    11ae:	43 9a       	sbi	0x08, 3	; 8
    11b0:	01 c0       	rjmp	.+2      	; 0x11b4 <dda_start+0x54>
    11b2:	43 98       	cbi	0x08, 3	; 8
		e_direction(dda->e_direction);
    11b4:	8d 89       	ldd	r24, Y+21	; 0x15
    11b6:	87 ff       	sbrs	r24, 7
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <dda_start+0x5e>
    11ba:	16 9a       	sbi	0x02, 6	; 2
    11bc:	01 c0       	rjmp	.+2      	; 0x11c0 <dda_start+0x60>
    11be:	16 98       	cbi	0x02, 6	; 2
    if (dda->delta[E])
			heater_set(DC_EXTRUDER, DC_EXTRUDER_PWM);
		#endif

		// initialise state variable
    move_state.counter[X] = move_state.counter[Y] = move_state.counter[Z] = \
    11c0:	8f a1       	ldd	r24, Y+39	; 0x27
    11c2:	98 a5       	ldd	r25, Y+40	; 0x28
    11c4:	a9 a5       	ldd	r26, Y+41	; 0x29
    11c6:	ba a5       	ldd	r27, Y+42	; 0x2a
    11c8:	b6 95       	lsr	r27
    11ca:	a7 95       	ror	r26
    11cc:	97 95       	ror	r25
    11ce:	87 95       	ror	r24
    11d0:	b0 95       	com	r27
    11d2:	a0 95       	com	r26
    11d4:	90 95       	com	r25
    11d6:	81 95       	neg	r24
    11d8:	9f 4f       	sbci	r25, 0xFF	; 255
    11da:	af 4f       	sbci	r26, 0xFF	; 255
    11dc:	bf 4f       	sbci	r27, 0xFF	; 255
    11de:	80 93 73 02 	sts	0x0273, r24
    11e2:	90 93 74 02 	sts	0x0274, r25
    11e6:	a0 93 75 02 	sts	0x0275, r26
    11ea:	b0 93 76 02 	sts	0x0276, r27
    11ee:	80 93 6f 02 	sts	0x026F, r24
    11f2:	90 93 70 02 	sts	0x0270, r25
    11f6:	a0 93 71 02 	sts	0x0271, r26
    11fa:	b0 93 72 02 	sts	0x0272, r27
    11fe:	80 93 6b 02 	sts	0x026B, r24
    1202:	90 93 6c 02 	sts	0x026C, r25
    1206:	a0 93 6d 02 	sts	0x026D, r26
    120a:	b0 93 6e 02 	sts	0x026E, r27
    120e:	80 93 67 02 	sts	0x0267, r24
    1212:	90 93 68 02 	sts	0x0268, r25
    1216:	a0 93 69 02 	sts	0x0269, r26
    121a:	b0 93 6a 02 	sts	0x026A, r27
      move_state.counter[E] = -(dda->total_steps >> 1);
    memcpy(&move_state.steps[X], &dda->delta[X], sizeof(uint32_t) * 4);
    121e:	a7 e7       	ldi	r26, 0x77	; 119
    1220:	b2 e0       	ldi	r27, 0x02	; 2
    1222:	fe 01       	movw	r30, r28
    1224:	77 96       	adiw	r30, 0x17	; 23
    1226:	80 e1       	ldi	r24, 0x10	; 16
    1228:	01 90       	ld	r0, Z+
    122a:	0d 92       	st	X+, r0
    122c:	81 50       	subi	r24, 0x01	; 1
    122e:	e1 f7       	brne	.-8      	; 0x1228 <dda_start+0xc8>
    move_state.endstop_stop = 0;
    1230:	10 92 8b 02 	sts	0x028B, r1
		#ifdef ACCELERATION_RAMPING
			move_state.step_no = 0;
    1234:	10 92 87 02 	sts	0x0287, r1
    1238:	10 92 88 02 	sts	0x0288, r1
    123c:	10 92 89 02 	sts	0x0289, r1
    1240:	10 92 8a 02 	sts	0x028A, r1
      move_state.time[X] = move_state.time[Y] = \
        move_state.time[Z] = move_state.time[E] = 0UL;
		#endif

		// ensure this dda starts
		dda->live = 1;
    1244:	8d 89       	ldd	r24, Y+21	; 0x15
    1246:	82 60       	ori	r24, 0x02	; 2
    1248:	8d 8b       	std	Y+21, r24	; 0x15

		// set timeout for first step
    setTimer(dda->c);
    124a:	6b a9       	ldd	r22, Y+51	; 0x33
    124c:	7c a9       	ldd	r23, Y+52	; 0x34
    124e:	8d a9       	ldd	r24, Y+53	; 0x35
    1250:	9e a9       	ldd	r25, Y+54	; 0x36
    1252:	0e 94 8c 20 	call	0x4118	; 0x4118 <setTimer>
	}
	// else just a speed change, keep dda->live = 0

	current_position.F = dda->endpoint.F;
    1256:	88 89       	ldd	r24, Y+16	; 0x10
    1258:	99 89       	ldd	r25, Y+17	; 0x11
    125a:	aa 89       	ldd	r26, Y+18	; 0x12
    125c:	bb 89       	ldd	r27, Y+19	; 0x13
    125e:	80 93 62 02 	sts	0x0262, r24
    1262:	90 93 63 02 	sts	0x0263, r25
    1266:	a0 93 64 02 	sts	0x0264, r26
    126a:	b0 93 65 02 	sts	0x0265, r27
}
    126e:	df 91       	pop	r29
    1270:	cf 91       	pop	r28
    1272:	08 95       	ret

00001274 <dda_new_startpoint>:

/*! Distribute a new startpoint to DDA's internal structures without any movement.

	This is needed for example after homing or a G92. The new location must be in startpoint already.
*/
void dda_new_startpoint(void) {
    1274:	a0 e0       	ldi	r26, 0x00	; 0
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	e0 e4       	ldi	r30, 0x40	; 64
    127a:	f9 e0       	ldi	r31, 0x09	; 9
    127c:	0c 94 6c 23 	jmp	0x46d8	; 0x46d8 <__prologue_saves__+0xa>
    1280:	77 24       	eor	r7, r7
    1282:	c0 e0       	ldi	r28, 0x00	; 0
    1284:	d0 e0       	ldi	r29, 0x00	; 0
  enum axis_e i;

  for (i = X; i < AXIS_COUNT; i++)
    startpoint_steps.axis[i] = um_to_steps(startpoint.axis[i], i);
    1286:	87 2c       	mov	r8, r7
    1288:	99 24       	eor	r9, r9
extern const axes_uint32_t PROGMEM axis_qn_P;
extern const axes_uint32_t PROGMEM axis_qr_P;

static int32_t um_to_steps(int32_t, enum axis_e) __attribute__ ((always_inline));
inline int32_t um_to_steps(int32_t distance, enum axis_e a) {
  return muldivQR(distance, pgm_read_dword(&axis_qn_P[a]),
    128a:	88 0c       	add	r8, r8
    128c:	99 1c       	adc	r9, r9
    128e:	88 0c       	add	r8, r8
    1290:	99 1c       	adc	r9, r9
    1292:	f4 01       	movw	r30, r8
    1294:	e0 5e       	subi	r30, 0xE0	; 224
    1296:	fd 4f       	sbci	r31, 0xFD	; 253
    1298:	25 91       	lpm	r18, Z+
    129a:	35 91       	lpm	r19, Z+
    129c:	45 91       	lpm	r20, Z+
    129e:	54 91       	lpm	r21, Z+
                  pgm_read_dword(&axis_qr_P[a]), UM_PER_METER);
    12a0:	f4 01       	movw	r30, r8
    12a2:	e0 5d       	subi	r30, 0xD0	; 208
    12a4:	fd 4f       	sbci	r31, 0xFD	; 253
    12a6:	e5 90       	lpm	r14, Z+
    12a8:	f5 90       	lpm	r15, Z+
    12aa:	05 91       	lpm	r16, Z+
    12ac:	14 91       	lpm	r17, Z+
extern const axes_uint32_t PROGMEM axis_qn_P;
extern const axes_uint32_t PROGMEM axis_qr_P;

static int32_t um_to_steps(int32_t, enum axis_e) __attribute__ ((always_inline));
inline int32_t um_to_steps(int32_t distance, enum axis_e a) {
  return muldivQR(distance, pgm_read_dword(&axis_qn_P[a]),
    12ae:	f4 01       	movw	r30, r8
    12b0:	e8 5d       	subi	r30, 0xD8	; 216
    12b2:	fd 4f       	sbci	r31, 0xFD	; 253
    12b4:	60 81       	ld	r22, Z
    12b6:	71 81       	ldd	r23, Z+1	; 0x01
    12b8:	82 81       	ldd	r24, Z+2	; 0x02
    12ba:	93 81       	ldd	r25, Z+3	; 0x03
    12bc:	e0 e4       	ldi	r30, 0x40	; 64
    12be:	ae 2e       	mov	r10, r30
    12c0:	e2 e4       	ldi	r30, 0x42	; 66
    12c2:	be 2e       	mov	r11, r30
    12c4:	ef e0       	ldi	r30, 0x0F	; 15
    12c6:	ce 2e       	mov	r12, r30
    12c8:	d1 2c       	mov	r13, r1
    12ca:	0e 94 2b 12 	call	0x2456	; 0x2456 <muldivQR>
    12ce:	2d e3       	ldi	r18, 0x3D	; 61
    12d0:	32 e0       	ldi	r19, 0x02	; 2
    12d2:	82 0e       	add	r8, r18
    12d4:	93 1e       	adc	r9, r19
    12d6:	f4 01       	movw	r30, r8
    12d8:	60 83       	st	Z, r22
    12da:	71 83       	std	Z+1, r23	; 0x01
    12dc:	82 83       	std	Z+2, r24	; 0x02
    12de:	93 83       	std	Z+3, r25	; 0x03
	This is needed for example after homing or a G92. The new location must be in startpoint already.
*/
void dda_new_startpoint(void) {
  enum axis_e i;

  for (i = X; i < AXIS_COUNT; i++)
    12e0:	73 94       	inc	r7
    12e2:	21 96       	adiw	r28, 0x01	; 1
    12e4:	c4 30       	cpi	r28, 0x04	; 4
    12e6:	d1 05       	cpc	r29, r1
    12e8:	71 f6       	brne	.-100    	; 0x1286 <dda_new_startpoint+0x12>
    startpoint_steps.axis[i] = um_to_steps(startpoint.axis[i], i);
}
    12ea:	cd b7       	in	r28, 0x3d	; 61
    12ec:	de b7       	in	r29, 0x3e	; 62
    12ee:	ed e0       	ldi	r30, 0x0D	; 13
    12f0:	0c 94 88 23 	jmp	0x4710	; 0x4710 <__epilogue_restores__+0xa>

000012f4 <dda_create>:
 *    lookahead either, but this small distance should be added to the next
 *    movement.
 * 6. Lookahead calculation too slow. This is handled in dda_join_moves()
 *    already.
 */
void dda_create(DDA *dda, TARGET *target) {
    12f4:	ac e1       	ldi	r26, 0x1C	; 28
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	e0 e8       	ldi	r30, 0x80	; 128
    12fa:	f9 e0       	ldi	r31, 0x09	; 9
    12fc:	0c 94 67 23 	jmp	0x46ce	; 0x46ce <__prologue_saves__>
    1300:	2c 01       	movw	r4, r24
    1302:	1b 01       	movw	r2, r22
  #ifdef LOOKAHEAD
  // Number the moves to identify them; allowed to overflow.
  static uint8_t idcnt = 0;
  static DDA* prev_dda = NULL;

  if ((prev_dda && prev_dda->done) || dda->waitfor_temp)
    1304:	e0 91 95 02 	lds	r30, 0x0295
    1308:	f0 91 96 02 	lds	r31, 0x0296
    130c:	30 97       	sbiw	r30, 0x00	; 0
    130e:	19 f0       	breq	.+6      	; 0x1316 <dda_create+0x22>
    1310:	85 89       	ldd	r24, Z+21	; 0x15
    1312:	82 fd       	sbrc	r24, 2
    1314:	05 c0       	rjmp	.+10     	; 0x1320 <dda_create+0x2c>
    1316:	d2 01       	movw	r26, r4
    1318:	55 96       	adiw	r26, 0x15	; 21
    131a:	8c 91       	ld	r24, X
    131c:	83 ff       	sbrs	r24, 3
    131e:	04 c0       	rjmp	.+8      	; 0x1328 <dda_create+0x34>
    prev_dda = NULL;
    1320:	10 92 96 02 	sts	0x0296, r1
    1324:	10 92 95 02 	sts	0x0295, r1
  #endif

  if (dda->waitfor_temp)
    1328:	f2 01       	movw	r30, r4
    132a:	85 89       	ldd	r24, Z+21	; 0x15
    132c:	83 fd       	sbrc	r24, 3
    132e:	eb c3       	rjmp	.+2006   	; 0x1b06 <dda_create+0x812>
    sersendf_P(PSTR("\nCreate: X %lq  Y %lq  Z %lq  F %lu\n"),
               dda->endpoint.axis[X], dda->endpoint.axis[Y],
               dda->endpoint.axis[Z], dda->endpoint.F);

	// we end at the passed target
	memcpy(&(dda->endpoint), target, sizeof(TARGET));
    1330:	d2 01       	movw	r26, r4
    1332:	f1 01       	movw	r30, r2
    1334:	85 e1       	ldi	r24, 0x15	; 21
    1336:	01 90       	ld	r0, Z+
    1338:	0d 92       	st	X+, r0
    133a:	81 50       	subi	r24, 0x01	; 1
    133c:	e1 f7       	brne	.-8      	; 0x1336 <dda_create+0x42>

  #ifdef LOOKAHEAD
    // Set the start and stop speeds to zero for now = full stops between
    // moves. Also fallback if lookahead calculations fail to finish in time.
    dda->crossF = 0;
    133e:	bb e4       	ldi	r27, 0x4B	; 75
    1340:	eb 2e       	mov	r14, r27
    1342:	f1 2c       	mov	r15, r1
    1344:	4e 0c       	add	r4, r14
    1346:	5f 1c       	adc	r5, r15
    1348:	d2 01       	movw	r26, r4
    134a:	1d 92       	st	X+, r1
    134c:	1d 92       	st	X+, r1
    134e:	1d 92       	st	X+, r1
    1350:	1d 92       	st	X+, r1
    dda->start_steps = 0;
    1352:	fd 01       	movw	r30, r26
    1354:	11 92       	st	Z+, r1
    1356:	11 92       	st	Z+, r1
    1358:	11 92       	st	Z+, r1
    135a:	11 92       	st	Z+, r1
    135c:	2f 01       	movw	r4, r30
    dda->end_steps = 0;
    135e:	10 82       	st	Z, r1
    1360:	11 82       	std	Z+1, r1	; 0x01
    1362:	12 82       	std	Z+2, r1	; 0x02
    1364:	13 82       	std	Z+3, r1	; 0x03
    // Give this move an identifier.
    dda->id = idcnt++;
    1366:	80 91 97 02 	lds	r24, 0x0297
    136a:	e4 e1       	ldi	r30, 0x14	; 20
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	4e 0e       	add	r4, r30
    1370:	5f 1e       	adc	r5, r31
    1372:	d2 01       	movw	r26, r4
    1374:	8c 93       	st	X, r24
    1376:	e9 e9       	ldi	r30, 0x99	; 153
    1378:	ff ef       	ldi	r31, 0xFF	; 255
    137a:	4e 0e       	add	r4, r30
    137c:	5f 1e       	adc	r5, r31
    137e:	8f 5f       	subi	r24, 0xFF	; 255
    1380:	80 93 97 02 	sts	0x0297, r24
    1384:	99 24       	eor	r9, r9
    1386:	e9 c0       	rjmp	.+466    	; 0x155a <dda_create+0x266>
  #endif

  for (i = X; i < (target->e_relative ? E : AXIS_COUNT); i++) {
    delta_um[i] = (uint32_t)abs32(target->axis[i] - startpoint.axis[i]);
    1388:	f3 01       	movw	r30, r6
    138a:	ee 0f       	add	r30, r30
    138c:	ff 1f       	adc	r31, r31
    138e:	ee 0f       	add	r30, r30
    1390:	ff 1f       	adc	r31, r31
    1392:	d1 01       	movw	r26, r2
    1394:	ae 0f       	add	r26, r30
    1396:	bf 1f       	adc	r27, r31
    1398:	ad 90       	ld	r10, X+
    139a:	bd 90       	ld	r11, X+
    139c:	cd 90       	ld	r12, X+
    139e:	dc 90       	ld	r13, X
    13a0:	8e 01       	movw	r16, r28
    13a2:	0f 5f       	subi	r16, 0xFF	; 255
    13a4:	1f 4f       	sbci	r17, 0xFF	; 255
    13a6:	0e 0f       	add	r16, r30
    13a8:	1f 1f       	adc	r17, r31
    13aa:	e8 5d       	subi	r30, 0xD8	; 216
    13ac:	fd 4f       	sbci	r31, 0xFD	; 253
    13ae:	80 81       	ld	r24, Z
    13b0:	91 81       	ldd	r25, Z+1	; 0x01
    13b2:	a2 81       	ldd	r26, Z+2	; 0x02
    13b4:	b3 81       	ldd	r27, Z+3	; 0x03
    13b6:	a6 01       	movw	r20, r12
    13b8:	95 01       	movw	r18, r10
    13ba:	28 1b       	sub	r18, r24
    13bc:	39 0b       	sbc	r19, r25
    13be:	4a 0b       	sbc	r20, r26
    13c0:	5b 0b       	sbc	r21, r27
    13c2:	d8 01       	movw	r26, r16
    13c4:	2d 93       	st	X+, r18
    13c6:	3d 93       	st	X+, r19
    13c8:	4d 93       	st	X+, r20
    13ca:	5c 93       	st	X, r21
    13cc:	13 97       	sbiw	r26, 0x03	; 3
    13ce:	57 ff       	sbrs	r21, 7
    13d0:	0c c0       	rjmp	.+24     	; 0x13ea <dda_create+0xf6>
    13d2:	88 27       	eor	r24, r24
    13d4:	99 27       	eor	r25, r25
    13d6:	dc 01       	movw	r26, r24
    13d8:	82 1b       	sub	r24, r18
    13da:	93 0b       	sbc	r25, r19
    13dc:	a4 0b       	sbc	r26, r20
    13de:	b5 0b       	sbc	r27, r21
    13e0:	f8 01       	movw	r30, r16
    13e2:	80 83       	st	Z, r24
    13e4:	91 83       	std	Z+1, r25	; 0x01
    13e6:	a2 83       	std	Z+2, r26	; 0x02
    13e8:	b3 83       	std	Z+3, r27	; 0x03
    13ea:	89 2d       	mov	r24, r9
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	88 0f       	add	r24, r24
    13f0:	99 1f       	adc	r25, r25
    13f2:	88 0f       	add	r24, r24
    13f4:	99 1f       	adc	r25, r25
    13f6:	fc 01       	movw	r30, r24
    13f8:	e0 5e       	subi	r30, 0xE0	; 224
    13fa:	fd 4f       	sbci	r31, 0xFD	; 253
    13fc:	25 91       	lpm	r18, Z+
    13fe:	35 91       	lpm	r19, Z+
    1400:	45 91       	lpm	r20, Z+
    1402:	54 91       	lpm	r21, Z+
                  pgm_read_dword(&axis_qr_P[a]), UM_PER_METER);
    1404:	fc 01       	movw	r30, r24
    1406:	e0 5d       	subi	r30, 0xD0	; 208
    1408:	fd 4f       	sbci	r31, 0xFD	; 253
    140a:	e5 90       	lpm	r14, Z+
    140c:	f5 90       	lpm	r15, Z+
    140e:	05 91       	lpm	r16, Z+
    1410:	14 91       	lpm	r17, Z+
extern const axes_uint32_t PROGMEM axis_qn_P;
extern const axes_uint32_t PROGMEM axis_qr_P;

static int32_t um_to_steps(int32_t, enum axis_e) __attribute__ ((always_inline));
inline int32_t um_to_steps(int32_t distance, enum axis_e a) {
  return muldivQR(distance, pgm_read_dword(&axis_qn_P[a]),
    1412:	c6 01       	movw	r24, r12
    1414:	b5 01       	movw	r22, r10
    1416:	e0 e4       	ldi	r30, 0x40	; 64
    1418:	ae 2e       	mov	r10, r30
    141a:	e2 e4       	ldi	r30, 0x42	; 66
    141c:	be 2e       	mov	r11, r30
    141e:	ef e0       	ldi	r30, 0x0F	; 15
    1420:	ce 2e       	mov	r12, r30
    1422:	d1 2c       	mov	r13, r1
    1424:	0e 94 2b 12 	call	0x2456	; 0x2456 <muldivQR>
    1428:	9b 01       	movw	r18, r22
    142a:	ac 01       	movw	r20, r24

    steps = um_to_steps(target->axis[i], i);
    dda->delta[i] = abs32(steps - startpoint_steps.axis[i]);
    142c:	f3 01       	movw	r30, r6
    142e:	ee 0f       	add	r30, r30
    1430:	ff 1f       	adc	r31, r31
    1432:	ee 0f       	add	r30, r30
    1434:	ff 1f       	adc	r31, r31
    1436:	b2 01       	movw	r22, r4
    1438:	6e 0f       	add	r22, r30
    143a:	7f 1f       	adc	r23, r31
    143c:	e3 5c       	subi	r30, 0xC3	; 195
    143e:	fd 4f       	sbci	r31, 0xFD	; 253
    1440:	80 81       	ld	r24, Z
    1442:	91 81       	ldd	r25, Z+1	; 0x01
    1444:	a2 81       	ldd	r26, Z+2	; 0x02
    1446:	b3 81       	ldd	r27, Z+3	; 0x03
    1448:	79 01       	movw	r14, r18
    144a:	8a 01       	movw	r16, r20
    144c:	e8 1a       	sub	r14, r24
    144e:	f9 0a       	sbc	r15, r25
    1450:	0a 0b       	sbc	r16, r26
    1452:	1b 0b       	sbc	r17, r27
    1454:	d8 01       	movw	r26, r16
    1456:	c7 01       	movw	r24, r14
    1458:	17 ff       	sbrs	r17, 7
    145a:	07 c0       	rjmp	.+14     	; 0x146a <dda_create+0x176>
    145c:	b0 95       	com	r27
    145e:	a0 95       	com	r26
    1460:	90 95       	com	r25
    1462:	81 95       	neg	r24
    1464:	9f 4f       	sbci	r25, 0xFF	; 255
    1466:	af 4f       	sbci	r26, 0xFF	; 255
    1468:	bf 4f       	sbci	r27, 0xFF	; 255
    146a:	fb 01       	movw	r30, r22
    146c:	87 8b       	std	Z+23, r24	; 0x17
    146e:	90 8f       	std	Z+24, r25	; 0x18
    1470:	a1 8f       	std	Z+25, r26	; 0x19
    1472:	b2 8f       	std	Z+26, r27	; 0x1a
    startpoint_steps.axis[i] = steps;
    1474:	d3 01       	movw	r26, r6
    1476:	aa 0f       	add	r26, r26
    1478:	bb 1f       	adc	r27, r27
    147a:	aa 0f       	add	r26, r26
    147c:	bb 1f       	adc	r27, r27
    147e:	fd 01       	movw	r30, r26
    1480:	e3 5c       	subi	r30, 0xC3	; 195
    1482:	fd 4f       	sbci	r31, 0xFD	; 253
    1484:	20 83       	st	Z, r18
    1486:	31 83       	std	Z+1, r19	; 0x01
    1488:	42 83       	std	Z+2, r20	; 0x02
    148a:	53 83       	std	Z+3, r21	; 0x03

    set_direction(dda, i, (target->axis[i] >= startpoint.axis[i])?1:0);
    148c:	fd 01       	movw	r30, r26
    148e:	e8 5d       	subi	r30, 0xD8	; 216
    1490:	fd 4f       	sbci	r31, 0xFD	; 253
    1492:	40 81       	ld	r20, Z
    1494:	51 81       	ldd	r21, Z+1	; 0x01
    1496:	62 81       	ldd	r22, Z+2	; 0x02
    1498:	73 81       	ldd	r23, Z+3	; 0x03
    149a:	20 e0       	ldi	r18, 0x00	; 0
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	a2 0d       	add	r26, r2
    14a0:	b3 1d       	adc	r27, r3
    14a2:	8d 91       	ld	r24, X+
    14a4:	9d 91       	ld	r25, X+
    14a6:	0d 90       	ld	r0, X+
    14a8:	bc 91       	ld	r27, X
    14aa:	a0 2d       	mov	r26, r0
    14ac:	84 17       	cp	r24, r20
    14ae:	95 07       	cpc	r25, r21
    14b0:	a6 07       	cpc	r26, r22
    14b2:	b7 07       	cpc	r27, r23
    14b4:	14 f0       	brlt	.+4      	; 0x14ba <dda_create+0x1c6>
    14b6:	21 e0       	ldi	r18, 0x01	; 1
    14b8:	30 e0       	ldi	r19, 0x00	; 0
};

/*! Set the direction of the 'n' axis
*/
static void set_direction(DDA *dda, enum axis_e n, int dir) {
  if (n == X)
    14ba:	99 20       	and	r9, r9
    14bc:	51 f4       	brne	.+20     	; 0x14d2 <dda_create+0x1de>
    dda->x_direction = dir;
    14be:	92 2f       	mov	r25, r18
    14c0:	91 70       	andi	r25, 0x01	; 1
    14c2:	92 95       	swap	r25
    14c4:	90 7f       	andi	r25, 0xF0	; 240
    14c6:	d2 01       	movw	r26, r4
    14c8:	55 96       	adiw	r26, 0x15	; 21
    14ca:	8c 91       	ld	r24, X
    14cc:	55 97       	sbiw	r26, 0x15	; 21
    14ce:	8f 7e       	andi	r24, 0xEF	; 239
    14d0:	1a c0       	rjmp	.+52     	; 0x1506 <dda_create+0x212>
  else if (n == Y)
    14d2:	b1 e0       	ldi	r27, 0x01	; 1
    14d4:	9b 16       	cp	r9, r27
    14d6:	49 f4       	brne	.+18     	; 0x14ea <dda_create+0x1f6>
    dda->y_direction = dir;
    14d8:	92 2f       	mov	r25, r18
    14da:	91 70       	andi	r25, 0x01	; 1
    14dc:	92 95       	swap	r25
    14de:	99 0f       	add	r25, r25
    14e0:	90 7e       	andi	r25, 0xE0	; 224
    14e2:	f2 01       	movw	r30, r4
    14e4:	85 89       	ldd	r24, Z+21	; 0x15
    14e6:	8f 7d       	andi	r24, 0xDF	; 223
    14e8:	1c c0       	rjmp	.+56     	; 0x1522 <dda_create+0x22e>
  else if (n == Z)
    14ea:	f2 e0       	ldi	r31, 0x02	; 2
    14ec:	9f 16       	cp	r9, r31
    14ee:	79 f4       	brne	.+30     	; 0x150e <dda_create+0x21a>
    dda->z_direction = dir;
    14f0:	92 2f       	mov	r25, r18
    14f2:	91 70       	andi	r25, 0x01	; 1
    14f4:	92 95       	swap	r25
    14f6:	99 0f       	add	r25, r25
    14f8:	99 0f       	add	r25, r25
    14fa:	90 7c       	andi	r25, 0xC0	; 192
    14fc:	d2 01       	movw	r26, r4
    14fe:	55 96       	adiw	r26, 0x15	; 21
    1500:	8c 91       	ld	r24, X
    1502:	55 97       	sbiw	r26, 0x15	; 21
    1504:	8f 7b       	andi	r24, 0xBF	; 191
    1506:	89 2b       	or	r24, r25
    1508:	55 96       	adiw	r26, 0x15	; 21
    150a:	8c 93       	st	X, r24
    150c:	0c c0       	rjmp	.+24     	; 0x1526 <dda_create+0x232>
  else if (n == E)
    150e:	b3 e0       	ldi	r27, 0x03	; 3
    1510:	9b 16       	cp	r9, r27
    1512:	49 f4       	brne	.+18     	; 0x1526 <dda_create+0x232>
    dda->e_direction = dir;
    1514:	92 2f       	mov	r25, r18
    1516:	97 95       	ror	r25
    1518:	99 27       	eor	r25, r25
    151a:	97 95       	ror	r25
    151c:	f2 01       	movw	r30, r4
    151e:	85 89       	ldd	r24, Z+21	; 0x15
    1520:	8f 77       	andi	r24, 0x7F	; 127
    1522:	89 2b       	or	r24, r25
    1524:	85 8b       	std	Z+21, r24	; 0x15
      // Also displacements in micrometers, but for the lookahead alogrithms.
      // TODO: this is redundant. delta_um[] and dda->delta_um[] differ by
      //       just signedness and storage location. Ideally, dda is used
      //       as storage place only if neccessary (LOOKAHEAD turned on?)
      //       because this space is multiplied by the movement queue size.
      dda->delta_um[i] = target->axis[i] - startpoint.axis[i];
    1526:	f3 01       	movw	r30, r6
    1528:	ee 0f       	add	r30, r30
    152a:	ff 1f       	adc	r31, r31
    152c:	ee 0f       	add	r30, r30
    152e:	ff 1f       	adc	r31, r31
    1530:	92 01       	movw	r18, r4
    1532:	2e 0f       	add	r18, r30
    1534:	3f 1f       	adc	r19, r31
    1536:	29 5a       	subi	r18, 0xA9	; 169
    1538:	3f 4f       	sbci	r19, 0xFF	; 255
    153a:	e2 0d       	add	r30, r2
    153c:	f3 1d       	adc	r31, r3
    153e:	80 81       	ld	r24, Z
    1540:	91 81       	ldd	r25, Z+1	; 0x01
    1542:	a2 81       	ldd	r26, Z+2	; 0x02
    1544:	b3 81       	ldd	r27, Z+3	; 0x03
    1546:	84 1b       	sub	r24, r20
    1548:	95 0b       	sbc	r25, r21
    154a:	a6 0b       	sbc	r26, r22
    154c:	b7 0b       	sbc	r27, r23
    154e:	f9 01       	movw	r30, r18
    1550:	80 83       	st	Z, r24
    1552:	91 83       	std	Z+1, r25	; 0x01
    1554:	a2 83       	std	Z+2, r26	; 0x02
    1556:	b3 83       	std	Z+3, r27	; 0x03
    dda->end_steps = 0;
    // Give this move an identifier.
    dda->id = idcnt++;
  #endif

  for (i = X; i < (target->e_relative ? E : AXIS_COUNT); i++) {
    1558:	93 94       	inc	r9
    155a:	69 2c       	mov	r6, r9
    155c:	77 24       	eor	r7, r7
    155e:	d1 01       	movw	r26, r2
    1560:	54 96       	adiw	r26, 0x14	; 20
    1562:	8c 91       	ld	r24, X
    1564:	28 2f       	mov	r18, r24
    1566:	21 70       	andi	r18, 0x01	; 1
    1568:	80 fd       	sbrc	r24, 0
    156a:	03 c0       	rjmp	.+6      	; 0x1572 <dda_create+0x27e>
    156c:	84 e0       	ldi	r24, 0x04	; 4
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	02 c0       	rjmp	.+4      	; 0x1576 <dda_create+0x282>
    1572:	83 e0       	ldi	r24, 0x03	; 3
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	68 16       	cp	r6, r24
    1578:	79 06       	cpc	r7, r25
    157a:	0c f4       	brge	.+2      	; 0x157e <dda_create+0x28a>
    157c:	05 cf       	rjmp	.-502    	; 0x1388 <dda_create+0x94>
      //       because this space is multiplied by the movement queue size.
      dda->delta_um[i] = target->axis[i] - startpoint.axis[i];
    #endif
  }

	if (target->e_relative) {
    157e:	22 23       	and	r18, r18
    1580:	09 f4       	brne	.+2      	; 0x1584 <dda_create+0x290>
    1582:	6c c0       	rjmp	.+216    	; 0x165c <dda_create+0x368>
    // When we get more extruder axes:
    // for (i = E; i < AXIS_COUNT; i++) { ...
    delta_um[E] = abs32(target->axis[E]);
    1584:	f1 01       	movw	r30, r2
    1586:	a4 84       	ldd	r10, Z+12	; 0x0c
    1588:	b5 84       	ldd	r11, Z+13	; 0x0d
    158a:	c6 84       	ldd	r12, Z+14	; 0x0e
    158c:	d7 84       	ldd	r13, Z+15	; 0x0f
    158e:	ad 86       	std	Y+13, r10	; 0x0d
    1590:	be 86       	std	Y+14, r11	; 0x0e
    1592:	cf 86       	std	Y+15, r12	; 0x0f
    1594:	d8 8a       	std	Y+16, r13	; 0x10
    1596:	d7 fe       	sbrs	r13, 7
    1598:	0b c0       	rjmp	.+22     	; 0x15b0 <dda_create+0x2bc>
    159a:	88 27       	eor	r24, r24
    159c:	99 27       	eor	r25, r25
    159e:	dc 01       	movw	r26, r24
    15a0:	8a 19       	sub	r24, r10
    15a2:	9b 09       	sbc	r25, r11
    15a4:	ac 09       	sbc	r26, r12
    15a6:	bd 09       	sbc	r27, r13
    15a8:	8d 87       	std	Y+13, r24	; 0x0d
    15aa:	9e 87       	std	Y+14, r25	; 0x0e
    15ac:	af 87       	std	Y+15, r26	; 0x0f
    15ae:	b8 8b       	std	Y+16, r27	; 0x10
    15b0:	ec e2       	ldi	r30, 0x2C	; 44
    15b2:	f2 e0       	ldi	r31, 0x02	; 2
    15b4:	25 91       	lpm	r18, Z+
    15b6:	35 91       	lpm	r19, Z+
    15b8:	45 91       	lpm	r20, Z+
    15ba:	54 91       	lpm	r21, Z+
                  pgm_read_dword(&axis_qr_P[a]), UM_PER_METER);
    15bc:	ec e3       	ldi	r30, 0x3C	; 60
    15be:	f2 e0       	ldi	r31, 0x02	; 2
    15c0:	e5 90       	lpm	r14, Z+
    15c2:	f5 90       	lpm	r15, Z+
    15c4:	05 91       	lpm	r16, Z+
    15c6:	14 91       	lpm	r17, Z+
extern const axes_uint32_t PROGMEM axis_qn_P;
extern const axes_uint32_t PROGMEM axis_qr_P;

static int32_t um_to_steps(int32_t, enum axis_e) __attribute__ ((always_inline));
inline int32_t um_to_steps(int32_t distance, enum axis_e a) {
  return muldivQR(distance, pgm_read_dword(&axis_qn_P[a]),
    15c8:	c6 01       	movw	r24, r12
    15ca:	b5 01       	movw	r22, r10
    15cc:	e0 e4       	ldi	r30, 0x40	; 64
    15ce:	ae 2e       	mov	r10, r30
    15d0:	e2 e4       	ldi	r30, 0x42	; 66
    15d2:	be 2e       	mov	r11, r30
    15d4:	ef e0       	ldi	r30, 0x0F	; 15
    15d6:	ce 2e       	mov	r12, r30
    15d8:	d1 2c       	mov	r13, r1
    15da:	0e 94 2b 12 	call	0x2456	; 0x2456 <muldivQR>
    15de:	9b 01       	movw	r18, r22
    15e0:	ac 01       	movw	r20, r24
    dda->delta[E] = abs32(um_to_steps(target->axis[E], E));
    15e2:	d2 01       	movw	r26, r4
    15e4:	93 96       	adiw	r26, 0x23	; 35
    15e6:	6d 93       	st	X+, r22
    15e8:	7d 93       	st	X+, r23
    15ea:	8d 93       	st	X+, r24
    15ec:	9c 93       	st	X, r25
    15ee:	96 97       	sbiw	r26, 0x26	; 38
    15f0:	97 ff       	sbrs	r25, 7
    15f2:	0c c0       	rjmp	.+24     	; 0x160c <dda_create+0x318>
    15f4:	88 27       	eor	r24, r24
    15f6:	99 27       	eor	r25, r25
    15f8:	dc 01       	movw	r26, r24
    15fa:	82 1b       	sub	r24, r18
    15fc:	93 0b       	sbc	r25, r19
    15fe:	a4 0b       	sbc	r26, r20
    1600:	b5 0b       	sbc	r27, r21
    1602:	f2 01       	movw	r30, r4
    1604:	83 a3       	std	Z+35, r24	; 0x23
    1606:	94 a3       	std	Z+36, r25	; 0x24
    1608:	a5 a3       	std	Z+37, r26	; 0x25
    160a:	b6 a3       	std	Z+38, r27	; 0x26
    #ifdef LOOKAHEAD
      dda->delta_um[E] = target->axis[E];
    160c:	23 e6       	ldi	r18, 0x63	; 99
    160e:	e2 2e       	mov	r14, r18
    1610:	f1 2c       	mov	r15, r1
    1612:	4e 0c       	add	r4, r14
    1614:	5f 1c       	adc	r5, r15
    1616:	f1 01       	movw	r30, r2
    1618:	84 85       	ldd	r24, Z+12	; 0x0c
    161a:	95 85       	ldd	r25, Z+13	; 0x0d
    161c:	a6 85       	ldd	r26, Z+14	; 0x0e
    161e:	b7 85       	ldd	r27, Z+15	; 0x0f
    1620:	f2 01       	movw	r30, r4
    1622:	80 83       	st	Z, r24
    1624:	91 83       	std	Z+1, r25	; 0x01
    1626:	a2 83       	std	Z+2, r26	; 0x02
    1628:	b3 83       	std	Z+3, r27	; 0x03
    162a:	9d e9       	ldi	r25, 0x9D	; 157
    162c:	e9 2e       	mov	r14, r25
    162e:	9f ef       	ldi	r25, 0xFF	; 255
    1630:	f9 2e       	mov	r15, r25
    1632:	4e 0c       	add	r4, r14
    1634:	5f 1c       	adc	r5, r15
    #endif
    dda->e_direction = (target->axis[E] >= 0)?1:0;
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	f1 01       	movw	r30, r2
    163a:	84 85       	ldd	r24, Z+12	; 0x0c
    163c:	95 85       	ldd	r25, Z+13	; 0x0d
    163e:	a6 85       	ldd	r26, Z+14	; 0x0e
    1640:	b7 85       	ldd	r27, Z+15	; 0x0f
    1642:	b7 ff       	sbrs	r27, 7
    1644:	21 e0       	ldi	r18, 0x01	; 1
    1646:	27 95       	ror	r18
    1648:	22 27       	eor	r18, r18
    164a:	27 95       	ror	r18
    164c:	d2 01       	movw	r26, r4
    164e:	55 96       	adiw	r26, 0x15	; 21
    1650:	8c 91       	ld	r24, X
    1652:	55 97       	sbiw	r26, 0x15	; 21
    1654:	8f 77       	andi	r24, 0x7F	; 127
    1656:	82 2b       	or	r24, r18
    1658:	55 96       	adiw	r26, 0x15	; 21
    165a:	8c 93       	st	X, r24
    165c:	10 e0       	ldi	r17, 0x00	; 0
    165e:	60 e0       	ldi	r22, 0x00	; 0
    1660:	70 e0       	ldi	r23, 0x00	; 0
  // values if storing an axis number would be fully sufficient? Well, I'm not
  // sure, but my feeling says that when we achieve true circles and Beziers,
  // we'll have total_steps which matches neither of X, Y, Z or E. Accordingly,
  // keep it for now. --Traumflug
  for (i = X; i < AXIS_COUNT; i++) {
    if (i == X || dda->delta[i] > dda->total_steps) {
    1662:	11 23       	and	r17, r17
    1664:	b1 f0       	breq	.+44     	; 0x1692 <dda_create+0x39e>
    1666:	e1 2f       	mov	r30, r17
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	ee 0f       	add	r30, r30
    166c:	ff 1f       	adc	r31, r31
    166e:	ee 0f       	add	r30, r30
    1670:	ff 1f       	adc	r31, r31
    1672:	e4 0d       	add	r30, r4
    1674:	f5 1d       	adc	r31, r5
    1676:	27 89       	ldd	r18, Z+23	; 0x17
    1678:	30 8d       	ldd	r19, Z+24	; 0x18
    167a:	41 8d       	ldd	r20, Z+25	; 0x19
    167c:	52 8d       	ldd	r21, Z+26	; 0x1a
    167e:	f2 01       	movw	r30, r4
    1680:	87 a1       	ldd	r24, Z+39	; 0x27
    1682:	90 a5       	ldd	r25, Z+40	; 0x28
    1684:	a1 a5       	ldd	r26, Z+41	; 0x29
    1686:	b2 a5       	ldd	r27, Z+42	; 0x2a
    1688:	82 17       	cp	r24, r18
    168a:	93 07       	cpc	r25, r19
    168c:	a4 07       	cpc	r26, r20
    168e:	b5 07       	cpc	r27, r21
    1690:	a8 f5       	brcc	.+106    	; 0x16fc <dda_create+0x408>
      dda->fast_axis = i;
    1692:	b8 e6       	ldi	r27, 0x68	; 104
    1694:	eb 2e       	mov	r14, r27
    1696:	f1 2c       	mov	r15, r1
    1698:	4e 0c       	add	r4, r14
    169a:	5f 1c       	adc	r5, r15
    169c:	d2 01       	movw	r26, r4
    169e:	1c 93       	st	X, r17
    16a0:	e8 e9       	ldi	r30, 0x98	; 152
    16a2:	ff ef       	ldi	r31, 0xFF	; 255
    16a4:	4e 0e       	add	r4, r30
    16a6:	5f 1e       	adc	r5, r31
      dda->total_steps = dda->delta[i];
    16a8:	21 2f       	mov	r18, r17
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	22 0f       	add	r18, r18
    16ae:	33 1f       	adc	r19, r19
    16b0:	22 0f       	add	r18, r18
    16b2:	33 1f       	adc	r19, r19
    16b4:	f2 01       	movw	r30, r4
    16b6:	e2 0f       	add	r30, r18
    16b8:	f3 1f       	adc	r31, r19
    16ba:	87 89       	ldd	r24, Z+23	; 0x17
    16bc:	90 8d       	ldd	r25, Z+24	; 0x18
    16be:	a1 8d       	ldd	r26, Z+25	; 0x19
    16c0:	b2 8d       	ldd	r27, Z+26	; 0x1a
    16c2:	f2 01       	movw	r30, r4
    16c4:	87 a3       	std	Z+39, r24	; 0x27
    16c6:	90 a7       	std	Z+40, r25	; 0x28
    16c8:	a1 a7       	std	Z+41, r26	; 0x29
    16ca:	b2 a7       	std	Z+42, r27	; 0x2a
      dda->fast_um = delta_um[i];
    16cc:	fe 01       	movw	r30, r28
    16ce:	e2 0f       	add	r30, r18
    16d0:	f3 1f       	adc	r31, r19
    16d2:	81 81       	ldd	r24, Z+1	; 0x01
    16d4:	92 81       	ldd	r25, Z+2	; 0x02
    16d6:	a3 81       	ldd	r26, Z+3	; 0x03
    16d8:	b4 81       	ldd	r27, Z+4	; 0x04
    16da:	f2 01       	movw	r30, r4
    16dc:	83 a7       	std	Z+43, r24	; 0x2b
    16de:	94 a7       	std	Z+44, r25	; 0x2c
    16e0:	a5 a7       	std	Z+45, r26	; 0x2d
    16e2:	b6 a7       	std	Z+46, r27	; 0x2e
      dda->fast_spm = pgm_read_dword(&steps_per_m_P[i]);
    16e4:	f9 01       	movw	r30, r18
    16e6:	ee 53       	subi	r30, 0x3E	; 62
    16e8:	fe 4f       	sbci	r31, 0xFE	; 254
    16ea:	85 91       	lpm	r24, Z+
    16ec:	95 91       	lpm	r25, Z+
    16ee:	a5 91       	lpm	r26, Z+
    16f0:	b4 91       	lpm	r27, Z+
    16f2:	f2 01       	movw	r30, r4
    16f4:	87 a7       	std	Z+47, r24	; 0x2f
    16f6:	90 ab       	std	Z+48, r25	; 0x30
    16f8:	a1 ab       	std	Z+49, r26	; 0x31
    16fa:	b2 ab       	std	Z+50, r27	; 0x32
  // Admittedly, this looks like it's overcomplicated. Why store three 32-bit
  // values if storing an axis number would be fully sufficient? Well, I'm not
  // sure, but my feeling says that when we achieve true circles and Beziers,
  // we'll have total_steps which matches neither of X, Y, Z or E. Accordingly,
  // keep it for now. --Traumflug
  for (i = X; i < AXIS_COUNT; i++) {
    16fc:	1f 5f       	subi	r17, 0xFF	; 255
    16fe:	6f 5f       	subi	r22, 0xFF	; 255
    1700:	7f 4f       	sbci	r23, 0xFF	; 255
    1702:	64 30       	cpi	r22, 0x04	; 4
    1704:	71 05       	cpc	r23, r1
    1706:	09 f0       	breq	.+2      	; 0x170a <dda_create+0x416>
    1708:	ac cf       	rjmp	.-168    	; 0x1662 <dda_create+0x36e>
  }

	if (DEBUG_DDA && (debug_flags & DEBUG_DDA))
    sersendf_P(PSTR(" [ts:%lu"), dda->total_steps);

	if (dda->total_steps == 0) {
    170a:	f2 01       	movw	r30, r4
    170c:	87 a1       	ldd	r24, Z+39	; 0x27
    170e:	90 a5       	ldd	r25, Z+40	; 0x28
    1710:	a1 a5       	ldd	r26, Z+41	; 0x29
    1712:	b2 a5       	ldd	r27, Z+42	; 0x2a
    1714:	00 97       	sbiw	r24, 0x00	; 0
    1716:	a1 05       	cpc	r26, r1
    1718:	b1 05       	cpc	r27, r1
    171a:	21 f4       	brne	.+8      	; 0x1724 <dda_create+0x430>
		dda->nullmove = 1;
    171c:	85 89       	ldd	r24, Z+21	; 0x15
    171e:	81 60       	ori	r24, 0x01	; 1
    1720:	85 8b       	std	Z+21, r24	; 0x15
    1722:	e5 c1       	rjmp	.+970    	; 0x1aee <dda_create+0x7fa>
	}
	else {
		// get steppers ready to go
		power_on();
    1724:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <power_on>
		stepper_enable();
		x_enable();
    1728:	5f 98       	cbi	0x0b, 7	; 11
		y_enable();
    172a:	8a 98       	cbi	0x11, 2	; 17
		// Z is enabled in dda_start()
		e_enable();
    172c:	12 98       	cbi	0x02, 2	; 2

		// since it's unusual to combine X, Y and Z changes in a single move on reprap, check if we can use simpler approximations before trying the full 3d approximation.
		if (delta_um[Z] == 0)
    172e:	e9 84       	ldd	r14, Y+9	; 0x09
    1730:	fa 84       	ldd	r15, Y+10	; 0x0a
    1732:	0b 85       	ldd	r16, Y+11	; 0x0b
    1734:	1c 85       	ldd	r17, Y+12	; 0x0c
    1736:	e9 8e       	std	Y+25, r14	; 0x19
    1738:	fa 8e       	std	Y+26, r15	; 0x1a
    173a:	0b 8f       	std	Y+27, r16	; 0x1b
    173c:	1c 8f       	std	Y+28, r17	; 0x1c
    173e:	e9 80       	ldd	r14, Y+1	; 0x01
    1740:	fa 80       	ldd	r15, Y+2	; 0x02
    1742:	0b 81       	ldd	r16, Y+3	; 0x03
    1744:	1c 81       	ldd	r17, Y+4	; 0x04
    1746:	89 8d       	ldd	r24, Y+25	; 0x19
    1748:	9a 8d       	ldd	r25, Y+26	; 0x1a
    174a:	ab 8d       	ldd	r26, Y+27	; 0x1b
    174c:	bc 8d       	ldd	r27, Y+28	; 0x1c
    174e:	00 97       	sbiw	r24, 0x00	; 0
    1750:	a1 05       	cpc	r26, r1
    1752:	b1 05       	cpc	r27, r1
    1754:	49 f4       	brne	.+18     	; 0x1768 <dda_create+0x474>
			distance = approx_distance(delta_um[X], delta_um[Y]);
    1756:	2d 81       	ldd	r18, Y+5	; 0x05
    1758:	3e 81       	ldd	r19, Y+6	; 0x06
    175a:	4f 81       	ldd	r20, Y+7	; 0x07
    175c:	58 85       	ldd	r21, Y+8	; 0x08
    175e:	c8 01       	movw	r24, r16
    1760:	b7 01       	movw	r22, r14
    1762:	0e 94 b7 12 	call	0x256e	; 0x256e <approx_distance>
    1766:	19 c0       	rjmp	.+50     	; 0x179a <dda_create+0x4a6>
		else if (delta_um[X] == 0 && delta_um[Y] == 0)
    1768:	e1 14       	cp	r14, r1
    176a:	f1 04       	cpc	r15, r1
    176c:	01 05       	cpc	r16, r1
    176e:	11 05       	cpc	r17, r1
    1770:	41 f4       	brne	.+16     	; 0x1782 <dda_create+0x48e>
    1772:	8d 81       	ldd	r24, Y+5	; 0x05
    1774:	9e 81       	ldd	r25, Y+6	; 0x06
    1776:	af 81       	ldd	r26, Y+7	; 0x07
    1778:	b8 85       	ldd	r27, Y+8	; 0x08
    177a:	00 97       	sbiw	r24, 0x00	; 0
    177c:	a1 05       	cpc	r26, r1
    177e:	b1 05       	cpc	r27, r1
    1780:	81 f0       	breq	.+32     	; 0x17a2 <dda_create+0x4ae>
			distance = delta_um[Z];
		else
			distance = approx_distance_3(delta_um[X], delta_um[Y], delta_um[Z]);
    1782:	2d 81       	ldd	r18, Y+5	; 0x05
    1784:	3e 81       	ldd	r19, Y+6	; 0x06
    1786:	4f 81       	ldd	r20, Y+7	; 0x07
    1788:	58 85       	ldd	r21, Y+8	; 0x08
    178a:	c8 01       	movw	r24, r16
    178c:	b7 01       	movw	r22, r14
    178e:	e9 8c       	ldd	r14, Y+25	; 0x19
    1790:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1792:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1794:	1c 8d       	ldd	r17, Y+28	; 0x1c
    1796:	0e 94 2a 13 	call	0x2654	; 0x2654 <approx_distance_3>
    179a:	69 8f       	std	Y+25, r22	; 0x19
    179c:	7a 8f       	std	Y+26, r23	; 0x1a
    179e:	8b 8f       	std	Y+27, r24	; 0x1b
    17a0:	9c 8f       	std	Y+28, r25	; 0x1c

		if (distance < 2)
    17a2:	09 8d       	ldd	r16, Y+25	; 0x19
    17a4:	1a 8d       	ldd	r17, Y+26	; 0x1a
    17a6:	2b 8d       	ldd	r18, Y+27	; 0x1b
    17a8:	3c 8d       	ldd	r19, Y+28	; 0x1c
    17aa:	02 30       	cpi	r16, 0x02	; 2
    17ac:	11 05       	cpc	r17, r1
    17ae:	21 05       	cpc	r18, r1
    17b0:	31 05       	cpc	r19, r1
    17b2:	40 f4       	brcc	.+16     	; 0x17c4 <dda_create+0x4d0>
			distance = delta_um[E];
    17b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    17b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    17b8:	af 85       	ldd	r26, Y+15	; 0x0f
    17ba:	b8 89       	ldd	r27, Y+16	; 0x10
    17bc:	89 8f       	std	Y+25, r24	; 0x19
    17be:	9a 8f       	std	Y+26, r25	; 0x1a
    17c0:	ab 8f       	std	Y+27, r26	; 0x1b
    17c2:	bc 8f       	std	Y+28, r27	; 0x1c
			// changed * 10 to * (F_CPU / 100000) so we can work in cpu_ticks rather than microseconds.
			// timer.c setTimer() routine altered for same reason

			// changed distance * 6000 .. * F_CPU / 100000 to
			//         distance * 2400 .. * F_CPU / 40000 so we can move a distance of up to 1800mm without overflowing
			uint32_t move_duration = ((distance * 2400) / dda->total_steps) * (F_CPU / 40000);
    17c4:	d2 01       	movw	r26, r4
    17c6:	97 96       	adiw	r26, 0x27	; 39
    17c8:	ed 90       	ld	r14, X+
    17ca:	fd 90       	ld	r15, X+
    17cc:	0d 91       	ld	r16, X+
    17ce:	1c 91       	ld	r17, X
    17d0:	9a 97       	sbiw	r26, 0x2a	; 42
    17d2:	e9 8a       	std	Y+17, r14	; 0x11
    17d4:	fa 8a       	std	Y+18, r15	; 0x12
    17d6:	0b 8b       	std	Y+19, r16	; 0x13
    17d8:	1c 8b       	std	Y+20, r17	; 0x14
    17da:	69 8d       	ldd	r22, Y+25	; 0x19
    17dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17e2:	20 e6       	ldi	r18, 0x60	; 96
    17e4:	39 e0       	ldi	r19, 0x09	; 9
    17e6:	40 e0       	ldi	r20, 0x00	; 0
    17e8:	50 e0       	ldi	r21, 0x00	; 0
    17ea:	0e 94 f7 22 	call	0x45ee	; 0x45ee <__mulsi3>
    17ee:	a8 01       	movw	r20, r16
    17f0:	97 01       	movw	r18, r14
    17f2:	0e 94 2a 23 	call	0x4654	; 0x4654 <__udivmodsi4>
    17f6:	ca 01       	movw	r24, r20
    17f8:	b9 01       	movw	r22, r18
    17fa:	20 e9       	ldi	r18, 0x90	; 144
    17fc:	31 e0       	ldi	r19, 0x01	; 1
    17fe:	40 e0       	ldi	r20, 0x00	; 0
    1800:	50 e0       	ldi	r21, 0x00	; 0
    1802:	0e 94 f7 22 	call	0x45ee	; 0x45ee <__mulsi3>
    1806:	6d 8b       	std	Y+21, r22	; 0x15
    1808:	7e 8b       	std	Y+22, r23	; 0x16
    180a:	8f 8b       	std	Y+23, r24	; 0x17
    180c:	98 8f       	std	Y+24, r25	; 0x18
    180e:	aa 24       	eor	r10, r10
    1810:	bb 24       	eor	r11, r11
    1812:	65 01       	movw	r12, r10
    1814:	77 24       	eor	r7, r7
    1816:	88 24       	eor	r8, r8
    1818:	99 24       	eor	r9, r9
    //       allowed F easier.
    c_limit = 0;
    for (i = X; i < AXIS_COUNT; i++) {
      c_limit_calc = (delta_um[i] * 2400L) /
                     dda->total_steps * (F_CPU / 40000) /
                     pgm_read_dword(&maximum_feedrate_P[i]);
    181a:	a7 2d       	mov	r26, r7
    181c:	b0 e0       	ldi	r27, 0x00	; 0
    181e:	aa 0f       	add	r26, r26
    1820:	bb 1f       	adc	r27, r27
    1822:	aa 0f       	add	r26, r26
    1824:	bb 1f       	adc	r27, r27
    1826:	cd 01       	movw	r24, r26
    1828:	8e 52       	subi	r24, 0x2E	; 46
    182a:	9e 4f       	sbci	r25, 0xFE	; 254
    182c:	fc 01       	movw	r30, r24
    182e:	e5 90       	lpm	r14, Z+
    1830:	f5 90       	lpm	r15, Z+
    1832:	05 91       	lpm	r16, Z+
    1834:	14 91       	lpm	r17, Z+
    1836:	ac 0f       	add	r26, r28
    1838:	bd 1f       	adc	r27, r29
    183a:	11 96       	adiw	r26, 0x01	; 1
    183c:	6d 91       	ld	r22, X+
    183e:	7d 91       	ld	r23, X+
    1840:	8d 91       	ld	r24, X+
    1842:	9c 91       	ld	r25, X
    1844:	14 97       	sbiw	r26, 0x04	; 4
    1846:	20 e6       	ldi	r18, 0x60	; 96
    1848:	39 e0       	ldi	r19, 0x09	; 9
    184a:	40 e0       	ldi	r20, 0x00	; 0
    184c:	50 e0       	ldi	r21, 0x00	; 0
    184e:	0e 94 f7 22 	call	0x45ee	; 0x45ee <__mulsi3>
    1852:	29 89       	ldd	r18, Y+17	; 0x11
    1854:	3a 89       	ldd	r19, Y+18	; 0x12
    1856:	4b 89       	ldd	r20, Y+19	; 0x13
    1858:	5c 89       	ldd	r21, Y+20	; 0x14
    185a:	0e 94 2a 23 	call	0x4654	; 0x4654 <__udivmodsi4>
    185e:	ca 01       	movw	r24, r20
    1860:	b9 01       	movw	r22, r18
    1862:	20 e9       	ldi	r18, 0x90	; 144
    1864:	31 e0       	ldi	r19, 0x01	; 1
    1866:	40 e0       	ldi	r20, 0x00	; 0
    1868:	50 e0       	ldi	r21, 0x00	; 0
    186a:	0e 94 f7 22 	call	0x45ee	; 0x45ee <__mulsi3>
    186e:	a8 01       	movw	r20, r16
    1870:	97 01       	movw	r18, r14
    1872:	0e 94 2a 23 	call	0x4654	; 0x4654 <__udivmodsi4>
    1876:	a2 16       	cp	r10, r18
    1878:	b3 06       	cpc	r11, r19
    187a:	c4 06       	cpc	r12, r20
    187c:	d5 06       	cpc	r13, r21
    187e:	10 f4       	brcc	.+4      	; 0x1884 <dda_create+0x590>
    1880:	59 01       	movw	r10, r18
    1882:	6a 01       	movw	r12, r20
    // TODO: instead of calculating c_min directly, it's probably more simple
    //       to calculate (maximum) move_duration for each axis, like done for
    //       ACCELERATION_TEMPORAL above. This should make re-calculating the
    //       allowed F easier.
    c_limit = 0;
    for (i = X; i < AXIS_COUNT; i++) {
    1884:	73 94       	inc	r7
    1886:	08 94       	sec
    1888:	81 1c       	adc	r8, r1
    188a:	91 1c       	adc	r9, r1
    188c:	f4 e0       	ldi	r31, 0x04	; 4
    188e:	8f 16       	cp	r8, r31
    1890:	91 04       	cpc	r9, r1
    1892:	09 f0       	breq	.+2      	; 0x1896 <dda_create+0x5a2>
    1894:	c2 cf       	rjmp	.-124    	; 0x181a <dda_create+0x526>
		}
		else
			dda->accel = 0;
		#elif defined ACCELERATION_RAMPING
			// yes, this assumes always the x axis as the critical one regarding acceleration. If we want to implement per-axis acceleration, things get tricky ...
      dda->c_min = move_duration / target->F;
    1896:	d1 01       	movw	r26, r2
    1898:	50 96       	adiw	r26, 0x10	; 16
    189a:	2d 91       	ld	r18, X+
    189c:	3d 91       	ld	r19, X+
    189e:	4d 91       	ld	r20, X+
    18a0:	5c 91       	ld	r21, X
    18a2:	53 97       	sbiw	r26, 0x13	; 19
    18a4:	6d 89       	ldd	r22, Y+21	; 0x15
    18a6:	7e 89       	ldd	r23, Y+22	; 0x16
    18a8:	8f 89       	ldd	r24, Y+23	; 0x17
    18aa:	98 8d       	ldd	r25, Y+24	; 0x18
    18ac:	0e 94 2a 23 	call	0x4654	; 0x4654 <__udivmodsi4>
    18b0:	c9 01       	movw	r24, r18
    18b2:	da 01       	movw	r26, r20
    18b4:	f2 01       	movw	r30, r4
    18b6:	ed 5b       	subi	r30, 0xBD	; 189
    18b8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ba:	80 83       	st	Z, r24
    18bc:	91 83       	std	Z+1, r25	; 0x01
    18be:	a2 83       	std	Z+2, r26	; 0x02
    18c0:	b3 83       	std	Z+3, r27	; 0x03
      if (dda->c_min < c_limit) {
    18c2:	8a 15       	cp	r24, r10
    18c4:	9b 05       	cpc	r25, r11
    18c6:	ac 05       	cpc	r26, r12
    18c8:	bd 05       	cpc	r27, r13
    18ca:	88 f4       	brcc	.+34     	; 0x18ee <dda_create+0x5fa>
        dda->c_min = c_limit;
    18cc:	a0 82       	st	Z, r10
    18ce:	b1 82       	std	Z+1, r11	; 0x01
    18d0:	c2 82       	std	Z+2, r12	; 0x02
    18d2:	d3 82       	std	Z+3, r13	; 0x03
        dda->endpoint.F = move_duration / dda->c_min;
    18d4:	6d 89       	ldd	r22, Y+21	; 0x15
    18d6:	7e 89       	ldd	r23, Y+22	; 0x16
    18d8:	8f 89       	ldd	r24, Y+23	; 0x17
    18da:	98 8d       	ldd	r25, Y+24	; 0x18
    18dc:	a6 01       	movw	r20, r12
    18de:	95 01       	movw	r18, r10
    18e0:	0e 94 2a 23 	call	0x4654	; 0x4654 <__udivmodsi4>
    18e4:	f2 01       	movw	r30, r4
    18e6:	20 8b       	std	Z+16, r18	; 0x10
    18e8:	31 8b       	std	Z+17, r19	; 0x11
    18ea:	42 8b       	std	Z+18, r20	; 0x12
    18ec:	53 8b       	std	Z+19, r21	; 0x13
      }

      // Lookahead can deal with 16 bits ( = 1092 mm/s), only.
      if (dda->endpoint.F > 65535)
    18ee:	f2 01       	movw	r30, r4
    18f0:	80 89       	ldd	r24, Z+16	; 0x10
    18f2:	91 89       	ldd	r25, Z+17	; 0x11
    18f4:	a2 89       	ldd	r26, Z+18	; 0x12
    18f6:	b3 89       	ldd	r27, Z+19	; 0x13
    18f8:	80 50       	subi	r24, 0x00	; 0
    18fa:	90 40       	sbci	r25, 0x00	; 0
    18fc:	a1 40       	sbci	r26, 0x01	; 1
    18fe:	b0 40       	sbci	r27, 0x00	; 0
    1900:	48 f0       	brcs	.+18     	; 0x1914 <dda_create+0x620>
        dda->endpoint.F = 65535;
    1902:	8f ef       	ldi	r24, 0xFF	; 255
    1904:	9f ef       	ldi	r25, 0xFF	; 255
    1906:	a0 e0       	ldi	r26, 0x00	; 0
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	f2 01       	movw	r30, r4
    190c:	80 8b       	std	Z+16, r24	; 0x10
    190e:	91 8b       	std	Z+17, r25	; 0x11
    1910:	a2 8b       	std	Z+18, r26	; 0x12
    1912:	b3 8b       	std	Z+19, r27	; 0x13

      // Acceleration ramps are based on the fast axis, not the combined speed.
      dda->rampup_steps =
    1914:	d2 01       	movw	r26, r4
    1916:	50 96       	adiw	r26, 0x10	; 16
    1918:	ed 90       	ld	r14, X+
    191a:	fd 90       	ld	r15, X+
    191c:	0d 91       	ld	r16, X+
    191e:	1c 91       	ld	r17, X
    1920:	53 97       	sbiw	r26, 0x13	; 19

// return rounded result of multiplicand * multiplier / divisor
static int32_t muldiv(int32_t, uint32_t, uint32_t) __attribute__ ((always_inline));
inline int32_t muldiv(int32_t multiplicand, uint32_t multiplier,
                      uint32_t divisor) {
  return muldivQR(multiplicand, multiplier / divisor,
    1922:	9b 96       	adiw	r26, 0x2b	; 43
    1924:	6d 90       	ld	r6, X+
    1926:	7d 90       	ld	r7, X+
    1928:	8d 90       	ld	r8, X+
    192a:	9c 90       	ld	r9, X
    192c:	9e 97       	sbiw	r26, 0x2e	; 46
    192e:	c8 01       	movw	r24, r16
    1930:	b7 01       	movw	r22, r14
    1932:	29 8d       	ldd	r18, Y+25	; 0x19
    1934:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1936:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1938:	5c 8d       	ldd	r21, Y+28	; 0x1c
    193a:	0e 94 2a 23 	call	0x4654	; 0x4654 <__udivmodsi4>
    193e:	7b 01       	movw	r14, r22
    1940:	8c 01       	movw	r16, r24
    1942:	c4 01       	movw	r24, r8
    1944:	b3 01       	movw	r22, r6
    1946:	a9 8c       	ldd	r10, Y+25	; 0x19
    1948:	ba 8c       	ldd	r11, Y+26	; 0x1a
    194a:	cb 8c       	ldd	r12, Y+27	; 0x1b
    194c:	dc 8c       	ldd	r13, Y+28	; 0x1c
    194e:	0e 94 2b 12 	call	0x2456	; 0x2456 <muldivQR>
    1952:	f2 01       	movw	r30, r4
    1954:	27 a5       	ldd	r18, Z+47	; 0x2f
    1956:	30 a9       	ldd	r19, Z+48	; 0x30
    1958:	41 a9       	ldd	r20, Z+49	; 0x31
    195a:	52 a9       	ldd	r21, Z+50	; 0x32
    195c:	0e 94 3e 14 	call	0x287c	; 0x287c <acc_ramp_len>
    1960:	d2 01       	movw	r26, r4
    1962:	db 96       	adiw	r26, 0x3b	; 59
    1964:	6d 93       	st	X+, r22
    1966:	7d 93       	st	X+, r23
    1968:	8d 93       	st	X+, r24
    196a:	9c 93       	st	X, r25
    196c:	de 97       	sbiw	r26, 0x3e	; 62
        acc_ramp_len(muldiv(dda->fast_um, dda->endpoint.F, distance),
                     dda->fast_spm);

      if (dda->rampup_steps > dda->total_steps / 2)
    196e:	97 96       	adiw	r26, 0x27	; 39
    1970:	2d 91       	ld	r18, X+
    1972:	3d 91       	ld	r19, X+
    1974:	4d 91       	ld	r20, X+
    1976:	5c 91       	ld	r21, X
    1978:	9a 97       	sbiw	r26, 0x2a	; 42
    197a:	56 95       	lsr	r21
    197c:	47 95       	ror	r20
    197e:	37 95       	ror	r19
    1980:	27 95       	ror	r18
    1982:	26 17       	cp	r18, r22
    1984:	37 07       	cpc	r19, r23
    1986:	48 07       	cpc	r20, r24
    1988:	59 07       	cpc	r21, r25
    198a:	28 f4       	brcc	.+10     	; 0x1996 <dda_create+0x6a2>
        dda->rampup_steps = dda->total_steps / 2;
    198c:	f2 01       	movw	r30, r4
    198e:	23 af       	std	Z+59, r18	; 0x3b
    1990:	34 af       	std	Z+60, r19	; 0x3c
    1992:	45 af       	std	Z+61, r20	; 0x3d
    1994:	56 af       	std	Z+62, r21	; 0x3e
      dda->rampdown_steps = dda->total_steps - dda->rampup_steps;
    1996:	f2 01       	movw	r30, r4
    1998:	87 a1       	ldd	r24, Z+39	; 0x27
    199a:	90 a5       	ldd	r25, Z+40	; 0x28
    199c:	a1 a5       	ldd	r26, Z+41	; 0x29
    199e:	b2 a5       	ldd	r27, Z+42	; 0x2a
    19a0:	23 ad       	ldd	r18, Z+59	; 0x3b
    19a2:	34 ad       	ldd	r19, Z+60	; 0x3c
    19a4:	45 ad       	ldd	r20, Z+61	; 0x3d
    19a6:	56 ad       	ldd	r21, Z+62	; 0x3e
    19a8:	82 1b       	sub	r24, r18
    19aa:	93 0b       	sbc	r25, r19
    19ac:	a4 0b       	sbc	r26, r20
    19ae:	b5 0b       	sbc	r27, r21
    19b0:	3f e3       	ldi	r19, 0x3F	; 63
    19b2:	e3 2e       	mov	r14, r19
    19b4:	f1 2c       	mov	r15, r1
    19b6:	4e 0c       	add	r4, r14
    19b8:	5f 1c       	adc	r5, r15
    19ba:	f2 01       	movw	r30, r4
    19bc:	80 83       	st	Z, r24
    19be:	91 83       	std	Z+1, r25	; 0x01
    19c0:	a2 83       	std	Z+2, r26	; 0x02
    19c2:	b3 83       	std	Z+3, r27	; 0x03

      #ifdef LOOKAHEAD
        dda->distance = distance;
    19c4:	28 e0       	ldi	r18, 0x08	; 8
    19c6:	e2 2e       	mov	r14, r18
    19c8:	f1 2c       	mov	r15, r1
    19ca:	4e 0c       	add	r4, r14
    19cc:	5f 1c       	adc	r5, r15
    19ce:	09 8d       	ldd	r16, Y+25	; 0x19
    19d0:	1a 8d       	ldd	r17, Y+26	; 0x1a
    19d2:	2b 8d       	ldd	r18, Y+27	; 0x1b
    19d4:	3c 8d       	ldd	r19, Y+28	; 0x1c
    19d6:	d2 01       	movw	r26, r4
    19d8:	0d 93       	st	X+, r16
    19da:	1d 93       	st	X+, r17
    19dc:	2d 93       	st	X+, r18
    19de:	3c 93       	st	X, r19
    19e0:	13 97       	sbiw	r26, 0x03	; 3
    19e2:	e9 eb       	ldi	r30, 0xB9	; 185
    19e4:	ff ef       	ldi	r31, 0xFF	; 255
    19e6:	4e 0e       	add	r4, r30
    19e8:	5f 1e       	adc	r5, r31
        dda_find_crossing_speed(prev_dda, dda);
    19ea:	80 91 95 02 	lds	r24, 0x0295
    19ee:	90 91 96 02 	lds	r25, 0x0296
    19f2:	b2 01       	movw	r22, r4
    19f4:	0e 94 0e 10 	call	0x201c	; 0x201c <dda_find_crossing_speed>
        // TODO: this should become a reverse-stepping through the existing
        //       movement queue to allow higher speeds for short moves.
        //       dda_find_crossing_speed() is required only once.
        dda_join_moves(prev_dda, dda);
    19f8:	80 91 95 02 	lds	r24, 0x0295
    19fc:	90 91 96 02 	lds	r25, 0x0296
    1a00:	b2 01       	movw	r22, r4
    1a02:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <dda_join_moves>
        dda->n = dda->start_steps;
    1a06:	9f e4       	ldi	r25, 0x4F	; 79
    1a08:	e9 2e       	mov	r14, r25
    1a0a:	f1 2c       	mov	r15, r1
    1a0c:	4e 0c       	add	r4, r14
    1a0e:	5f 1c       	adc	r5, r15
    1a10:	d2 01       	movw	r26, r4
    1a12:	2d 91       	ld	r18, X+
    1a14:	3d 91       	ld	r19, X+
    1a16:	4d 91       	ld	r20, X+
    1a18:	5c 91       	ld	r21, X
    1a1a:	e1 eb       	ldi	r30, 0xB1	; 177
    1a1c:	ff ef       	ldi	r31, 0xFF	; 255
    1a1e:	4e 0e       	add	r4, r30
    1a20:	5f 1e       	adc	r5, r31
    1a22:	d2 01       	movw	r26, r4
    1a24:	d7 96       	adiw	r26, 0x37	; 55
    1a26:	2d 93       	st	X+, r18
    1a28:	3d 93       	st	X+, r19
    1a2a:	4d 93       	st	X+, r20
    1a2c:	5c 93       	st	X, r21
    1a2e:	da 97       	sbiw	r26, 0x3a	; 58
    1a30:	f2 01       	movw	r30, r4
    1a32:	e8 59       	subi	r30, 0x98	; 152
    1a34:	ff 4f       	sbci	r31, 0xFF	; 255
        if (dda->n == 0)
    1a36:	21 15       	cp	r18, r1
    1a38:	31 05       	cpc	r19, r1
    1a3a:	41 05       	cpc	r20, r1
    1a3c:	51 05       	cpc	r21, r1
    1a3e:	99 f4       	brne	.+38     	; 0x1a66 <dda_create+0x772>
          dda->c = pgm_read_dword(&c0_P[dda->fast_axis]);
    1a40:	80 81       	ld	r24, Z
    1a42:	e8 2f       	mov	r30, r24
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	ee 0f       	add	r30, r30
    1a48:	ff 1f       	adc	r31, r31
    1a4a:	ee 0f       	add	r30, r30
    1a4c:	ff 1f       	adc	r31, r31
    1a4e:	ee 54       	subi	r30, 0x4E	; 78
    1a50:	fe 4f       	sbci	r31, 0xFE	; 254
    1a52:	85 91       	lpm	r24, Z+
    1a54:	95 91       	lpm	r25, Z+
    1a56:	a5 91       	lpm	r26, Z+
    1a58:	b4 91       	lpm	r27, Z+
    1a5a:	f2 01       	movw	r30, r4
    1a5c:	83 ab       	std	Z+51, r24	; 0x33
    1a5e:	94 ab       	std	Z+52, r25	; 0x34
    1a60:	a5 ab       	std	Z+53, r26	; 0x35
    1a62:	b6 ab       	std	Z+54, r27	; 0x36
    1a64:	26 c0       	rjmp	.+76     	; 0x1ab2 <dda_create+0x7be>
        else
          dda->c = (pgm_read_dword(&c0_P[dda->fast_axis]) *
    1a66:	80 81       	ld	r24, Z
    1a68:	e8 2f       	mov	r30, r24
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	ee 0f       	add	r30, r30
    1a6e:	ff 1f       	adc	r31, r31
    1a70:	ee 0f       	add	r30, r30
    1a72:	ff 1f       	adc	r31, r31
    1a74:	ee 54       	subi	r30, 0x4E	; 78
    1a76:	fe 4f       	sbci	r31, 0xFE	; 254
    1a78:	e5 90       	lpm	r14, Z+
    1a7a:	f5 90       	lpm	r15, Z+
    1a7c:	05 91       	lpm	r16, Z+
    1a7e:	14 91       	lpm	r17, Z+
    1a80:	c9 01       	movw	r24, r18
    1a82:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <int_inv_sqrt>
    1a86:	a0 e0       	ldi	r26, 0x00	; 0
    1a88:	b0 e0       	ldi	r27, 0x00	; 0
    1a8a:	bc 01       	movw	r22, r24
    1a8c:	cd 01       	movw	r24, r26
    1a8e:	a8 01       	movw	r20, r16
    1a90:	97 01       	movw	r18, r14
    1a92:	0e 94 f7 22 	call	0x45ee	; 0x45ee <__mulsi3>
    1a96:	ad e0       	ldi	r26, 0x0D	; 13
    1a98:	96 95       	lsr	r25
    1a9a:	87 95       	ror	r24
    1a9c:	77 95       	ror	r23
    1a9e:	67 95       	ror	r22
    1aa0:	aa 95       	dec	r26
    1aa2:	d1 f7       	brne	.-12     	; 0x1a98 <dda_create+0x7a4>
    1aa4:	d2 01       	movw	r26, r4
    1aa6:	d3 96       	adiw	r26, 0x33	; 51
    1aa8:	6d 93       	st	X+, r22
    1aaa:	7d 93       	st	X+, r23
    1aac:	8d 93       	st	X+, r24
    1aae:	9c 93       	st	X, r25
    1ab0:	d6 97       	sbiw	r26, 0x36	; 54
                    int_inv_sqrt(dda->n)) >> 13;
        if (dda->c < dda->c_min)
    1ab2:	e3 e4       	ldi	r30, 0x43	; 67
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	4e 0e       	add	r4, r30
    1ab8:	5f 1e       	adc	r5, r31
    1aba:	d2 01       	movw	r26, r4
    1abc:	2d 91       	ld	r18, X+
    1abe:	3d 91       	ld	r19, X+
    1ac0:	4d 91       	ld	r20, X+
    1ac2:	5c 91       	ld	r21, X
    1ac4:	ed eb       	ldi	r30, 0xBD	; 189
    1ac6:	ff ef       	ldi	r31, 0xFF	; 255
    1ac8:	4e 0e       	add	r4, r30
    1aca:	5f 1e       	adc	r5, r31
    1acc:	f2 01       	movw	r30, r4
    1ace:	83 a9       	ldd	r24, Z+51	; 0x33
    1ad0:	94 a9       	ldd	r25, Z+52	; 0x34
    1ad2:	a5 a9       	ldd	r26, Z+53	; 0x35
    1ad4:	b6 a9       	ldd	r27, Z+54	; 0x36
    1ad6:	82 17       	cp	r24, r18
    1ad8:	93 07       	cpc	r25, r19
    1ada:	a4 07       	cpc	r26, r20
    1adc:	b5 07       	cpc	r27, r21
    1ade:	38 f4       	brcc	.+14     	; 0x1aee <dda_create+0x7fa>
          dda->c = dda->c_min;
    1ae0:	d2 01       	movw	r26, r4
    1ae2:	d3 96       	adiw	r26, 0x33	; 51
    1ae4:	2d 93       	st	X+, r18
    1ae6:	3d 93       	st	X+, r19
    1ae8:	4d 93       	st	X+, r20
    1aea:	5c 93       	st	X, r21
    1aec:	d6 97       	sbiw	r26, 0x36	; 54

	if (DEBUG_DDA && (debug_flags & DEBUG_DDA))
		serial_writestr_P(PSTR("] }\n"));

	// next dda starts where we finish
	memcpy(&startpoint, target, sizeof(TARGET));
    1aee:	a8 e2       	ldi	r26, 0x28	; 40
    1af0:	b2 e0       	ldi	r27, 0x02	; 2
    1af2:	f1 01       	movw	r30, r2
    1af4:	85 e1       	ldi	r24, 0x15	; 21
    1af6:	01 90       	ld	r0, Z+
    1af8:	0d 92       	st	X+, r0
    1afa:	81 50       	subi	r24, 0x01	; 1
    1afc:	e1 f7       	brne	.-8      	; 0x1af6 <dda_create+0x802>
  #ifdef LOOKAHEAD
    prev_dda = dda;
    1afe:	50 92 96 02 	sts	0x0296, r5
    1b02:	40 92 95 02 	sts	0x0295, r4
  #endif
}
    1b06:	6c 96       	adiw	r28, 0x1c	; 28
    1b08:	e2 e1       	ldi	r30, 0x12	; 18
    1b0a:	0c 94 83 23 	jmp	0x4706	; 0x4706 <__epilogue_restores__>

00001b0e <dda_join_moves>:
 * constant while this function is running.
 *
 * Note: the planner always makes sure the movement can be stopped within the
 * last move (= 'current'); as a result a lot of small moves will still limit the speed.
 */
void dda_join_moves(DDA *prev, DDA *current) {
    1b0e:	a4 e2       	ldi	r26, 0x24	; 36
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	ed e8       	ldi	r30, 0x8D	; 141
    1b14:	fd e0       	ldi	r31, 0x0D	; 13
    1b16:	0c 94 67 23 	jmp	0x46ce	; 0x46ce <__prologue_saves__>
    1b1a:	9c a3       	std	Y+36, r25	; 0x24
    1b1c:	8b a3       	std	Y+35, r24	; 0x23
    1b1e:	78 8f       	std	Y+24, r23	; 0x18
    1b20:	6f 8b       	std	Y+23, r22	; 0x17
  static uint32_t moveno = 0;     // Debug counter to number the moves - helps while debugging
  moveno++;
  #endif

  // Bail out if there's nothing to join (e.g. G1 F1500).
  if ( ! prev || prev->nullmove || current->crossF == 0)
    1b22:	00 97       	sbiw	r24, 0x00	; 0
    1b24:	09 f4       	brne	.+2      	; 0x1b28 <dda_join_moves+0x1a>
    1b26:	76 c2       	rjmp	.+1260   	; 0x2014 <dda_join_moves+0x506>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	55 96       	adiw	r26, 0x15	; 21
    1b2c:	2c 91       	ld	r18, X
    1b2e:	20 fd       	sbrc	r18, 0
    1b30:	71 c2       	rjmp	.+1250   	; 0x2014 <dda_join_moves+0x506>
    1b32:	fb 01       	movw	r30, r22
    1b34:	e5 5b       	subi	r30, 0xB5	; 181
    1b36:	ff 4f       	sbci	r31, 0xFF	; 255
    1b38:	80 81       	ld	r24, Z
    1b3a:	91 81       	ldd	r25, Z+1	; 0x01
    1b3c:	a2 81       	ldd	r26, Z+2	; 0x02
    1b3e:	b3 81       	ldd	r27, Z+3	; 0x03
    1b40:	eb 54       	subi	r30, 0x4B	; 75
    1b42:	f0 40       	sbci	r31, 0x00	; 0
    1b44:	f8 8f       	std	Y+24, r31	; 0x18
    1b46:	ef 8b       	std	Y+23, r30	; 0x17
    1b48:	00 97       	sbiw	r24, 0x00	; 0
    1b4a:	a1 05       	cpc	r26, r1
    1b4c:	b1 05       	cpc	r27, r1
    1b4e:	09 f4       	brne	.+2      	; 0x1b52 <dda_join_moves+0x44>
    1b50:	61 c2       	rjmp	.+1218   	; 0x2014 <dda_join_moves+0x506>
    // Show the proposed crossing speed - this might get adjusted below.
    if (DEBUG_DDA && (debug_flags & DEBUG_DDA))
      sersendf_P(PSTR("Initial crossing speed: %lu\n"), current->crossF);

  // Make sure we have 2 moves and the previous move is not already active
  if (prev->live == 0) {
    1b52:	21 fd       	sbrc	r18, 1
    1b54:	5f c2       	rjmp	.+1214   	; 0x2014 <dda_join_moves+0x506>
    // Perform an atomic copy to preserve volatile parameters during the calculations
    ATOMIC_START
    1b56:	8f b7       	in	r24, 0x3f	; 63
    1b58:	f8 94       	cli
      prev_id = prev->id;
    1b5a:	0b a1       	ldd	r16, Y+35	; 0x23
    1b5c:	1c a1       	ldd	r17, Y+36	; 0x24
    1b5e:	09 59       	subi	r16, 0x99	; 153
    1b60:	1f 4f       	sbci	r17, 0xFF	; 255
    1b62:	d8 01       	movw	r26, r16
    1b64:	bc 91       	ld	r27, X
    1b66:	ba 87       	std	Y+10, r27	; 0x0a
    1b68:	07 56       	subi	r16, 0x67	; 103
    1b6a:	10 40       	sbci	r17, 0x00	; 0
      prev_F = prev->endpoint.F;
    1b6c:	f8 01       	movw	r30, r16
    1b6e:	e0 88       	ldd	r14, Z+16	; 0x10
    1b70:	f1 88       	ldd	r15, Z+17	; 0x11
    1b72:	02 89       	ldd	r16, Z+18	; 0x12
    1b74:	13 89       	ldd	r17, Z+19	; 0x13
      prev_F_start_in_steps = prev->start_steps;
    1b76:	e1 5b       	subi	r30, 0xB1	; 177
    1b78:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7a:	df 01       	movw	r26, r30
    1b7c:	20 80       	ld	r2, Z
    1b7e:	31 80       	ldd	r3, Z+1	; 0x01
    1b80:	42 80       	ldd	r4, Z+2	; 0x02
    1b82:	53 80       	ldd	r5, Z+3	; 0x03
    1b84:	2b 8a       	std	Y+19, r2	; 0x13
    1b86:	3c 8a       	std	Y+20, r3	; 0x14
    1b88:	4d 8a       	std	Y+21, r4	; 0x15
    1b8a:	5e 8a       	std	Y+22, r5	; 0x16
    1b8c:	af 54       	subi	r26, 0x4F	; 79
    1b8e:	b0 40       	sbci	r27, 0x00	; 0
    1b90:	bc a3       	std	Y+36, r27	; 0x24
    1b92:	ab a3       	std	Y+35, r26	; 0x23
      prev_F_end_in_steps = prev->end_steps;
      prev_rampup = prev->rampup_steps;
      prev_rampdown = prev->rampdown_steps;
      prev_total_steps = prev->total_steps;
    1b94:	97 96       	adiw	r26, 0x27	; 39
    1b96:	2d 90       	ld	r2, X+
    1b98:	3d 90       	ld	r3, X+
    1b9a:	4d 90       	ld	r4, X+
    1b9c:	5c 90       	ld	r5, X
    1b9e:	9a 97       	sbiw	r26, 0x2a	; 42
    1ba0:	2f 86       	std	Y+15, r2	; 0x0f
    1ba2:	38 8a       	std	Y+16, r3	; 0x10
    1ba4:	49 8a       	std	Y+17, r4	; 0x11
    1ba6:	5a 8a       	std	Y+18, r5	; 0x12
      crossF = current->crossF;
    1ba8:	ef 89       	ldd	r30, Y+23	; 0x17
    1baa:	f8 8d       	ldd	r31, Y+24	; 0x18
    1bac:	e5 5b       	subi	r30, 0xB5	; 181
    1bae:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb0:	df 01       	movw	r26, r30
    1bb2:	20 80       	ld	r2, Z
    1bb4:	31 80       	ldd	r3, Z+1	; 0x01
    1bb6:	42 80       	ldd	r4, Z+2	; 0x02
    1bb8:	53 80       	ldd	r5, Z+3	; 0x03
    1bba:	2b 86       	std	Y+11, r2	; 0x0b
    1bbc:	3c 86       	std	Y+12, r3	; 0x0c
    1bbe:	4d 86       	std	Y+13, r4	; 0x0d
    1bc0:	5e 86       	std	Y+14, r5	; 0x0e
      this_id = current->id;
    1bc2:	5c 96       	adiw	r26, 0x1c	; 28
    1bc4:	b8 8f       	std	Y+24, r27	; 0x18
    1bc6:	af 8b       	std	Y+23, r26	; 0x17
    1bc8:	bc 91       	ld	r27, X
    1bca:	b9 83       	std	Y+1, r27	; 0x01
    1bcc:	ef 89       	ldd	r30, Y+23	; 0x17
    1bce:	f8 8d       	ldd	r31, Y+24	; 0x18
    1bd0:	e7 56       	subi	r30, 0x67	; 103
    1bd2:	f0 40       	sbci	r31, 0x00	; 0
    1bd4:	f8 8f       	std	Y+24, r31	; 0x18
    1bd6:	ef 8b       	std	Y+23, r30	; 0x17
      this_F = current->endpoint.F;
      this_total_steps = current->total_steps;
    1bd8:	27 a0       	ldd	r2, Z+39	; 0x27
    1bda:	30 a4       	ldd	r3, Z+40	; 0x28
    1bdc:	41 a4       	ldd	r4, Z+41	; 0x29
    1bde:	52 a4       	ldd	r5, Z+42	; 0x2a
    1be0:	2a 82       	std	Y+2, r2	; 0x02
    1be2:	3b 82       	std	Y+3, r3	; 0x03
    1be4:	4c 82       	std	Y+4, r4	; 0x04
    1be6:	5d 82       	std	Y+5, r5	; 0x05
    ATOMIC_END
    1be8:	8f bf       	out	0x3f, r24	; 63
    // Along direction: F, crossF.
    // Along fast axis already: start_steps, end_steps.
    //
    // All calculations here are done along the fast axis, so recalculate
    // F and crossF to match this, too.
    prev_F = muldiv(prev->fast_um, prev_F, prev->distance);
    1bea:	eb a1       	ldd	r30, Y+35	; 0x23
    1bec:	fc a1       	ldd	r31, Y+36	; 0x24
    1bee:	e9 5b       	subi	r30, 0xB9	; 185
    1bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf2:	a0 80       	ld	r10, Z
    1bf4:	b1 80       	ldd	r11, Z+1	; 0x01
    1bf6:	c2 80       	ldd	r12, Z+2	; 0x02
    1bf8:	d3 80       	ldd	r13, Z+3	; 0x03
    1bfa:	e7 54       	subi	r30, 0x47	; 71
    1bfc:	f0 40       	sbci	r31, 0x00	; 0
    1bfe:	fc a3       	std	Y+36, r31	; 0x24
    1c00:	eb a3       	std	Y+35, r30	; 0x23
    1c02:	23 a4       	ldd	r2, Z+43	; 0x2b
    1c04:	34 a4       	ldd	r3, Z+44	; 0x2c
    1c06:	45 a4       	ldd	r4, Z+45	; 0x2d
    1c08:	56 a4       	ldd	r5, Z+46	; 0x2e
    1c0a:	c8 01       	movw	r24, r16
    1c0c:	b7 01       	movw	r22, r14
    1c0e:	a6 01       	movw	r20, r12
    1c10:	95 01       	movw	r18, r10
    1c12:	0e 94 2a 23 	call	0x4654	; 0x4654 <__udivmodsi4>
    1c16:	7b 01       	movw	r14, r22
    1c18:	8c 01       	movw	r16, r24
    1c1a:	c2 01       	movw	r24, r4
    1c1c:	b1 01       	movw	r22, r2
    1c1e:	0e 94 2b 12 	call	0x2456	; 0x2456 <muldivQR>
    1c22:	6f 8f       	std	Y+31, r22	; 0x1f
    1c24:	78 a3       	std	Y+32, r23	; 0x20
    1c26:	89 a3       	std	Y+33, r24	; 0x21
    1c28:	9a a3       	std	Y+34, r25	; 0x22
    this_F = muldiv(current->fast_um, current->endpoint.F, current->distance);
    1c2a:	af 89       	ldd	r26, Y+23	; 0x17
    1c2c:	b8 8d       	ldd	r27, Y+24	; 0x18
    1c2e:	50 96       	adiw	r26, 0x10	; 16
    1c30:	ed 90       	ld	r14, X+
    1c32:	fd 90       	ld	r15, X+
    1c34:	0d 91       	ld	r16, X+
    1c36:	1c 91       	ld	r17, X
    1c38:	53 97       	sbiw	r26, 0x13	; 19
    1c3a:	a9 5b       	subi	r26, 0xB9	; 185
    1c3c:	bf 4f       	sbci	r27, 0xFF	; 255
    1c3e:	ba 8f       	std	Y+26, r27	; 0x1a
    1c40:	a9 8f       	std	Y+25, r26	; 0x19
    1c42:	ad 90       	ld	r10, X+
    1c44:	bd 90       	ld	r11, X+
    1c46:	cd 90       	ld	r12, X+
    1c48:	dc 90       	ld	r13, X
    1c4a:	ef 89       	ldd	r30, Y+23	; 0x17
    1c4c:	f8 8d       	ldd	r31, Y+24	; 0x18
    1c4e:	23 a4       	ldd	r2, Z+43	; 0x2b
    1c50:	34 a4       	ldd	r3, Z+44	; 0x2c
    1c52:	45 a4       	ldd	r4, Z+45	; 0x2d
    1c54:	56 a4       	ldd	r5, Z+46	; 0x2e
    1c56:	c8 01       	movw	r24, r16
    1c58:	b7 01       	movw	r22, r14
    1c5a:	a6 01       	movw	r20, r12
    1c5c:	95 01       	movw	r18, r10
    1c5e:	0e 94 2a 23 	call	0x4654	; 0x4654 <__udivmodsi4>
    1c62:	7b 01       	movw	r14, r22
    1c64:	8c 01       	movw	r16, r24
    1c66:	c2 01       	movw	r24, r4
    1c68:	b1 01       	movw	r22, r2
    1c6a:	0e 94 2b 12 	call	0x2456	; 0x2456 <muldivQR>
    1c6e:	6b 8f       	std	Y+27, r22	; 0x1b
    1c70:	7c 8f       	std	Y+28, r23	; 0x1c
    1c72:	8d 8f       	std	Y+29, r24	; 0x1d
    1c74:	9e 8f       	std	Y+30, r25	; 0x1e
    crossF = muldiv(current->fast_um, crossF, current->distance);
    1c76:	a9 8d       	ldd	r26, Y+25	; 0x19
    1c78:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1c7a:	ad 90       	ld	r10, X+
    1c7c:	bd 90       	ld	r11, X+
    1c7e:	cd 90       	ld	r12, X+
    1c80:	dc 90       	ld	r13, X
    1c82:	ef 89       	ldd	r30, Y+23	; 0x17
    1c84:	f8 8d       	ldd	r31, Y+24	; 0x18
    1c86:	23 a4       	ldd	r2, Z+43	; 0x2b
    1c88:	34 a4       	ldd	r3, Z+44	; 0x2c
    1c8a:	45 a4       	ldd	r4, Z+45	; 0x2d
    1c8c:	56 a4       	ldd	r5, Z+46	; 0x2e
    1c8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c90:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c96:	a6 01       	movw	r20, r12
    1c98:	95 01       	movw	r18, r10
    1c9a:	0e 94 2a 23 	call	0x4654	; 0x4654 <__udivmodsi4>
    1c9e:	39 01       	movw	r6, r18
    1ca0:	4a 01       	movw	r8, r20
    1ca2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ca4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ca6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ca8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1caa:	a6 01       	movw	r20, r12
    1cac:	95 01       	movw	r18, r10
    1cae:	0e 94 2a 23 	call	0x4654	; 0x4654 <__udivmodsi4>
    1cb2:	7b 01       	movw	r14, r22
    1cb4:	8c 01       	movw	r16, r24
    1cb6:	c2 01       	movw	r24, r4
    1cb8:	b1 01       	movw	r22, r2
    1cba:	0e 94 2b 12 	call	0x2456	; 0x2456 <muldivQR>
    1cbe:	9b 01       	movw	r18, r22
    1cc0:	ac 01       	movw	r20, r24

    prev_F_in_steps = ACCELERATE_RAMP_LEN(prev_F);
    this_F_in_steps = ACCELERATE_RAMP_LEN(this_F);
    crossF_in_steps = ACCELERATE_RAMP_LEN(crossF);
    1cc2:	0e 94 f7 22 	call	0x45ee	; 0x45ee <__mulsi3>
    1cc6:	2c ef       	ldi	r18, 0xFC	; 252
    1cc8:	3a e0       	ldi	r19, 0x0A	; 10
    1cca:	40 e0       	ldi	r20, 0x00	; 0
    1ccc:	50 e0       	ldi	r21, 0x00	; 0
    1cce:	0e 94 2a 23 	call	0x4654	; 0x4654 <__udivmodsi4>
    1cd2:	c9 01       	movw	r24, r18
    1cd4:	da 01       	movw	r26, r20

    // Show the proposed crossing speed - this might get adjusted below
    serprintf(PSTR("Initial crossing speed: %lu\r\n"), crossF_in_steps);

    // Compute the maximum speed we can reach for crossing.
    crossF_in_steps = MIN(crossF_in_steps, this_total_steps);
    1cd6:	2f 85       	ldd	r18, Y+15	; 0x0f
    1cd8:	38 89       	ldd	r19, Y+16	; 0x10
    1cda:	49 89       	ldd	r20, Y+17	; 0x11
    1cdc:	5a 89       	ldd	r21, Y+18	; 0x12
    1cde:	2b 88       	ldd	r2, Y+19	; 0x13
    1ce0:	3c 88       	ldd	r3, Y+20	; 0x14
    1ce2:	4d 88       	ldd	r4, Y+21	; 0x15
    1ce4:	5e 88       	ldd	r5, Y+22	; 0x16
    1ce6:	22 0d       	add	r18, r2
    1ce8:	33 1d       	adc	r19, r3
    1cea:	44 1d       	adc	r20, r4
    1cec:	55 1d       	adc	r21, r5
    1cee:	ea 80       	ldd	r14, Y+2	; 0x02
    1cf0:	fb 80       	ldd	r15, Y+3	; 0x03
    1cf2:	0c 81       	ldd	r16, Y+4	; 0x04
    1cf4:	1d 81       	ldd	r17, Y+5	; 0x05
    1cf6:	e2 16       	cp	r14, r18
    1cf8:	f3 06       	cpc	r15, r19
    1cfa:	04 07       	cpc	r16, r20
    1cfc:	15 07       	cpc	r17, r21
    1cfe:	10 f4       	brcc	.+4      	; 0x1d04 <dda_join_moves+0x1f6>
    1d00:	a8 01       	movw	r20, r16
    1d02:	97 01       	movw	r18, r14
    crossF_in_steps = MIN(crossF_in_steps, prev_total_steps + prev_F_start_in_steps);
    1d04:	59 01       	movw	r10, r18
    1d06:	6a 01       	movw	r12, r20
    1d08:	82 17       	cp	r24, r18
    1d0a:	93 07       	cpc	r25, r19
    1d0c:	a4 07       	cpc	r26, r20
    1d0e:	b5 07       	cpc	r27, r21
    1d10:	10 f4       	brcc	.+4      	; 0x1d16 <dda_join_moves+0x208>
    1d12:	5c 01       	movw	r10, r24
    1d14:	6d 01       	movw	r12, r26

    if (crossF_in_steps == 0)
    1d16:	a1 14       	cp	r10, r1
    1d18:	b1 04       	cpc	r11, r1
    1d1a:	c1 04       	cpc	r12, r1
    1d1c:	d1 04       	cpc	r13, r1
    1d1e:	09 f4       	brne	.+2      	; 0x1d22 <dda_join_moves+0x214>
    1d20:	79 c1       	rjmp	.+754    	; 0x2014 <dda_join_moves+0x506>
    // F and crossF to match this, too.
    prev_F = muldiv(prev->fast_um, prev_F, prev->distance);
    this_F = muldiv(current->fast_um, current->endpoint.F, current->distance);
    crossF = muldiv(current->fast_um, crossF, current->distance);

    prev_F_in_steps = ACCELERATE_RAMP_LEN(prev_F);
    1d22:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1d24:	78 a1       	ldd	r23, Y+32	; 0x20
    1d26:	89 a1       	ldd	r24, Y+33	; 0x21
    1d28:	9a a1       	ldd	r25, Y+34	; 0x22
    1d2a:	9b 01       	movw	r18, r22
    1d2c:	ac 01       	movw	r20, r24
    1d2e:	0e 94 f7 22 	call	0x45ee	; 0x45ee <__mulsi3>
    1d32:	2c ef       	ldi	r18, 0xFC	; 252
    1d34:	3a e0       	ldi	r19, 0x0A	; 10
    1d36:	40 e0       	ldi	r20, 0x00	; 0
    1d38:	50 e0       	ldi	r21, 0x00	; 0
    1d3a:	0e 94 2a 23 	call	0x4654	; 0x4654 <__udivmodsi4>
    1d3e:	c9 01       	movw	r24, r18
    1d40:	da 01       	movw	r26, r20

    if (crossF_in_steps == 0)
      return;

    // Build ramps for previous move.
    if (crossF_in_steps == prev_F_in_steps) {
    1d42:	a8 16       	cp	r10, r24
    1d44:	b9 06       	cpc	r11, r25
    1d46:	ca 06       	cpc	r12, r26
    1d48:	db 06       	cpc	r13, r27
    1d4a:	71 f4       	brne	.+28     	; 0x1d68 <dda_join_moves+0x25a>
      prev_rampup = prev_F_in_steps - prev_F_start_in_steps;
    1d4c:	35 01       	movw	r6, r10
    1d4e:	46 01       	movw	r8, r12
    1d50:	0b 89       	ldd	r16, Y+19	; 0x13
    1d52:	1c 89       	ldd	r17, Y+20	; 0x14
    1d54:	2d 89       	ldd	r18, Y+21	; 0x15
    1d56:	3e 89       	ldd	r19, Y+22	; 0x16
    1d58:	60 1a       	sub	r6, r16
    1d5a:	71 0a       	sbc	r7, r17
    1d5c:	82 0a       	sbc	r8, r18
    1d5e:	93 0a       	sbc	r9, r19
    1d60:	22 24       	eor	r2, r2
    1d62:	33 24       	eor	r3, r3
    1d64:	21 01       	movw	r4, r2
    1d66:	5e c0       	rjmp	.+188    	; 0x1e24 <dda_join_moves+0x316>
      prev_rampdown = 0;
    }
    else if (crossF_in_steps < prev_F_start_in_steps) {
    1d68:	2b 89       	ldd	r18, Y+19	; 0x13
    1d6a:	3c 89       	ldd	r19, Y+20	; 0x14
    1d6c:	4d 89       	ldd	r20, Y+21	; 0x15
    1d6e:	5e 89       	ldd	r21, Y+22	; 0x16
    1d70:	a2 16       	cp	r10, r18
    1d72:	b3 06       	cpc	r11, r19
    1d74:	c4 06       	cpc	r12, r20
    1d76:	d5 06       	cpc	r13, r21
    1d78:	60 f5       	brcc	.+88     	; 0x1dd2 <dda_join_moves+0x2c4>
      uint32_t extra, limit;

      prev_rampup = 0;
      prev_rampdown = prev_F_start_in_steps - crossF_in_steps;
    1d7a:	39 01       	movw	r6, r18
    1d7c:	4a 01       	movw	r8, r20
    1d7e:	6a 18       	sub	r6, r10
    1d80:	7b 08       	sbc	r7, r11
    1d82:	8c 08       	sbc	r8, r12
    1d84:	9d 08       	sbc	r9, r13
      extra = (prev_total_steps - prev_rampdown) >> 1;
    1d86:	ef 84       	ldd	r14, Y+15	; 0x0f
    1d88:	f8 88       	ldd	r15, Y+16	; 0x10
    1d8a:	09 89       	ldd	r16, Y+17	; 0x11
    1d8c:	1a 89       	ldd	r17, Y+18	; 0x12
    1d8e:	e6 18       	sub	r14, r6
    1d90:	f7 08       	sbc	r15, r7
    1d92:	08 09       	sbc	r16, r8
    1d94:	19 09       	sbc	r17, r9
      limit = prev_F_in_steps - prev_F_start_in_steps;
      extra = MIN(extra, limit);
    1d96:	9c 01       	movw	r18, r24
    1d98:	ad 01       	movw	r20, r26
    1d9a:	2b 88       	ldd	r2, Y+19	; 0x13
    1d9c:	3c 88       	ldd	r3, Y+20	; 0x14
    1d9e:	4d 88       	ldd	r4, Y+21	; 0x15
    1da0:	5e 88       	ldd	r5, Y+22	; 0x16
    1da2:	22 19       	sub	r18, r2
    1da4:	33 09       	sbc	r19, r3
    1da6:	44 09       	sbc	r20, r4
    1da8:	55 09       	sbc	r21, r5
    1daa:	16 95       	lsr	r17
    1dac:	07 95       	ror	r16
    1dae:	f7 94       	ror	r15
    1db0:	e7 94       	ror	r14
    1db2:	2e 15       	cp	r18, r14
    1db4:	3f 05       	cpc	r19, r15
    1db6:	40 07       	cpc	r20, r16
    1db8:	51 07       	cpc	r21, r17
    1dba:	10 f4       	brcc	.+4      	; 0x1dc0 <dda_join_moves+0x2b2>
    1dbc:	79 01       	movw	r14, r18
    1dbe:	8a 01       	movw	r16, r20

      prev_rampup += extra;
      prev_rampdown += extra;
    1dc0:	17 01       	movw	r2, r14
    1dc2:	28 01       	movw	r4, r16
    1dc4:	26 0c       	add	r2, r6
    1dc6:	37 1c       	adc	r3, r7
    1dc8:	48 1c       	adc	r4, r8
    1dca:	59 1c       	adc	r5, r9
    1dcc:	37 01       	movw	r6, r14
    1dce:	48 01       	movw	r8, r16
    1dd0:	29 c0       	rjmp	.+82     	; 0x1e24 <dda_join_moves+0x316>
    }
    else {
      uint32_t extra, limit;

      prev_rampup = crossF_in_steps - prev_F_start_in_steps;
    1dd2:	35 01       	movw	r6, r10
    1dd4:	46 01       	movw	r8, r12
    1dd6:	eb 88       	ldd	r14, Y+19	; 0x13
    1dd8:	fc 88       	ldd	r15, Y+20	; 0x14
    1dda:	0d 89       	ldd	r16, Y+21	; 0x15
    1ddc:	1e 89       	ldd	r17, Y+22	; 0x16
    1dde:	6e 18       	sub	r6, r14
    1de0:	7f 08       	sbc	r7, r15
    1de2:	80 0a       	sbc	r8, r16
    1de4:	91 0a       	sbc	r9, r17
      prev_rampdown = 0;
      extra = (prev_total_steps - prev_rampup) >> 1;
    1de6:	ef 84       	ldd	r14, Y+15	; 0x0f
    1de8:	f8 88       	ldd	r15, Y+16	; 0x10
    1dea:	09 89       	ldd	r16, Y+17	; 0x11
    1dec:	1a 89       	ldd	r17, Y+18	; 0x12
    1dee:	e6 18       	sub	r14, r6
    1df0:	f7 08       	sbc	r15, r7
    1df2:	08 09       	sbc	r16, r8
    1df4:	19 09       	sbc	r17, r9
      limit = prev_F_in_steps - crossF_in_steps;
      extra = MIN(extra, limit);
    1df6:	9c 01       	movw	r18, r24
    1df8:	ad 01       	movw	r20, r26
    1dfa:	2a 19       	sub	r18, r10
    1dfc:	3b 09       	sbc	r19, r11
    1dfe:	4c 09       	sbc	r20, r12
    1e00:	5d 09       	sbc	r21, r13
    1e02:	16 95       	lsr	r17
    1e04:	07 95       	ror	r16
    1e06:	f7 94       	ror	r15
    1e08:	e7 94       	ror	r14
    1e0a:	2e 15       	cp	r18, r14
    1e0c:	3f 05       	cpc	r19, r15
    1e0e:	40 07       	cpc	r20, r16
    1e10:	51 07       	cpc	r21, r17
    1e12:	10 f4       	brcc	.+4      	; 0x1e18 <dda_join_moves+0x30a>
    1e14:	79 01       	movw	r14, r18
    1e16:	8a 01       	movw	r16, r20

      prev_rampup += extra;
    1e18:	6e 0c       	add	r6, r14
    1e1a:	7f 1c       	adc	r7, r15
    1e1c:	80 1e       	adc	r8, r16
    1e1e:	91 1e       	adc	r9, r17
    1e20:	17 01       	movw	r2, r14
    1e22:	28 01       	movw	r4, r16
    prev_F = muldiv(prev->fast_um, prev_F, prev->distance);
    this_F = muldiv(current->fast_um, current->endpoint.F, current->distance);
    crossF = muldiv(current->fast_um, crossF, current->distance);

    prev_F_in_steps = ACCELERATE_RAMP_LEN(prev_F);
    this_F_in_steps = ACCELERATE_RAMP_LEN(this_F);
    1e24:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1e26:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1e28:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e2a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e2c:	9b 01       	movw	r18, r22
    1e2e:	ac 01       	movw	r20, r24
    1e30:	0e 94 f7 22 	call	0x45ee	; 0x45ee <__mulsi3>
    1e34:	2c ef       	ldi	r18, 0xFC	; 252
    1e36:	3a e0       	ldi	r19, 0x0A	; 10
    1e38:	40 e0       	ldi	r20, 0x00	; 0
    1e3a:	50 e0       	ldi	r21, 0x00	; 0
    1e3c:	0e 94 2a 23 	call	0x4654	; 0x4654 <__udivmodsi4>
    1e40:	c9 01       	movw	r24, r18
    1e42:	da 01       	movw	r26, r20
    }
    prev_rampdown = prev_total_steps - prev_rampdown;
    prev_F_end_in_steps = crossF_in_steps;

    // Build ramps for current move.
    if (crossF_in_steps == this_F_in_steps) {
    1e44:	a8 16       	cp	r10, r24
    1e46:	b9 06       	cpc	r11, r25
    1e48:	ca 06       	cpc	r12, r26
    1e4a:	db 06       	cpc	r13, r27
    1e4c:	49 f4       	brne	.+18     	; 0x1e60 <dda_join_moves+0x352>
    1e4e:	ae 82       	std	Y+6, r10	; 0x06
    1e50:	bf 82       	std	Y+7, r11	; 0x07
    1e52:	c8 86       	std	Y+8, r12	; 0x08
    1e54:	d9 86       	std	Y+9, r13	; 0x09
    1e56:	20 e0       	ldi	r18, 0x00	; 0
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	40 e0       	ldi	r20, 0x00	; 0
    1e5c:	50 e0       	ldi	r21, 0x00	; 0
    1e5e:	25 c0       	rjmp	.+74     	; 0x1eaa <dda_join_moves+0x39c>
    }
    else {
      this_rampup = 0;
      this_rampdown = crossF_in_steps;

      uint32_t extra = (this_total_steps - this_rampdown) >> 1;
    1e60:	ea 80       	ldd	r14, Y+2	; 0x02
    1e62:	fb 80       	ldd	r15, Y+3	; 0x03
    1e64:	0c 81       	ldd	r16, Y+4	; 0x04
    1e66:	1d 81       	ldd	r17, Y+5	; 0x05
    1e68:	ea 18       	sub	r14, r10
    1e6a:	fb 08       	sbc	r15, r11
    1e6c:	0c 09       	sbc	r16, r12
    1e6e:	1d 09       	sbc	r17, r13
      uint32_t limit = this_F_in_steps - crossF_in_steps;
      extra = MIN(extra, limit);
    1e70:	9c 01       	movw	r18, r24
    1e72:	ad 01       	movw	r20, r26
    1e74:	2a 19       	sub	r18, r10
    1e76:	3b 09       	sbc	r19, r11
    1e78:	4c 09       	sbc	r20, r12
    1e7a:	5d 09       	sbc	r21, r13
    1e7c:	16 95       	lsr	r17
    1e7e:	07 95       	ror	r16
    1e80:	f7 94       	ror	r15
    1e82:	e7 94       	ror	r14
    1e84:	2e 15       	cp	r18, r14
    1e86:	3f 05       	cpc	r19, r15
    1e88:	40 07       	cpc	r20, r16
    1e8a:	51 07       	cpc	r21, r17
    1e8c:	10 f4       	brcc	.+4      	; 0x1e92 <dda_join_moves+0x384>
    1e8e:	79 01       	movw	r14, r18
    1e90:	8a 01       	movw	r16, r20

      this_rampup += extra;
      this_rampdown += extra;
    1e92:	a8 01       	movw	r20, r16
    1e94:	97 01       	movw	r18, r14
    1e96:	2a 0d       	add	r18, r10
    1e98:	3b 1d       	adc	r19, r11
    1e9a:	4c 1d       	adc	r20, r12
    1e9c:	5d 1d       	adc	r21, r13
    1e9e:	2e 83       	std	Y+6, r18	; 0x06
    1ea0:	3f 83       	std	Y+7, r19	; 0x07
    1ea2:	48 87       	std	Y+8, r20	; 0x08
    1ea4:	59 87       	std	Y+9, r21	; 0x09
    1ea6:	a8 01       	movw	r20, r16
    1ea8:	97 01       	movw	r18, r14
    serprintf(PSTR("this_rampdown: %lu\r\n"), this_total_steps - this_rampdown);
    serprintf(PSTR("this_F: %lu\r\n"), this_F_in_steps);

    uint8_t timeout = 0;

    ATOMIC_START
    1eaa:	6f b7       	in	r22, 0x3f	; 63
    1eac:	f8 94       	cli
      // Evaluation: determine how we did...
      lookahead_joined++;
    1eae:	80 91 98 02 	lds	r24, 0x0298
    1eb2:	90 91 99 02 	lds	r25, 0x0299
    1eb6:	a0 91 9a 02 	lds	r26, 0x029A
    1eba:	b0 91 9b 02 	lds	r27, 0x029B
    1ebe:	01 96       	adiw	r24, 0x01	; 1
    1ec0:	a1 1d       	adc	r26, r1
    1ec2:	b1 1d       	adc	r27, r1
    1ec4:	80 93 98 02 	sts	0x0298, r24
    1ec8:	90 93 99 02 	sts	0x0299, r25
    1ecc:	a0 93 9a 02 	sts	0x029A, r26
    1ed0:	b0 93 9b 02 	sts	0x029B, r27

      // Determine if we are fast enough - if not, just leave the moves
      // Note: to test if the previous move was already executed and replaced by a new
      // move, we compare the DDA id.
      if(prev->live == 0 && prev->id == prev_id && current->live == 0 && current->id == this_id) {
    1ed4:	ab a1       	ldd	r26, Y+35	; 0x23
    1ed6:	bc a1       	ldd	r27, Y+36	; 0x24
    1ed8:	55 96       	adiw	r26, 0x15	; 21
    1eda:	8c 91       	ld	r24, X
    1edc:	55 97       	sbiw	r26, 0x15	; 21
    1ede:	81 fd       	sbrc	r24, 1
    1ee0:	74 c0       	rjmp	.+232    	; 0x1fca <dda_join_moves+0x4bc>
    1ee2:	a9 59       	subi	r26, 0x99	; 153
    1ee4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ee6:	8c 91       	ld	r24, X
    1ee8:	a7 56       	subi	r26, 0x67	; 103
    1eea:	b0 40       	sbci	r27, 0x00	; 0
    1eec:	bc a3       	std	Y+36, r27	; 0x24
    1eee:	ab a3       	std	Y+35, r26	; 0x23
    1ef0:	ba 85       	ldd	r27, Y+10	; 0x0a
    1ef2:	8b 17       	cp	r24, r27
    1ef4:	09 f0       	breq	.+2      	; 0x1ef8 <dda_join_moves+0x3ea>
    1ef6:	69 c0       	rjmp	.+210    	; 0x1fca <dda_join_moves+0x4bc>
    1ef8:	ef 89       	ldd	r30, Y+23	; 0x17
    1efa:	f8 8d       	ldd	r31, Y+24	; 0x18
    1efc:	85 89       	ldd	r24, Z+21	; 0x15
    1efe:	81 fd       	sbrc	r24, 1
    1f00:	64 c0       	rjmp	.+200    	; 0x1fca <dda_join_moves+0x4bc>
    1f02:	e9 59       	subi	r30, 0x99	; 153
    1f04:	ff 4f       	sbci	r31, 0xFF	; 255
    1f06:	80 81       	ld	r24, Z
    1f08:	e7 56       	subi	r30, 0x67	; 103
    1f0a:	f0 40       	sbci	r31, 0x00	; 0
    1f0c:	f8 8f       	std	Y+24, r31	; 0x18
    1f0e:	ef 8b       	std	Y+23, r30	; 0x17
    1f10:	f9 81       	ldd	r31, Y+1	; 0x01
    1f12:	8f 17       	cp	r24, r31
    1f14:	09 f0       	breq	.+2      	; 0x1f18 <dda_join_moves+0x40a>
    1f16:	59 c0       	rjmp	.+178    	; 0x1fca <dda_join_moves+0x4bc>
        prev->end_steps = prev_F_end_in_steps;
    1f18:	0b a1       	ldd	r16, Y+35	; 0x23
    1f1a:	1c a1       	ldd	r17, Y+36	; 0x24
    1f1c:	0d 5a       	subi	r16, 0xAD	; 173
    1f1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f20:	d8 01       	movw	r26, r16
    1f22:	ad 92       	st	X+, r10
    1f24:	bd 92       	st	X+, r11
    1f26:	cd 92       	st	X+, r12
    1f28:	dc 92       	st	X, r13
    1f2a:	13 97       	sbiw	r26, 0x03	; 3
    1f2c:	a3 55       	subi	r26, 0x53	; 83
    1f2e:	b0 40       	sbci	r27, 0x00	; 0
        prev->rampup_steps = prev_rampup;
    1f30:	fd 01       	movw	r30, r26
    1f32:	63 ae       	std	Z+59, r6	; 0x3b
    1f34:	74 ae       	std	Z+60, r7	; 0x3c
    1f36:	85 ae       	std	Z+61, r8	; 0x3d
    1f38:	96 ae       	std	Z+62, r9	; 0x3e
        prev->rampdown_steps = prev_rampdown;
    1f3a:	ff 96       	adiw	r30, 0x3f	; 63
    1f3c:	fc a3       	std	Y+36, r31	; 0x24
    1f3e:	eb a3       	std	Y+35, r30	; 0x23
    1f40:	ef 84       	ldd	r14, Y+15	; 0x0f
    1f42:	f8 88       	ldd	r15, Y+16	; 0x10
    1f44:	09 89       	ldd	r16, Y+17	; 0x11
    1f46:	1a 89       	ldd	r17, Y+18	; 0x12
    1f48:	e2 18       	sub	r14, r2
    1f4a:	f3 08       	sbc	r15, r3
    1f4c:	04 09       	sbc	r16, r4
    1f4e:	15 09       	sbc	r17, r5
    1f50:	e0 82       	st	Z, r14
    1f52:	f1 82       	std	Z+1, r15	; 0x01
    1f54:	02 83       	std	Z+2, r16	; 0x02
    1f56:	13 83       	std	Z+3, r17	; 0x03
        current->rampup_steps = this_rampup;
    1f58:	ef 89       	ldd	r30, Y+23	; 0x17
    1f5a:	f8 8d       	ldd	r31, Y+24	; 0x18
    1f5c:	23 af       	std	Z+59, r18	; 0x3b
    1f5e:	34 af       	std	Z+60, r19	; 0x3c
    1f60:	45 af       	std	Z+61, r20	; 0x3d
    1f62:	56 af       	std	Z+62, r21	; 0x3e
        current->rampdown_steps = this_rampdown;
    1f64:	ff 96       	adiw	r30, 0x3f	; 63
    1f66:	2a 80       	ldd	r2, Y+2	; 0x02
    1f68:	3b 80       	ldd	r3, Y+3	; 0x03
    1f6a:	4c 80       	ldd	r4, Y+4	; 0x04
    1f6c:	5d 80       	ldd	r5, Y+5	; 0x05
    1f6e:	ee 80       	ldd	r14, Y+6	; 0x06
    1f70:	ff 80       	ldd	r15, Y+7	; 0x07
    1f72:	08 85       	ldd	r16, Y+8	; 0x08
    1f74:	19 85       	ldd	r17, Y+9	; 0x09
    1f76:	2e 18       	sub	r2, r14
    1f78:	3f 08       	sbc	r3, r15
    1f7a:	40 0a       	sbc	r4, r16
    1f7c:	51 0a       	sbc	r5, r17
    1f7e:	df 01       	movw	r26, r30
    1f80:	20 82       	st	Z, r2
    1f82:	31 82       	std	Z+1, r3	; 0x01
    1f84:	42 82       	std	Z+2, r4	; 0x02
    1f86:	53 82       	std	Z+3, r5	; 0x03
        current->end_steps = 0;
    1f88:	54 96       	adiw	r26, 0x14	; 20
    1f8a:	b8 8f       	std	Y+24, r27	; 0x18
    1f8c:	af 8b       	std	Y+23, r26	; 0x17
    1f8e:	fd 01       	movw	r30, r26
    1f90:	10 82       	st	Z, r1
    1f92:	11 82       	std	Z+1, r1	; 0x01
    1f94:	12 82       	std	Z+2, r1	; 0x02
    1f96:	13 82       	std	Z+3, r1	; 0x03
        current->start_steps = this_F_start_in_steps;
    1f98:	d2 92       	st	-Z, r13
    1f9a:	c2 92       	st	-Z, r12
    1f9c:	b2 92       	st	-Z, r11
    1f9e:	a2 92       	st	-Z, r10
        la_cnt++;
    1fa0:	80 91 a0 02 	lds	r24, 0x02A0
    1fa4:	90 91 a1 02 	lds	r25, 0x02A1
    1fa8:	a0 91 a2 02 	lds	r26, 0x02A2
    1fac:	b0 91 a3 02 	lds	r27, 0x02A3
    1fb0:	01 96       	adiw	r24, 0x01	; 1
    1fb2:	a1 1d       	adc	r26, r1
    1fb4:	b1 1d       	adc	r27, r1
    1fb6:	80 93 a0 02 	sts	0x02A0, r24
    1fba:	90 93 a1 02 	sts	0x02A1, r25
    1fbe:	a0 93 a2 02 	sts	0x02A2, r26
    1fc2:	b0 93 a3 02 	sts	0x02A3, r27
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
    1fc8:	01 c0       	rjmp	.+2      	; 0x1fcc <dda_join_moves+0x4be>
      lookahead_joined++;

      // Determine if we are fast enough - if not, just leave the moves
      // Note: to test if the previous move was already executed and replaced by a new
      // move, we compare the DDA id.
      if(prev->live == 0 && prev->id == prev_id && current->live == 0 && current->id == this_id) {
    1fca:	81 e0       	ldi	r24, 0x01	; 1
        current->end_steps = 0;
        current->start_steps = this_F_start_in_steps;
        la_cnt++;
      } else
        timeout = 1;
    ATOMIC_END
    1fcc:	6f bf       	out	0x3f, r22	; 63

    // If we were not fast enough, any feedback will happen outside the atomic block:
    if(timeout) {
    1fce:	88 23       	and	r24, r24
    1fd0:	09 f1       	breq	.+66     	; 0x2014 <dda_join_moves+0x506>
      sersendf_P(PSTR("Error: look ahead not fast enough\r\n"));
    1fd2:	0f 92       	push	r0
    1fd4:	0f 92       	push	r0
    1fd6:	82 ee       	ldi	r24, 0xE2	; 226
    1fd8:	91 e0       	ldi	r25, 0x01	; 1
    1fda:	ad b7       	in	r26, 0x3d	; 61
    1fdc:	be b7       	in	r27, 0x3e	; 62
    1fde:	12 96       	adiw	r26, 0x02	; 2
    1fe0:	9c 93       	st	X, r25
    1fe2:	8e 93       	st	-X, r24
    1fe4:	11 97       	sbiw	r26, 0x01	; 1
    1fe6:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <sersendf_P>
      lookahead_timeout++;
    1fea:	80 91 9c 02 	lds	r24, 0x029C
    1fee:	90 91 9d 02 	lds	r25, 0x029D
    1ff2:	a0 91 9e 02 	lds	r26, 0x029E
    1ff6:	b0 91 9f 02 	lds	r27, 0x029F
    1ffa:	01 96       	adiw	r24, 0x01	; 1
    1ffc:	a1 1d       	adc	r26, r1
    1ffe:	b1 1d       	adc	r27, r1
    2000:	80 93 9c 02 	sts	0x029C, r24
    2004:	90 93 9d 02 	sts	0x029D, r25
    2008:	a0 93 9e 02 	sts	0x029E, r26
    200c:	b0 93 9f 02 	sts	0x029F, r27
    2010:	0f 90       	pop	r0
    2012:	0f 90       	pop	r0
    }
  }
}
    2014:	a4 96       	adiw	r28, 0x24	; 36
    2016:	e2 e1       	ldi	r30, 0x12	; 18
    2018:	0c 94 83 23 	jmp	0x4706	; 0x4706 <__epilogue_restores__>

0000201c <dda_find_crossing_speed>:
 * \param [in] prev is the DDA structure of the move previous to the current one.
 * \param [in] current is the DDA structure of the move currently created.
 *
 * \return dda->crossF
 */
void dda_find_crossing_speed(DDA *prev, DDA *current) {
    201c:	a6 e2       	ldi	r26, 0x26	; 38
    201e:	b0 e0       	ldi	r27, 0x00	; 0
    2020:	e4 e1       	ldi	r30, 0x14	; 20
    2022:	f0 e1       	ldi	r31, 0x10	; 16
    2024:	0c 94 67 23 	jmp	0x46ce	; 0x46ce <__prologue_saves__>
    2028:	9e a3       	std	Y+38, r25	; 0x26
    202a:	8d a3       	std	Y+37, r24	; 0x25
    202c:	7a a3       	std	Y+34, r23	; 0x22
    202e:	69 a3       	std	Y+33, r22	; 0x21
  uint32_t F, dv, speed_factor, max_speed_factor;
  int32_t prevFx, prevFy, prevFz, prevFe;
  int32_t currFx, currFy, currFz, currFe;

  // Bail out if there's nothing to join (e.g. G1 F1500).
  if ( ! prev || prev->nullmove)
    2030:	00 97       	sbiw	r24, 0x00	; 0
    2032:	09 f4       	brne	.+2      	; 0x2036 <dda_find_crossing_speed+0x1a>
    2034:	0c c2       	rjmp	.+1048   	; 0x244e <__stack+0x24f>
    2036:	dc 01       	movw	r26, r24
    2038:	55 96       	adiw	r26, 0x15	; 21
    203a:	8c 91       	ld	r24, X
    203c:	55 97       	sbiw	r26, 0x15	; 21
    203e:	80 fd       	sbrc	r24, 0
    2040:	06 c2       	rjmp	.+1036   	; 0x244e <__stack+0x24f>
    return;

  // We always look at the smaller of both combined speeds,
  // else we'd interpret intended speed changes as jerk.
  F = prev->endpoint.F;
    2042:	50 96       	adiw	r26, 0x10	; 16
    2044:	8d 91       	ld	r24, X+
    2046:	9d 91       	ld	r25, X+
    2048:	0d 90       	ld	r0, X+
    204a:	bc 91       	ld	r27, X
    204c:	a0 2d       	mov	r26, r0
    204e:	fb 01       	movw	r30, r22
    2050:	20 89       	ldd	r18, Z+16	; 0x10
    2052:	31 89       	ldd	r19, Z+17	; 0x11
    2054:	42 89       	ldd	r20, Z+18	; 0x12
    2056:	53 89       	ldd	r21, Z+19	; 0x13
    2058:	29 83       	std	Y+1, r18	; 0x01
    205a:	3a 83       	std	Y+2, r19	; 0x02
    205c:	4b 83       	std	Y+3, r20	; 0x03
    205e:	5c 83       	std	Y+4, r21	; 0x04
    2060:	82 17       	cp	r24, r18
    2062:	93 07       	cpc	r25, r19
    2064:	a4 07       	cpc	r26, r20
    2066:	b5 07       	cpc	r27, r21
    2068:	20 f4       	brcc	.+8      	; 0x2072 <dda_find_crossing_speed+0x56>
    206a:	89 83       	std	Y+1, r24	; 0x01
    206c:	9a 83       	std	Y+2, r25	; 0x02
    206e:	ab 83       	std	Y+3, r26	; 0x03
    2070:	bc 83       	std	Y+4, r27	; 0x04
    sersendf_P(PSTR("Distance: %lu, then %lu\n"),
               prev->distance, current->distance);

  // Find individual axis speeds.
  // int32_t muldiv(int32_t multiplicand, uint32_t multiplier, uint32_t divisor)
  prevFx = muldiv(prev->delta_um[X], F, prev->distance);
    2072:	2d a1       	ldd	r18, Y+37	; 0x25
    2074:	3e a1       	ldd	r19, Y+38	; 0x26
    2076:	29 5b       	subi	r18, 0xB9	; 185
    2078:	3f 4f       	sbci	r19, 0xFF	; 255
    207a:	3c a3       	std	Y+36, r19	; 0x24
    207c:	2b a3       	std	Y+35, r18	; 0x23
    207e:	d9 01       	movw	r26, r18
    2080:	ad 90       	ld	r10, X+
    2082:	bd 90       	ld	r11, X+
    2084:	cd 90       	ld	r12, X+
    2086:	dc 90       	ld	r13, X
    2088:	ed a1       	ldd	r30, Y+37	; 0x25
    208a:	fe a1       	ldd	r31, Y+38	; 0x26
    208c:	e9 5a       	subi	r30, 0xA9	; 169
    208e:	ff 4f       	sbci	r31, 0xFF	; 255
    2090:	21 90       	ld	r2, Z+
    2092:	31 90       	ld	r3, Z+
    2094:	41 90       	ld	r4, Z+
    2096:	51 90       	ld	r5, Z+
    2098:	fe a3       	std	Y+38, r31	; 0x26
    209a:	ed a3       	std	Y+37, r30	; 0x25
    209c:	69 81       	ldd	r22, Y+1	; 0x01
    209e:	7a 81       	ldd	r23, Y+2	; 0x02
    20a0:	8b 81       	ldd	r24, Y+3	; 0x03
    20a2:	9c 81       	ldd	r25, Y+4	; 0x04
    20a4:	a6 01       	movw	r20, r12
    20a6:	95 01       	movw	r18, r10
    20a8:	0e 94 2a 23 	call	0x4654	; 0x4654 <__udivmodsi4>
    20ac:	7b 01       	movw	r14, r22
    20ae:	8c 01       	movw	r16, r24
    20b0:	c2 01       	movw	r24, r4
    20b2:	b1 01       	movw	r22, r2
    20b4:	0e 94 2b 12 	call	0x2456	; 0x2456 <muldivQR>
    20b8:	6d 8f       	std	Y+29, r22	; 0x1d
    20ba:	7e 8f       	std	Y+30, r23	; 0x1e
    20bc:	8f 8f       	std	Y+31, r24	; 0x1f
    20be:	98 a3       	std	Y+32, r25	; 0x20
  prevFy = muldiv(prev->delta_um[Y], F, prev->distance);
    20c0:	ab a1       	ldd	r26, Y+35	; 0x23
    20c2:	bc a1       	ldd	r27, Y+36	; 0x24
    20c4:	ad 90       	ld	r10, X+
    20c6:	bd 90       	ld	r11, X+
    20c8:	cd 90       	ld	r12, X+
    20ca:	dc 90       	ld	r13, X
    20cc:	ed a1       	ldd	r30, Y+37	; 0x25
    20ce:	fe a1       	ldd	r31, Y+38	; 0x26
    20d0:	21 90       	ld	r2, Z+
    20d2:	31 90       	ld	r3, Z+
    20d4:	41 90       	ld	r4, Z+
    20d6:	51 90       	ld	r5, Z+
    20d8:	fe a3       	std	Y+38, r31	; 0x26
    20da:	ed a3       	std	Y+37, r30	; 0x25
    20dc:	69 81       	ldd	r22, Y+1	; 0x01
    20de:	7a 81       	ldd	r23, Y+2	; 0x02
    20e0:	8b 81       	ldd	r24, Y+3	; 0x03
    20e2:	9c 81       	ldd	r25, Y+4	; 0x04
    20e4:	a6 01       	movw	r20, r12
    20e6:	95 01       	movw	r18, r10
    20e8:	0e 94 2a 23 	call	0x4654	; 0x4654 <__udivmodsi4>
    20ec:	7b 01       	movw	r14, r22
    20ee:	8c 01       	movw	r16, r24
    20f0:	c2 01       	movw	r24, r4
    20f2:	b1 01       	movw	r22, r2
    20f4:	0e 94 2b 12 	call	0x2456	; 0x2456 <muldivQR>
    20f8:	69 8f       	std	Y+25, r22	; 0x19
    20fa:	7a 8f       	std	Y+26, r23	; 0x1a
    20fc:	8b 8f       	std	Y+27, r24	; 0x1b
    20fe:	9c 8f       	std	Y+28, r25	; 0x1c
  prevFz = muldiv(prev->delta_um[Z], F, prev->distance);
    2100:	ab a1       	ldd	r26, Y+35	; 0x23
    2102:	bc a1       	ldd	r27, Y+36	; 0x24
    2104:	ad 90       	ld	r10, X+
    2106:	bd 90       	ld	r11, X+
    2108:	cd 90       	ld	r12, X+
    210a:	dc 90       	ld	r13, X
    210c:	ed a1       	ldd	r30, Y+37	; 0x25
    210e:	fe a1       	ldd	r31, Y+38	; 0x26
    2110:	21 90       	ld	r2, Z+
    2112:	31 90       	ld	r3, Z+
    2114:	41 90       	ld	r4, Z+
    2116:	51 90       	ld	r5, Z+
    2118:	fe a3       	std	Y+38, r31	; 0x26
    211a:	ed a3       	std	Y+37, r30	; 0x25
    211c:	69 81       	ldd	r22, Y+1	; 0x01
    211e:	7a 81       	ldd	r23, Y+2	; 0x02
    2120:	8b 81       	ldd	r24, Y+3	; 0x03
    2122:	9c 81       	ldd	r25, Y+4	; 0x04
    2124:	a6 01       	movw	r20, r12
    2126:	95 01       	movw	r18, r10
    2128:	0e 94 2a 23 	call	0x4654	; 0x4654 <__udivmodsi4>
    212c:	7b 01       	movw	r14, r22
    212e:	8c 01       	movw	r16, r24
    2130:	c2 01       	movw	r24, r4
    2132:	b1 01       	movw	r22, r2
    2134:	0e 94 2b 12 	call	0x2456	; 0x2456 <muldivQR>
    2138:	6d 8b       	std	Y+21, r22	; 0x15
    213a:	7e 8b       	std	Y+22, r23	; 0x16
    213c:	8f 8b       	std	Y+23, r24	; 0x17
    213e:	98 8f       	std	Y+24, r25	; 0x18
  prevFe = muldiv(prev->delta_um[E], F, prev->distance);
    2140:	ab a1       	ldd	r26, Y+35	; 0x23
    2142:	bc a1       	ldd	r27, Y+36	; 0x24
    2144:	ad 90       	ld	r10, X+
    2146:	bd 90       	ld	r11, X+
    2148:	cd 90       	ld	r12, X+
    214a:	dc 90       	ld	r13, X
    214c:	ed a1       	ldd	r30, Y+37	; 0x25
    214e:	fe a1       	ldd	r31, Y+38	; 0x26
    2150:	20 80       	ld	r2, Z
    2152:	31 80       	ldd	r3, Z+1	; 0x01
    2154:	42 80       	ldd	r4, Z+2	; 0x02
    2156:	53 80       	ldd	r5, Z+3	; 0x03
    2158:	69 81       	ldd	r22, Y+1	; 0x01
    215a:	7a 81       	ldd	r23, Y+2	; 0x02
    215c:	8b 81       	ldd	r24, Y+3	; 0x03
    215e:	9c 81       	ldd	r25, Y+4	; 0x04
    2160:	a6 01       	movw	r20, r12
    2162:	95 01       	movw	r18, r10
    2164:	0e 94 2a 23 	call	0x4654	; 0x4654 <__udivmodsi4>
    2168:	7b 01       	movw	r14, r22
    216a:	8c 01       	movw	r16, r24
    216c:	c2 01       	movw	r24, r4
    216e:	b1 01       	movw	r22, r2
    2170:	0e 94 2b 12 	call	0x2456	; 0x2456 <muldivQR>
    2174:	69 8b       	std	Y+17, r22	; 0x11
    2176:	7a 8b       	std	Y+18, r23	; 0x12
    2178:	8b 8b       	std	Y+19, r24	; 0x13
    217a:	9c 8b       	std	Y+20, r25	; 0x14

  currFx = muldiv(current->delta_um[X], F, current->distance);
    217c:	e9 a1       	ldd	r30, Y+33	; 0x21
    217e:	fa a1       	ldd	r31, Y+34	; 0x22
    2180:	e9 5b       	subi	r30, 0xB9	; 185
    2182:	ff 4f       	sbci	r31, 0xFF	; 255
    2184:	fe a3       	std	Y+38, r31	; 0x26
    2186:	ed a3       	std	Y+37, r30	; 0x25
    2188:	a0 80       	ld	r10, Z
    218a:	b1 80       	ldd	r11, Z+1	; 0x01
    218c:	c2 80       	ldd	r12, Z+2	; 0x02
    218e:	d3 80       	ldd	r13, Z+3	; 0x03
    2190:	29 a1       	ldd	r18, Y+33	; 0x21
    2192:	3a a1       	ldd	r19, Y+34	; 0x22
    2194:	29 5a       	subi	r18, 0xA9	; 169
    2196:	3f 4f       	sbci	r19, 0xFF	; 255
    2198:	d9 01       	movw	r26, r18
    219a:	2d 90       	ld	r2, X+
    219c:	3d 90       	ld	r3, X+
    219e:	4d 90       	ld	r4, X+
    21a0:	5d 90       	ld	r5, X+
    21a2:	ba a3       	std	Y+34, r27	; 0x22
    21a4:	a9 a3       	std	Y+33, r26	; 0x21
    21a6:	69 81       	ldd	r22, Y+1	; 0x01
    21a8:	7a 81       	ldd	r23, Y+2	; 0x02
    21aa:	8b 81       	ldd	r24, Y+3	; 0x03
    21ac:	9c 81       	ldd	r25, Y+4	; 0x04
    21ae:	a6 01       	movw	r20, r12
    21b0:	95 01       	movw	r18, r10
    21b2:	0e 94 2a 23 	call	0x4654	; 0x4654 <__udivmodsi4>
    21b6:	7b 01       	movw	r14, r22
    21b8:	8c 01       	movw	r16, r24
    21ba:	c2 01       	movw	r24, r4
    21bc:	b1 01       	movw	r22, r2
    21be:	0e 94 2b 12 	call	0x2456	; 0x2456 <muldivQR>
    21c2:	6d 87       	std	Y+13, r22	; 0x0d
    21c4:	7e 87       	std	Y+14, r23	; 0x0e
    21c6:	8f 87       	std	Y+15, r24	; 0x0f
    21c8:	98 8b       	std	Y+16, r25	; 0x10
  currFy = muldiv(current->delta_um[Y], F, current->distance);
    21ca:	ed a1       	ldd	r30, Y+37	; 0x25
    21cc:	fe a1       	ldd	r31, Y+38	; 0x26
    21ce:	a0 80       	ld	r10, Z
    21d0:	b1 80       	ldd	r11, Z+1	; 0x01
    21d2:	c2 80       	ldd	r12, Z+2	; 0x02
    21d4:	d3 80       	ldd	r13, Z+3	; 0x03
    21d6:	a9 a1       	ldd	r26, Y+33	; 0x21
    21d8:	ba a1       	ldd	r27, Y+34	; 0x22
    21da:	2d 90       	ld	r2, X+
    21dc:	3d 90       	ld	r3, X+
    21de:	4d 90       	ld	r4, X+
    21e0:	5d 90       	ld	r5, X+
    21e2:	ba a3       	std	Y+34, r27	; 0x22
    21e4:	a9 a3       	std	Y+33, r26	; 0x21
    21e6:	69 81       	ldd	r22, Y+1	; 0x01
    21e8:	7a 81       	ldd	r23, Y+2	; 0x02
    21ea:	8b 81       	ldd	r24, Y+3	; 0x03
    21ec:	9c 81       	ldd	r25, Y+4	; 0x04
    21ee:	a6 01       	movw	r20, r12
    21f0:	95 01       	movw	r18, r10
    21f2:	0e 94 2a 23 	call	0x4654	; 0x4654 <__udivmodsi4>
    21f6:	7b 01       	movw	r14, r22
    21f8:	8c 01       	movw	r16, r24
    21fa:	c2 01       	movw	r24, r4
    21fc:	b1 01       	movw	r22, r2
    21fe:	0e 94 2b 12 	call	0x2456	; 0x2456 <muldivQR>
    2202:	69 87       	std	Y+9, r22	; 0x09
    2204:	7a 87       	std	Y+10, r23	; 0x0a
    2206:	8b 87       	std	Y+11, r24	; 0x0b
    2208:	9c 87       	std	Y+12, r25	; 0x0c
  currFz = muldiv(current->delta_um[Z], F, current->distance);
    220a:	ed a1       	ldd	r30, Y+37	; 0x25
    220c:	fe a1       	ldd	r31, Y+38	; 0x26
    220e:	a0 80       	ld	r10, Z
    2210:	b1 80       	ldd	r11, Z+1	; 0x01
    2212:	c2 80       	ldd	r12, Z+2	; 0x02
    2214:	d3 80       	ldd	r13, Z+3	; 0x03
    2216:	a9 a1       	ldd	r26, Y+33	; 0x21
    2218:	ba a1       	ldd	r27, Y+34	; 0x22
    221a:	2d 90       	ld	r2, X+
    221c:	3d 90       	ld	r3, X+
    221e:	4d 90       	ld	r4, X+
    2220:	5d 90       	ld	r5, X+
    2222:	ba a3       	std	Y+34, r27	; 0x22
    2224:	a9 a3       	std	Y+33, r26	; 0x21
    2226:	69 81       	ldd	r22, Y+1	; 0x01
    2228:	7a 81       	ldd	r23, Y+2	; 0x02
    222a:	8b 81       	ldd	r24, Y+3	; 0x03
    222c:	9c 81       	ldd	r25, Y+4	; 0x04
    222e:	a6 01       	movw	r20, r12
    2230:	95 01       	movw	r18, r10
    2232:	0e 94 2a 23 	call	0x4654	; 0x4654 <__udivmodsi4>
    2236:	7b 01       	movw	r14, r22
    2238:	8c 01       	movw	r16, r24
    223a:	c2 01       	movw	r24, r4
    223c:	b1 01       	movw	r22, r2
    223e:	0e 94 2b 12 	call	0x2456	; 0x2456 <muldivQR>
    2242:	6d 83       	std	Y+5, r22	; 0x05
    2244:	7e 83       	std	Y+6, r23	; 0x06
    2246:	8f 83       	std	Y+7, r24	; 0x07
    2248:	98 87       	std	Y+8, r25	; 0x08
  currFe = muldiv(current->delta_um[E], F, current->distance);
    224a:	ed a1       	ldd	r30, Y+37	; 0x25
    224c:	fe a1       	ldd	r31, Y+38	; 0x26
    224e:	a0 80       	ld	r10, Z
    2250:	b1 80       	ldd	r11, Z+1	; 0x01
    2252:	c2 80       	ldd	r12, Z+2	; 0x02
    2254:	d3 80       	ldd	r13, Z+3	; 0x03
    2256:	a9 a1       	ldd	r26, Y+33	; 0x21
    2258:	ba a1       	ldd	r27, Y+34	; 0x22
    225a:	2d 90       	ld	r2, X+
    225c:	3d 90       	ld	r3, X+
    225e:	4d 90       	ld	r4, X+
    2260:	5c 90       	ld	r5, X
    2262:	13 97       	sbiw	r26, 0x03	; 3
    2264:	a3 56       	subi	r26, 0x63	; 99
    2266:	b0 40       	sbci	r27, 0x00	; 0
    2268:	ba a3       	std	Y+34, r27	; 0x22
    226a:	a9 a3       	std	Y+33, r26	; 0x21
    226c:	69 81       	ldd	r22, Y+1	; 0x01
    226e:	7a 81       	ldd	r23, Y+2	; 0x02
    2270:	8b 81       	ldd	r24, Y+3	; 0x03
    2272:	9c 81       	ldd	r25, Y+4	; 0x04
    2274:	a6 01       	movw	r20, r12
    2276:	95 01       	movw	r18, r10
    2278:	0e 94 2a 23 	call	0x4654	; 0x4654 <__udivmodsi4>
    227c:	39 01       	movw	r6, r18
    227e:	4a 01       	movw	r8, r20
    2280:	69 81       	ldd	r22, Y+1	; 0x01
    2282:	7a 81       	ldd	r23, Y+2	; 0x02
    2284:	8b 81       	ldd	r24, Y+3	; 0x03
    2286:	9c 81       	ldd	r25, Y+4	; 0x04
    2288:	a6 01       	movw	r20, r12
    228a:	95 01       	movw	r18, r10
    228c:	0e 94 2a 23 	call	0x4654	; 0x4654 <__udivmodsi4>
    2290:	7b 01       	movw	r14, r22
    2292:	8c 01       	movw	r16, r24
    2294:	c2 01       	movw	r24, r4
    2296:	b1 01       	movw	r22, r2
    2298:	0e 94 2b 12 	call	0x2456	; 0x2456 <muldivQR>
    229c:	5b 01       	movw	r10, r22
    229e:	6c 01       	movw	r12, r24
   *
   * See also: https://github.com/Traumflug/Teacup_Firmware/issues/45
   */
  max_speed_factor = (uint32_t)2 << 8;

  dv = currFx > prevFx ? currFx - prevFx : prevFx - currFx;
    22a0:	2d 85       	ldd	r18, Y+13	; 0x0d
    22a2:	3e 85       	ldd	r19, Y+14	; 0x0e
    22a4:	4f 85       	ldd	r20, Y+15	; 0x0f
    22a6:	58 89       	ldd	r21, Y+16	; 0x10
    22a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22aa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22ac:	af 8d       	ldd	r26, Y+31	; 0x1f
    22ae:	b8 a1       	ldd	r27, Y+32	; 0x20
    22b0:	82 17       	cp	r24, r18
    22b2:	93 07       	cpc	r25, r19
    22b4:	a4 07       	cpc	r26, r20
    22b6:	b5 07       	cpc	r27, r21
    22b8:	44 f0       	brlt	.+16     	; 0x22ca <__stack+0xcb>
    22ba:	2d 8d       	ldd	r18, Y+29	; 0x1d
    22bc:	3e 8d       	ldd	r19, Y+30	; 0x1e
    22be:	4f 8d       	ldd	r20, Y+31	; 0x1f
    22c0:	58 a1       	ldd	r21, Y+32	; 0x20
    22c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    22c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    22c6:	af 85       	ldd	r26, Y+15	; 0x0f
    22c8:	b8 89       	ldd	r27, Y+16	; 0x10
    22ca:	28 1b       	sub	r18, r24
    22cc:	39 0b       	sbc	r19, r25
    22ce:	4a 0b       	sbc	r20, r26
    22d0:	5b 0b       	sbc	r21, r27
  if (dv) {
    22d2:	99 f0       	breq	.+38     	; 0x22fa <__stack+0xfb>
    speed_factor = ((uint32_t)MAX_JERK_X << 8) / dv;
    22d4:	60 e0       	ldi	r22, 0x00	; 0
    22d6:	7a e0       	ldi	r23, 0x0A	; 10
    22d8:	80 e0       	ldi	r24, 0x00	; 0
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	0e 94 2a 23 	call	0x4654	; 0x4654 <__udivmodsi4>
    22e0:	b9 01       	movw	r22, r18
    22e2:	ca 01       	movw	r24, r20
    if (speed_factor < max_speed_factor)
    22e4:	60 30       	cpi	r22, 0x00	; 0
    22e6:	a2 e0       	ldi	r26, 0x02	; 2
    22e8:	7a 07       	cpc	r23, r26
    22ea:	a0 e0       	ldi	r26, 0x00	; 0
    22ec:	8a 07       	cpc	r24, r26
    22ee:	a0 e0       	ldi	r26, 0x00	; 0
    22f0:	9a 07       	cpc	r25, r26
    22f2:	18 f4       	brcc	.+6      	; 0x22fa <__stack+0xfb>
    22f4:	7b 01       	movw	r14, r22
    22f6:	8c 01       	movw	r16, r24
    22f8:	05 c0       	rjmp	.+10     	; 0x2304 <__stack+0x105>
    22fa:	e1 2c       	mov	r14, r1
    22fc:	f2 e0       	ldi	r31, 0x02	; 2
    22fe:	ff 2e       	mov	r15, r31
    2300:	01 2d       	mov	r16, r1
    2302:	11 2d       	mov	r17, r1
    if (DEBUG_DDA && (debug_flags & DEBUG_DDA))
      sersendf_P(PSTR("X: dv %lu of %lu   factor %lu of %lu\n"),
                 dv, (uint32_t)MAX_JERK_X, speed_factor, (uint32_t)1 << 8);
  }

  dv = currFy > prevFy ? currFy - prevFy : prevFy - currFy;
    2304:	29 85       	ldd	r18, Y+9	; 0x09
    2306:	3a 85       	ldd	r19, Y+10	; 0x0a
    2308:	4b 85       	ldd	r20, Y+11	; 0x0b
    230a:	5c 85       	ldd	r21, Y+12	; 0x0c
    230c:	89 8d       	ldd	r24, Y+25	; 0x19
    230e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2310:	ab 8d       	ldd	r26, Y+27	; 0x1b
    2312:	bc 8d       	ldd	r27, Y+28	; 0x1c
    2314:	82 17       	cp	r24, r18
    2316:	93 07       	cpc	r25, r19
    2318:	a4 07       	cpc	r26, r20
    231a:	b5 07       	cpc	r27, r21
    231c:	44 f0       	brlt	.+16     	; 0x232e <__stack+0x12f>
    231e:	29 8d       	ldd	r18, Y+25	; 0x19
    2320:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2322:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2324:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2326:	89 85       	ldd	r24, Y+9	; 0x09
    2328:	9a 85       	ldd	r25, Y+10	; 0x0a
    232a:	ab 85       	ldd	r26, Y+11	; 0x0b
    232c:	bc 85       	ldd	r27, Y+12	; 0x0c
    232e:	28 1b       	sub	r18, r24
    2330:	39 0b       	sbc	r19, r25
    2332:	4a 0b       	sbc	r20, r26
    2334:	5b 0b       	sbc	r21, r27
  if (dv) {
    2336:	69 f0       	breq	.+26     	; 0x2352 <__stack+0x153>
    2338:	60 e0       	ldi	r22, 0x00	; 0
    233a:	7a e0       	ldi	r23, 0x0A	; 10
    233c:	80 e0       	ldi	r24, 0x00	; 0
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	0e 94 2a 23 	call	0x4654	; 0x4654 <__udivmodsi4>
    2344:	2e 15       	cp	r18, r14
    2346:	3f 05       	cpc	r19, r15
    2348:	40 07       	cpc	r20, r16
    234a:	51 07       	cpc	r21, r17
    234c:	10 f4       	brcc	.+4      	; 0x2352 <__stack+0x153>
    234e:	79 01       	movw	r14, r18
    2350:	8a 01       	movw	r16, r20
    if (DEBUG_DDA && (debug_flags & DEBUG_DDA))
      sersendf_P(PSTR("Y: dv %lu of %lu   factor %lu of %lu\n"),
                 dv, (uint32_t)MAX_JERK_Y, speed_factor, (uint32_t)1 << 8);
  }

  dv = currFz > prevFz ? currFz - prevFz : prevFz - currFz;
    2352:	2d 81       	ldd	r18, Y+5	; 0x05
    2354:	3e 81       	ldd	r19, Y+6	; 0x06
    2356:	4f 81       	ldd	r20, Y+7	; 0x07
    2358:	58 85       	ldd	r21, Y+8	; 0x08
    235a:	8d 89       	ldd	r24, Y+21	; 0x15
    235c:	9e 89       	ldd	r25, Y+22	; 0x16
    235e:	af 89       	ldd	r26, Y+23	; 0x17
    2360:	b8 8d       	ldd	r27, Y+24	; 0x18
    2362:	82 17       	cp	r24, r18
    2364:	93 07       	cpc	r25, r19
    2366:	a4 07       	cpc	r26, r20
    2368:	b5 07       	cpc	r27, r21
    236a:	44 f0       	brlt	.+16     	; 0x237c <__stack+0x17d>
    236c:	2d 89       	ldd	r18, Y+21	; 0x15
    236e:	3e 89       	ldd	r19, Y+22	; 0x16
    2370:	4f 89       	ldd	r20, Y+23	; 0x17
    2372:	58 8d       	ldd	r21, Y+24	; 0x18
    2374:	8d 81       	ldd	r24, Y+5	; 0x05
    2376:	9e 81       	ldd	r25, Y+6	; 0x06
    2378:	af 81       	ldd	r26, Y+7	; 0x07
    237a:	b8 85       	ldd	r27, Y+8	; 0x08
    237c:	28 1b       	sub	r18, r24
    237e:	39 0b       	sbc	r19, r25
    2380:	4a 0b       	sbc	r20, r26
    2382:	5b 0b       	sbc	r21, r27
  if (dv) {
    2384:	69 f0       	breq	.+26     	; 0x23a0 <__stack+0x1a1>
    2386:	60 e0       	ldi	r22, 0x00	; 0
    2388:	7a e0       	ldi	r23, 0x0A	; 10
    238a:	80 e0       	ldi	r24, 0x00	; 0
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	0e 94 2a 23 	call	0x4654	; 0x4654 <__udivmodsi4>
    2392:	2e 15       	cp	r18, r14
    2394:	3f 05       	cpc	r19, r15
    2396:	40 07       	cpc	r20, r16
    2398:	51 07       	cpc	r21, r17
    239a:	10 f4       	brcc	.+4      	; 0x23a0 <__stack+0x1a1>
    239c:	79 01       	movw	r14, r18
    239e:	8a 01       	movw	r16, r20
    if (DEBUG_DDA && (debug_flags & DEBUG_DDA))
      sersendf_P(PSTR("Z: dv %lu of %lu   factor %lu of %lu\n"),
                 dv, (uint32_t)MAX_JERK_Z, speed_factor, (uint32_t)1 << 8);
  }

  dv = currFe > prevFe ? currFe - prevFe : prevFe - currFe;
    23a0:	29 89       	ldd	r18, Y+17	; 0x11
    23a2:	3a 89       	ldd	r19, Y+18	; 0x12
    23a4:	4b 89       	ldd	r20, Y+19	; 0x13
    23a6:	5c 89       	ldd	r21, Y+20	; 0x14
    23a8:	2a 15       	cp	r18, r10
    23aa:	3b 05       	cpc	r19, r11
    23ac:	4c 05       	cpc	r20, r12
    23ae:	5d 05       	cpc	r21, r13
    23b0:	5c f4       	brge	.+22     	; 0x23c8 <__stack+0x1c9>
    23b2:	a6 01       	movw	r20, r12
    23b4:	95 01       	movw	r18, r10
    23b6:	89 89       	ldd	r24, Y+17	; 0x11
    23b8:	9a 89       	ldd	r25, Y+18	; 0x12
    23ba:	ab 89       	ldd	r26, Y+19	; 0x13
    23bc:	bc 89       	ldd	r27, Y+20	; 0x14
    23be:	28 1b       	sub	r18, r24
    23c0:	39 0b       	sbc	r19, r25
    23c2:	4a 0b       	sbc	r20, r26
    23c4:	5b 0b       	sbc	r21, r27
    23c6:	08 c0       	rjmp	.+16     	; 0x23d8 <__stack+0x1d9>
    23c8:	29 89       	ldd	r18, Y+17	; 0x11
    23ca:	3a 89       	ldd	r19, Y+18	; 0x12
    23cc:	4b 89       	ldd	r20, Y+19	; 0x13
    23ce:	5c 89       	ldd	r21, Y+20	; 0x14
    23d0:	2a 19       	sub	r18, r10
    23d2:	3b 09       	sbc	r19, r11
    23d4:	4c 09       	sbc	r20, r12
    23d6:	5d 09       	sbc	r21, r13
  if (dv) {
    23d8:	21 15       	cp	r18, r1
    23da:	31 05       	cpc	r19, r1
    23dc:	41 05       	cpc	r20, r1
    23de:	51 05       	cpc	r21, r1
    23e0:	69 f0       	breq	.+26     	; 0x23fc <__stack+0x1fd>
    23e2:	60 e0       	ldi	r22, 0x00	; 0
    23e4:	7a e0       	ldi	r23, 0x0A	; 10
    23e6:	80 e0       	ldi	r24, 0x00	; 0
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	0e 94 2a 23 	call	0x4654	; 0x4654 <__udivmodsi4>
    23ee:	2e 15       	cp	r18, r14
    23f0:	3f 05       	cpc	r19, r15
    23f2:	40 07       	cpc	r20, r16
    23f4:	51 07       	cpc	r21, r17
    23f6:	10 f4       	brcc	.+4      	; 0x23fc <__stack+0x1fd>
    23f8:	79 01       	movw	r14, r18
    23fa:	8a 01       	movw	r16, r20
    23fc:	c9 a0       	ldd	r12, Y+33	; 0x21
    23fe:	da a0       	ldd	r13, Y+34	; 0x22
    2400:	ab e4       	ldi	r26, 0x4B	; 75
    2402:	b0 e0       	ldi	r27, 0x00	; 0
    2404:	ca 0e       	add	r12, r26
    2406:	db 1e       	adc	r13, r27
    if (DEBUG_DDA && (debug_flags & DEBUG_DDA))
      sersendf_P(PSTR("E: dv %lu of %lu   factor %lu of %lu\n"),
                 dv, (uint32_t)MAX_JERK_E, speed_factor, (uint32_t)1 << 8);
  }

  if (max_speed_factor >= ((uint32_t)1 << 8))
    2408:	bf ef       	ldi	r27, 0xFF	; 255
    240a:	eb 16       	cp	r14, r27
    240c:	f1 04       	cpc	r15, r1
    240e:	01 05       	cpc	r16, r1
    2410:	11 05       	cpc	r17, r1
    2412:	61 f0       	breq	.+24     	; 0x242c <__stack+0x22d>
    2414:	58 f0       	brcs	.+22     	; 0x242c <__stack+0x22d>
    current->crossF = F;
    2416:	29 81       	ldd	r18, Y+1	; 0x01
    2418:	3a 81       	ldd	r19, Y+2	; 0x02
    241a:	4b 81       	ldd	r20, Y+3	; 0x03
    241c:	5c 81       	ldd	r21, Y+4	; 0x04
    241e:	d6 01       	movw	r26, r12
    2420:	2d 93       	st	X+, r18
    2422:	3d 93       	st	X+, r19
    2424:	4d 93       	st	X+, r20
    2426:	5c 93       	st	X, r21
    2428:	13 97       	sbiw	r26, 0x03	; 3
    242a:	11 c0       	rjmp	.+34     	; 0x244e <__stack+0x24f>
  else
    current->crossF = (F * max_speed_factor) >> 8;
    242c:	c8 01       	movw	r24, r16
    242e:	b7 01       	movw	r22, r14
    2430:	29 81       	ldd	r18, Y+1	; 0x01
    2432:	3a 81       	ldd	r19, Y+2	; 0x02
    2434:	4b 81       	ldd	r20, Y+3	; 0x03
    2436:	5c 81       	ldd	r21, Y+4	; 0x04
    2438:	0e 94 f7 22 	call	0x45ee	; 0x45ee <__mulsi3>
    243c:	67 2f       	mov	r22, r23
    243e:	78 2f       	mov	r23, r24
    2440:	89 2f       	mov	r24, r25
    2442:	99 27       	eor	r25, r25
    2444:	f6 01       	movw	r30, r12
    2446:	60 83       	st	Z, r22
    2448:	71 83       	std	Z+1, r23	; 0x01
    244a:	82 83       	std	Z+2, r24	; 0x02
    244c:	93 83       	std	Z+3, r25	; 0x03
  if (DEBUG_DDA && (debug_flags & DEBUG_DDA))
    sersendf_P(PSTR("Cross speed reduction from %lu to %lu\n"),
               F, current->crossF);

  return;
}
    244e:	a6 96       	adiw	r28, 0x26	; 38
    2450:	e2 e1       	ldi	r30, 0x12	; 18
    2452:	0c 94 83 23 	jmp	0x4706	; 0x4706 <__epilogue_restores__>

00002456 <muldivQR>:

  Found on  http://stackoverflow.com/questions/4144232/
  how-to-calculate-a-times-b-divided-by-c-only-using-32-bit-integer-types-even-i
*/
const int32_t muldivQR(int32_t multiplicand, uint32_t qn, uint32_t rn,
                       uint32_t divisor) {
    2456:	a4 e0       	ldi	r26, 0x04	; 4
    2458:	b0 e0       	ldi	r27, 0x00	; 0
    245a:	e1 e3       	ldi	r30, 0x31	; 49
    245c:	f2 e1       	ldi	r31, 0x12	; 18
    245e:	0c 94 67 23 	jmp	0x46ce	; 0x46ce <__prologue_saves__>
    2462:	3b 01       	movw	r6, r22
    2464:	4c 01       	movw	r8, r24
    2466:	29 83       	std	Y+1, r18	; 0x01
    2468:	3a 83       	std	Y+2, r19	; 0x02
    246a:	4b 83       	std	Y+3, r20	; 0x03
    246c:	5c 83       	std	Y+4, r21	; 0x04
    246e:	17 01       	movw	r2, r14
    2470:	28 01       	movw	r4, r16
  uint32_t quotient = 0;
  uint32_t remainder = 0;
  uint8_t negative_flag = 0;

  if (multiplicand < 0) {
    2472:	97 fd       	sbrc	r25, 7
    2474:	02 c0       	rjmp	.+4      	; 0x247a <muldivQR+0x24>
    2476:	60 e0       	ldi	r22, 0x00	; 0
    2478:	09 c0       	rjmp	.+18     	; 0x248c <muldivQR+0x36>
    negative_flag = 1;
    multiplicand = -multiplicand;
    247a:	90 94       	com	r9
    247c:	80 94       	com	r8
    247e:	70 94       	com	r7
    2480:	60 94       	com	r6
    2482:	61 1c       	adc	r6, r1
    2484:	71 1c       	adc	r7, r1
    2486:	81 1c       	adc	r8, r1
    2488:	91 1c       	adc	r9, r1
    248a:	61 e0       	ldi	r22, 0x01	; 1
    248c:	ee 24       	eor	r14, r14
    248e:	ff 24       	eor	r15, r15
    2490:	87 01       	movw	r16, r14
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	40 e0       	ldi	r20, 0x00	; 0
    2498:	50 e0       	ldi	r21, 0x00	; 0
    249a:	43 c0       	rjmp	.+134    	; 0x2522 <muldivQR+0xcc>
  }

  while(multiplicand) {
    if (multiplicand & 1) {
    249c:	c3 01       	movw	r24, r6
    249e:	81 70       	andi	r24, 0x01	; 1
    24a0:	90 70       	andi	r25, 0x00	; 0
    24a2:	89 2b       	or	r24, r25
    24a4:	d1 f0       	breq	.+52     	; 0x24da <muldivQR+0x84>
      quotient += qn;
    24a6:	89 81       	ldd	r24, Y+1	; 0x01
    24a8:	9a 81       	ldd	r25, Y+2	; 0x02
    24aa:	ab 81       	ldd	r26, Y+3	; 0x03
    24ac:	bc 81       	ldd	r27, Y+4	; 0x04
    24ae:	e8 0e       	add	r14, r24
    24b0:	f9 1e       	adc	r15, r25
    24b2:	0a 1f       	adc	r16, r26
    24b4:	1b 1f       	adc	r17, r27
      remainder += rn;
    24b6:	22 0d       	add	r18, r2
    24b8:	33 1d       	adc	r19, r3
    24ba:	44 1d       	adc	r20, r4
    24bc:	55 1d       	adc	r21, r5
      if (remainder >= divisor) {
    24be:	2a 15       	cp	r18, r10
    24c0:	3b 05       	cpc	r19, r11
    24c2:	4c 05       	cpc	r20, r12
    24c4:	5d 05       	cpc	r21, r13
    24c6:	48 f0       	brcs	.+18     	; 0x24da <muldivQR+0x84>
        quotient++;
    24c8:	08 94       	sec
    24ca:	e1 1c       	adc	r14, r1
    24cc:	f1 1c       	adc	r15, r1
    24ce:	01 1d       	adc	r16, r1
    24d0:	11 1d       	adc	r17, r1
        remainder -= divisor;
    24d2:	2a 19       	sub	r18, r10
    24d4:	3b 09       	sbc	r19, r11
    24d6:	4c 09       	sbc	r20, r12
    24d8:	5d 09       	sbc	r21, r13
      }
    }
    multiplicand  >>= 1;
    qn <<= 1;
    24da:	89 81       	ldd	r24, Y+1	; 0x01
    24dc:	9a 81       	ldd	r25, Y+2	; 0x02
    24de:	ab 81       	ldd	r26, Y+3	; 0x03
    24e0:	bc 81       	ldd	r27, Y+4	; 0x04
    24e2:	88 0f       	add	r24, r24
    24e4:	99 1f       	adc	r25, r25
    24e6:	aa 1f       	adc	r26, r26
    24e8:	bb 1f       	adc	r27, r27
    24ea:	89 83       	std	Y+1, r24	; 0x01
    24ec:	9a 83       	std	Y+2, r25	; 0x02
    24ee:	ab 83       	std	Y+3, r26	; 0x03
    24f0:	bc 83       	std	Y+4, r27	; 0x04
    rn <<= 1;
    24f2:	22 0c       	add	r2, r2
    24f4:	33 1c       	adc	r3, r3
    24f6:	44 1c       	adc	r4, r4
    24f8:	55 1c       	adc	r5, r5
    if (rn >= divisor) {
    24fa:	2a 14       	cp	r2, r10
    24fc:	3b 04       	cpc	r3, r11
    24fe:	4c 04       	cpc	r4, r12
    2500:	5d 04       	cpc	r5, r13
    2502:	58 f0       	brcs	.+22     	; 0x251a <muldivQR+0xc4>
      qn++; 
    2504:	01 96       	adiw	r24, 0x01	; 1
    2506:	a1 1d       	adc	r26, r1
    2508:	b1 1d       	adc	r27, r1
    250a:	89 83       	std	Y+1, r24	; 0x01
    250c:	9a 83       	std	Y+2, r25	; 0x02
    250e:	ab 83       	std	Y+3, r26	; 0x03
    2510:	bc 83       	std	Y+4, r27	; 0x04
      rn -= divisor;
    2512:	2a 18       	sub	r2, r10
    2514:	3b 08       	sbc	r3, r11
    2516:	4c 08       	sbc	r4, r12
    2518:	5d 08       	sbc	r5, r13
      if (remainder >= divisor) {
        quotient++;
        remainder -= divisor;
      }
    }
    multiplicand  >>= 1;
    251a:	95 94       	asr	r9
    251c:	87 94       	ror	r8
    251e:	77 94       	ror	r7
    2520:	67 94       	ror	r6
  if (multiplicand < 0) {
    negative_flag = 1;
    multiplicand = -multiplicand;
  }

  while(multiplicand) {
    2522:	61 14       	cp	r6, r1
    2524:	71 04       	cpc	r7, r1
    2526:	81 04       	cpc	r8, r1
    2528:	91 04       	cpc	r9, r1
    252a:	09 f0       	breq	.+2      	; 0x252e <muldivQR+0xd8>
    252c:	b7 cf       	rjmp	.-146    	; 0x249c <muldivQR+0x46>
      rn -= divisor;
    }
  }

  // rounding
  if (remainder > divisor / 2)
    252e:	d6 94       	lsr	r13
    2530:	c7 94       	ror	r12
    2532:	b7 94       	ror	r11
    2534:	a7 94       	ror	r10
    2536:	a2 16       	cp	r10, r18
    2538:	b3 06       	cpc	r11, r19
    253a:	c4 06       	cpc	r12, r20
    253c:	d5 06       	cpc	r13, r21
    253e:	28 f4       	brcc	.+10     	; 0x254a <muldivQR+0xf4>
    quotient++;
    2540:	08 94       	sec
    2542:	e1 1c       	adc	r14, r1
    2544:	f1 1c       	adc	r15, r1
    2546:	01 1d       	adc	r16, r1
    2548:	11 1d       	adc	r17, r1

  // remainder is valid here, but not returned
  return negative_flag ? -((int32_t)quotient) : (int32_t)quotient;
    254a:	66 23       	and	r22, r22
    254c:	41 f0       	breq	.+16     	; 0x255e <muldivQR+0x108>
    254e:	22 27       	eor	r18, r18
    2550:	33 27       	eor	r19, r19
    2552:	a9 01       	movw	r20, r18
    2554:	2e 19       	sub	r18, r14
    2556:	3f 09       	sbc	r19, r15
    2558:	40 0b       	sbc	r20, r16
    255a:	51 0b       	sbc	r21, r17
    255c:	02 c0       	rjmp	.+4      	; 0x2562 <muldivQR+0x10c>
    255e:	a8 01       	movw	r20, r16
    2560:	97 01       	movw	r18, r14
}
    2562:	b9 01       	movw	r22, r18
    2564:	ca 01       	movw	r24, r20
    2566:	24 96       	adiw	r28, 0x04	; 4
    2568:	e2 e1       	ldi	r30, 0x12	; 18
    256a:	0c 94 83 23 	jmp	0x4706	; 0x4706 <__epilogue_restores__>

0000256e <approx_distance>:
  \param dy distance in Y plane
  \return 3-part linear approximation of \f$\sqrt{\Delta x^2 + \Delta y^2}\f$

  see http://www.flipcode.com/archives/Fast_Approximate_Distance_Functions.shtml
*/
uint32_t approx_distance(uint32_t dx, uint32_t dy) {
    256e:	6f 92       	push	r6
    2570:	7f 92       	push	r7
    2572:	8f 92       	push	r8
    2574:	9f 92       	push	r9
    2576:	af 92       	push	r10
    2578:	bf 92       	push	r11
    257a:	cf 92       	push	r12
    257c:	df 92       	push	r13
    257e:	ef 92       	push	r14
    2580:	ff 92       	push	r15
    2582:	0f 93       	push	r16
    2584:	1f 93       	push	r17
  uint32_t min, max, approx;

  // If either axis is zero, return the other one.
  if (dx == 0 || dy == 0) return dx + dy;
    2586:	61 15       	cp	r22, r1
    2588:	71 05       	cpc	r23, r1
    258a:	81 05       	cpc	r24, r1
    258c:	91 05       	cpc	r25, r1
    258e:	29 f0       	breq	.+10     	; 0x259a <approx_distance+0x2c>
    2590:	21 15       	cp	r18, r1
    2592:	31 05       	cpc	r19, r1
    2594:	41 05       	cpc	r20, r1
    2596:	51 05       	cpc	r21, r1
    2598:	29 f4       	brne	.+10     	; 0x25a4 <approx_distance+0x36>
    259a:	26 0f       	add	r18, r22
    259c:	37 1f       	adc	r19, r23
    259e:	48 1f       	adc	r20, r24
    25a0:	59 1f       	adc	r21, r25
    25a2:	49 c0       	rjmp	.+146    	; 0x2636 <approx_distance+0xc8>

  if ( dx < dy ) {
    25a4:	62 17       	cp	r22, r18
    25a6:	73 07       	cpc	r23, r19
    25a8:	84 07       	cpc	r24, r20
    25aa:	95 07       	cpc	r25, r21
    25ac:	28 f0       	brcs	.+10     	; 0x25b8 <approx_distance+0x4a>
    25ae:	59 01       	movw	r10, r18
    25b0:	6a 01       	movw	r12, r20
    25b2:	3b 01       	movw	r6, r22
    25b4:	4c 01       	movw	r8, r24
    25b6:	04 c0       	rjmp	.+8      	; 0x25c0 <approx_distance+0x52>
    25b8:	5b 01       	movw	r10, r22
    25ba:	6c 01       	movw	r12, r24
    25bc:	39 01       	movw	r6, r18
    25be:	4a 01       	movw	r8, r20
  } else {
    min = dy;
    max = dx;
  }

  approx = ( max * 1007 ) + ( min * 441 );
    25c0:	c6 01       	movw	r24, r12
    25c2:	b5 01       	movw	r22, r10
    25c4:	29 eb       	ldi	r18, 0xB9	; 185
    25c6:	31 e0       	ldi	r19, 0x01	; 1
    25c8:	40 e0       	ldi	r20, 0x00	; 0
    25ca:	50 e0       	ldi	r21, 0x00	; 0
    25cc:	0e 94 f7 22 	call	0x45ee	; 0x45ee <__mulsi3>
    25d0:	7b 01       	movw	r14, r22
    25d2:	8c 01       	movw	r16, r24
    25d4:	c4 01       	movw	r24, r8
    25d6:	b3 01       	movw	r22, r6
    25d8:	2f ee       	ldi	r18, 0xEF	; 239
    25da:	33 e0       	ldi	r19, 0x03	; 3
    25dc:	40 e0       	ldi	r20, 0x00	; 0
    25de:	50 e0       	ldi	r21, 0x00	; 0
    25e0:	0e 94 f7 22 	call	0x45ee	; 0x45ee <__mulsi3>
    25e4:	e6 0e       	add	r14, r22
    25e6:	f7 1e       	adc	r15, r23
    25e8:	08 1f       	adc	r16, r24
    25ea:	19 1f       	adc	r17, r25
  if ( max < ( min << 4 ))
    25ec:	a4 e0       	ldi	r26, 0x04	; 4
    25ee:	aa 0c       	add	r10, r10
    25f0:	bb 1c       	adc	r11, r11
    25f2:	cc 1c       	adc	r12, r12
    25f4:	dd 1c       	adc	r13, r13
    25f6:	aa 95       	dec	r26
    25f8:	d1 f7       	brne	.-12     	; 0x25ee <approx_distance+0x80>
    25fa:	6a 14       	cp	r6, r10
    25fc:	7b 04       	cpc	r7, r11
    25fe:	8c 04       	cpc	r8, r12
    2600:	9d 04       	cpc	r9, r13
    2602:	60 f4       	brcc	.+24     	; 0x261c <approx_distance+0xae>
    approx -= ( max * 40 );
    2604:	c4 01       	movw	r24, r8
    2606:	b3 01       	movw	r22, r6
    2608:	28 e2       	ldi	r18, 0x28	; 40
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	40 e0       	ldi	r20, 0x00	; 0
    260e:	50 e0       	ldi	r21, 0x00	; 0
    2610:	0e 94 f7 22 	call	0x45ee	; 0x45ee <__mulsi3>
    2614:	e6 1a       	sub	r14, r22
    2616:	f7 0a       	sbc	r15, r23
    2618:	08 0b       	sbc	r16, r24
    261a:	19 0b       	sbc	r17, r25

  // add 512 for proper rounding
  return (( approx + 512 ) >> 10 );
    261c:	a8 01       	movw	r20, r16
    261e:	97 01       	movw	r18, r14
    2620:	20 50       	subi	r18, 0x00	; 0
    2622:	3e 4f       	sbci	r19, 0xFE	; 254
    2624:	4f 4f       	sbci	r20, 0xFF	; 255
    2626:	5f 4f       	sbci	r21, 0xFF	; 255
    2628:	fa e0       	ldi	r31, 0x0A	; 10
    262a:	56 95       	lsr	r21
    262c:	47 95       	ror	r20
    262e:	37 95       	ror	r19
    2630:	27 95       	ror	r18
    2632:	fa 95       	dec	r31
    2634:	d1 f7       	brne	.-12     	; 0x262a <approx_distance+0xbc>
}
    2636:	b9 01       	movw	r22, r18
    2638:	ca 01       	movw	r24, r20
    263a:	1f 91       	pop	r17
    263c:	0f 91       	pop	r16
    263e:	ff 90       	pop	r15
    2640:	ef 90       	pop	r14
    2642:	df 90       	pop	r13
    2644:	cf 90       	pop	r12
    2646:	bf 90       	pop	r11
    2648:	af 90       	pop	r10
    264a:	9f 90       	pop	r9
    264c:	8f 90       	pop	r8
    264e:	7f 90       	pop	r7
    2650:	6f 90       	pop	r6
    2652:	08 95       	ret

00002654 <approx_distance_3>:
  \param dz distance in Z plane
  \return 3-part linear approximation of \f$\sqrt{\Delta x^2 + \Delta y^2 + \Delta z^2}\f$

  see http://www.oroboro.com/rafael/docserv.php/index/programming/article/distance
*/
uint32_t approx_distance_3(uint32_t dx, uint32_t dy, uint32_t dz) {
    2654:	2f 92       	push	r2
    2656:	3f 92       	push	r3
    2658:	4f 92       	push	r4
    265a:	5f 92       	push	r5
    265c:	6f 92       	push	r6
    265e:	7f 92       	push	r7
    2660:	8f 92       	push	r8
    2662:	9f 92       	push	r9
    2664:	af 92       	push	r10
    2666:	bf 92       	push	r11
    2668:	cf 92       	push	r12
    266a:	df 92       	push	r13
    266c:	ef 92       	push	r14
    266e:	ff 92       	push	r15
    2670:	0f 93       	push	r16
    2672:	1f 93       	push	r17
  uint32_t min, med, max, approx;

  if ( dx < dy ) {
    2674:	62 17       	cp	r22, r18
    2676:	73 07       	cpc	r23, r19
    2678:	84 07       	cpc	r24, r20
    267a:	95 07       	cpc	r25, r21
    267c:	28 f0       	brcs	.+10     	; 0x2688 <approx_distance_3+0x34>
    267e:	1b 01       	movw	r2, r22
    2680:	2c 01       	movw	r4, r24
    2682:	39 01       	movw	r6, r18
    2684:	4a 01       	movw	r8, r20
    2686:	04 c0       	rjmp	.+8      	; 0x2690 <approx_distance_3+0x3c>
    2688:	19 01       	movw	r2, r18
    268a:	2a 01       	movw	r4, r20
    268c:	3b 01       	movw	r6, r22
    268e:	4c 01       	movw	r8, r24
  } else {
    min = dx;
    med = dy;
  }

  if ( dz < min ) {
    2690:	e2 14       	cp	r14, r2
    2692:	f3 04       	cpc	r15, r3
    2694:	04 05       	cpc	r16, r4
    2696:	15 05       	cpc	r17, r5
    2698:	38 f4       	brcc	.+14     	; 0x26a8 <approx_distance_3+0x54>
    269a:	64 01       	movw	r12, r8
    269c:	53 01       	movw	r10, r6
    269e:	42 01       	movw	r8, r4
    26a0:	31 01       	movw	r6, r2
    26a2:	17 01       	movw	r2, r14
    26a4:	28 01       	movw	r4, r16
    26a6:	0c c0       	rjmp	.+24     	; 0x26c0 <approx_distance_3+0x6c>
    max = med;
    med = min;
    min = dz;
  } else if ( dz < med ) {
    26a8:	e6 14       	cp	r14, r6
    26aa:	f7 04       	cpc	r15, r7
    26ac:	08 05       	cpc	r16, r8
    26ae:	19 05       	cpc	r17, r9
    26b0:	18 f0       	brcs	.+6      	; 0x26b8 <approx_distance_3+0x64>
    26b2:	57 01       	movw	r10, r14
    26b4:	68 01       	movw	r12, r16
    26b6:	04 c0       	rjmp	.+8      	; 0x26c0 <approx_distance_3+0x6c>
    26b8:	64 01       	movw	r12, r8
    26ba:	53 01       	movw	r10, r6
    26bc:	37 01       	movw	r6, r14
    26be:	48 01       	movw	r8, r16
    med = dz;
  } else {
    max = dz;
  }

  approx = ( max * 860 ) + ( med * 851 ) + ( min * 520 );
    26c0:	c4 01       	movw	r24, r8
    26c2:	b3 01       	movw	r22, r6
    26c4:	23 e5       	ldi	r18, 0x53	; 83
    26c6:	33 e0       	ldi	r19, 0x03	; 3
    26c8:	40 e0       	ldi	r20, 0x00	; 0
    26ca:	50 e0       	ldi	r21, 0x00	; 0
    26cc:	0e 94 f7 22 	call	0x45ee	; 0x45ee <__mulsi3>
    26d0:	7b 01       	movw	r14, r22
    26d2:	8c 01       	movw	r16, r24
    26d4:	c6 01       	movw	r24, r12
    26d6:	b5 01       	movw	r22, r10
    26d8:	2c e5       	ldi	r18, 0x5C	; 92
    26da:	33 e0       	ldi	r19, 0x03	; 3
    26dc:	40 e0       	ldi	r20, 0x00	; 0
    26de:	50 e0       	ldi	r21, 0x00	; 0
    26e0:	0e 94 f7 22 	call	0x45ee	; 0x45ee <__mulsi3>
    26e4:	e6 0e       	add	r14, r22
    26e6:	f7 1e       	adc	r15, r23
    26e8:	08 1f       	adc	r16, r24
    26ea:	19 1f       	adc	r17, r25
    26ec:	c2 01       	movw	r24, r4
    26ee:	b1 01       	movw	r22, r2
    26f0:	28 e0       	ldi	r18, 0x08	; 8
    26f2:	32 e0       	ldi	r19, 0x02	; 2
    26f4:	40 e0       	ldi	r20, 0x00	; 0
    26f6:	50 e0       	ldi	r21, 0x00	; 0
    26f8:	0e 94 f7 22 	call	0x45ee	; 0x45ee <__mulsi3>
    26fc:	e6 0e       	add	r14, r22
    26fe:	f7 1e       	adc	r15, r23
    2700:	08 1f       	adc	r16, r24
    2702:	19 1f       	adc	r17, r25
  if ( max < ( med << 1 )) approx -= ( max * 294 );
    2704:	d4 01       	movw	r26, r8
    2706:	c3 01       	movw	r24, r6
    2708:	88 0f       	add	r24, r24
    270a:	99 1f       	adc	r25, r25
    270c:	aa 1f       	adc	r26, r26
    270e:	bb 1f       	adc	r27, r27
    2710:	a8 16       	cp	r10, r24
    2712:	b9 06       	cpc	r11, r25
    2714:	ca 06       	cpc	r12, r26
    2716:	db 06       	cpc	r13, r27
    2718:	60 f4       	brcc	.+24     	; 0x2732 <approx_distance_3+0xde>
    271a:	c6 01       	movw	r24, r12
    271c:	b5 01       	movw	r22, r10
    271e:	26 e2       	ldi	r18, 0x26	; 38
    2720:	31 e0       	ldi	r19, 0x01	; 1
    2722:	40 e0       	ldi	r20, 0x00	; 0
    2724:	50 e0       	ldi	r21, 0x00	; 0
    2726:	0e 94 f7 22 	call	0x45ee	; 0x45ee <__mulsi3>
    272a:	e6 1a       	sub	r14, r22
    272c:	f7 0a       	sbc	r15, r23
    272e:	08 0b       	sbc	r16, r24
    2730:	19 0b       	sbc	r17, r25
  if ( max < ( min << 2 )) approx -= ( max * 113 );
    2732:	82 e0       	ldi	r24, 0x02	; 2
    2734:	22 0c       	add	r2, r2
    2736:	33 1c       	adc	r3, r3
    2738:	44 1c       	adc	r4, r4
    273a:	55 1c       	adc	r5, r5
    273c:	8a 95       	dec	r24
    273e:	d1 f7       	brne	.-12     	; 0x2734 <approx_distance_3+0xe0>
    2740:	a2 14       	cp	r10, r2
    2742:	b3 04       	cpc	r11, r3
    2744:	c4 04       	cpc	r12, r4
    2746:	d5 04       	cpc	r13, r5
    2748:	60 f4       	brcc	.+24     	; 0x2762 <approx_distance_3+0x10e>
    274a:	c6 01       	movw	r24, r12
    274c:	b5 01       	movw	r22, r10
    274e:	21 e7       	ldi	r18, 0x71	; 113
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	40 e0       	ldi	r20, 0x00	; 0
    2754:	50 e0       	ldi	r21, 0x00	; 0
    2756:	0e 94 f7 22 	call	0x45ee	; 0x45ee <__mulsi3>
    275a:	e6 1a       	sub	r14, r22
    275c:	f7 0a       	sbc	r15, r23
    275e:	08 0b       	sbc	r16, r24
    2760:	19 0b       	sbc	r17, r25
  if ( med < ( min << 2 )) approx -= ( med *  40 );
    2762:	62 14       	cp	r6, r2
    2764:	73 04       	cpc	r7, r3
    2766:	84 04       	cpc	r8, r4
    2768:	95 04       	cpc	r9, r5
    276a:	60 f4       	brcc	.+24     	; 0x2784 <approx_distance_3+0x130>
    276c:	c4 01       	movw	r24, r8
    276e:	b3 01       	movw	r22, r6
    2770:	28 e2       	ldi	r18, 0x28	; 40
    2772:	30 e0       	ldi	r19, 0x00	; 0
    2774:	40 e0       	ldi	r20, 0x00	; 0
    2776:	50 e0       	ldi	r21, 0x00	; 0
    2778:	0e 94 f7 22 	call	0x45ee	; 0x45ee <__mulsi3>
    277c:	e6 1a       	sub	r14, r22
    277e:	f7 0a       	sbc	r15, r23
    2780:	08 0b       	sbc	r16, r24
    2782:	19 0b       	sbc	r17, r25
    2784:	a8 01       	movw	r20, r16
    2786:	97 01       	movw	r18, r14
    2788:	20 50       	subi	r18, 0x00	; 0
    278a:	3e 4f       	sbci	r19, 0xFE	; 254
    278c:	4f 4f       	sbci	r20, 0xFF	; 255
    278e:	5f 4f       	sbci	r21, 0xFF	; 255
    2790:	ba e0       	ldi	r27, 0x0A	; 10
    2792:	56 95       	lsr	r21
    2794:	47 95       	ror	r20
    2796:	37 95       	ror	r19
    2798:	27 95       	ror	r18
    279a:	ba 95       	dec	r27
    279c:	d1 f7       	brne	.-12     	; 0x2792 <approx_distance_3+0x13e>

  // add 512 for proper rounding
  return (( approx + 512 ) >> 10 );
}
    279e:	b9 01       	movw	r22, r18
    27a0:	ca 01       	movw	r24, r20
    27a2:	1f 91       	pop	r17
    27a4:	0f 91       	pop	r16
    27a6:	ff 90       	pop	r15
    27a8:	ef 90       	pop	r14
    27aa:	df 90       	pop	r13
    27ac:	cf 90       	pop	r12
    27ae:	bf 90       	pop	r11
    27b0:	af 90       	pop	r10
    27b2:	9f 90       	pop	r9
    27b4:	8f 90       	pop	r8
    27b6:	7f 90       	pop	r7
    27b8:	6f 90       	pop	r6
    27ba:	5f 90       	pop	r5
    27bc:	4f 90       	pop	r4
    27be:	3f 90       	pop	r3
    27c0:	2f 90       	pop	r2
    27c2:	08 95       	ret

000027c4 <int_inv_sqrt>:
  \param a find the inverse of the square root of this number
  \return 0x1000 / sqrt(a) - 1 < returnvalue <= 0x1000 / sqrt(a)

  This is a binary search but it uses only the minimum required bits for each step.
*/
uint16_t int_inv_sqrt(uint16_t a) {
    27c4:	a0 e0       	ldi	r26, 0x00	; 0
    27c6:	b0 e0       	ldi	r27, 0x00	; 0
    27c8:	e8 ee       	ldi	r30, 0xE8	; 232
    27ca:	f3 e1       	ldi	r31, 0x13	; 19
    27cc:	0c 94 6f 23 	jmp	0x46de	; 0x46de <__prologue_saves__+0x10>
    27d0:	bc 01       	movw	r22, r24
  /// the 0xFFFFU instead of 0x10000UL hack allows using 16bits and 8bits
  /// variable for the first 8 steps without overflowing and it seems to
  /// give better results for the ramping equation too :)
  uint8_t z = 0, i;
  uint16_t x, j;
  uint32_t q = ((uint32_t)(0xFFFFU / a)) << 8;
    27d2:	8f ef       	ldi	r24, 0xFF	; 255
    27d4:	9f ef       	ldi	r25, 0xFF	; 255
    27d6:	0e 94 16 23 	call	0x462c	; 0x462c <__udivmodhi4>
    27da:	80 e0       	ldi	r24, 0x00	; 0
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	aa 24       	eor	r10, r10
    27e0:	b6 2e       	mov	r11, r22
    27e2:	c7 2e       	mov	r12, r23
    27e4:	d8 2e       	mov	r13, r24
  for (i = 0x80; i; i >>= 1) {
    uint16_t y;

    z |= i;
    y = (uint16_t)z * z;
    if (y > (q >> 8))
    27e6:	11 27       	eor	r17, r17
    27e8:	0d 2d       	mov	r16, r13
    27ea:	fc 2c       	mov	r15, r12
    27ec:	eb 2c       	mov	r14, r11
    27ee:	20 e0       	ldi	r18, 0x00	; 0
    27f0:	30 e8       	ldi	r19, 0x80	; 128
    27f2:	60 e0       	ldi	r22, 0x00	; 0
    27f4:	70 e0       	ldi	r23, 0x00	; 0
  uint32_t q = ((uint32_t)(0xFFFFU / a)) << 8;

  for (i = 0x80; i; i >>= 1) {
    uint16_t y;

    z |= i;
    27f6:	23 2b       	or	r18, r19
    y = (uint16_t)z * z;
    27f8:	82 2f       	mov	r24, r18
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    if (y > (q >> 8))
    27fc:	ac 01       	movw	r20, r24
    27fe:	44 9f       	mul	r20, r20
    2800:	c0 01       	movw	r24, r0
    2802:	45 9f       	mul	r20, r21
    2804:	90 0d       	add	r25, r0
    2806:	54 9f       	mul	r21, r20
    2808:	90 0d       	add	r25, r0
    280a:	11 24       	eor	r1, r1
    280c:	a0 e0       	ldi	r26, 0x00	; 0
    280e:	b0 e0       	ldi	r27, 0x00	; 0
    2810:	e8 16       	cp	r14, r24
    2812:	f9 06       	cpc	r15, r25
    2814:	0a 07       	cpc	r16, r26
    2816:	1b 07       	cpc	r17, r27
    2818:	08 f4       	brcc	.+2      	; 0x281c <int_inv_sqrt+0x58>
      z ^= i;
    281a:	23 27       	eor	r18, r19
  /// give better results for the ramping equation too :)
  uint8_t z = 0, i;
  uint16_t x, j;
  uint32_t q = ((uint32_t)(0xFFFFU / a)) << 8;

  for (i = 0x80; i; i >>= 1) {
    281c:	36 95       	lsr	r19
    281e:	6f 5f       	subi	r22, 0xFF	; 255
    2820:	7f 4f       	sbci	r23, 0xFF	; 255
    2822:	68 30       	cpi	r22, 0x08	; 8
    2824:	71 05       	cpc	r23, r1
    2826:	39 f7       	brne	.-50     	; 0x27f6 <int_inv_sqrt+0x32>
    y = (uint16_t)z * z;
    if (y > (q >> 8))
      z ^= i;
  }

  x = z << 4;
    2828:	c2 2f       	mov	r28, r18
    282a:	d0 e0       	ldi	r29, 0x00	; 0
    282c:	94 e0       	ldi	r25, 0x04	; 4
    282e:	cc 0f       	add	r28, r28
    2830:	dd 1f       	adc	r29, r29
    2832:	9a 95       	dec	r25
    2834:	e1 f7       	brne	.-8      	; 0x282e <int_inv_sqrt+0x6a>
    2836:	08 e0       	ldi	r16, 0x08	; 8
    2838:	10 e0       	ldi	r17, 0x00	; 0
    283a:	ee 24       	eor	r14, r14
    283c:	ff 24       	eor	r15, r15
  for (j = 0x8; j; j >>= 1) {
    uint32_t y;

    x |= j;
    283e:	c0 2b       	or	r28, r16
    2840:	d1 2b       	or	r29, r17
    y = (uint32_t)x * x;
    2842:	9e 01       	movw	r18, r28
    2844:	40 e0       	ldi	r20, 0x00	; 0
    2846:	50 e0       	ldi	r21, 0x00	; 0
    if (y > q)
    2848:	ca 01       	movw	r24, r20
    284a:	b9 01       	movw	r22, r18
    284c:	0e 94 f7 22 	call	0x45ee	; 0x45ee <__mulsi3>
    2850:	a6 16       	cp	r10, r22
    2852:	b7 06       	cpc	r11, r23
    2854:	c8 06       	cpc	r12, r24
    2856:	d9 06       	cpc	r13, r25
    2858:	10 f4       	brcc	.+4      	; 0x285e <int_inv_sqrt+0x9a>
      x ^= j;
    285a:	c0 27       	eor	r28, r16
    285c:	d1 27       	eor	r29, r17
    if (y > (q >> 8))
      z ^= i;
  }

  x = z << 4;
  for (j = 0x8; j; j >>= 1) {
    285e:	16 95       	lsr	r17
    2860:	07 95       	ror	r16
    2862:	08 94       	sec
    2864:	e1 1c       	adc	r14, r1
    2866:	f1 1c       	adc	r15, r1
    2868:	54 e0       	ldi	r21, 0x04	; 4
    286a:	e5 16       	cp	r14, r21
    286c:	f1 04       	cpc	r15, r1
    286e:	39 f7       	brne	.-50     	; 0x283e <int_inv_sqrt+0x7a>
    if (y > q)
      x ^= j;
  }

  return x;
}
    2870:	ce 01       	movw	r24, r28
    2872:	cd b7       	in	r28, 0x3d	; 61
    2874:	de b7       	in	r29, 0x3e	; 62
    2876:	ea e0       	ldi	r30, 0x0A	; 10
    2878:	0c 94 8b 23 	jmp	0x4716	; 0x4716 <__epilogue_restores__+0x10>

0000287c <acc_ramp_len>:
 *
 * Note: this function has shown to be accurate between 10 and 10'000 mm/s2 and
 *       2000 to 4096000 steps/m (and higher). The numbers are a few percent
 *       too high at very low acceleration. Test code see commit message.
 */
uint32_t acc_ramp_len(uint32_t feedrate, uint32_t steps_per_m) {
    287c:	af 92       	push	r10
    287e:	bf 92       	push	r11
    2880:	cf 92       	push	r12
    2882:	df 92       	push	r13
    2884:	ef 92       	push	r14
    2886:	ff 92       	push	r15
    2888:	0f 93       	push	r16
    288a:	1f 93       	push	r17
    288c:	7b 01       	movw	r14, r22
    288e:	8c 01       	movw	r16, r24
    2890:	59 01       	movw	r10, r18
    2892:	6a 01       	movw	r12, r20
    2894:	a8 01       	movw	r20, r16
    2896:	97 01       	movw	r18, r14
    2898:	0e 94 f7 22 	call	0x45ee	; 0x45ee <__mulsi3>
    289c:	0e 94 41 22 	call	0x4482	; 0x4482 <__floatunsisf>
    28a0:	7b 01       	movw	r14, r22
    28a2:	8c 01       	movw	r16, r24
    28a4:	c6 01       	movw	r24, r12
    28a6:	b5 01       	movw	r22, r10
    28a8:	0e 94 41 22 	call	0x4482	; 0x4482 <__floatunsisf>
    28ac:	9b 01       	movw	r18, r22
    28ae:	ac 01       	movw	r20, r24
    28b0:	60 e5       	ldi	r22, 0x50	; 80
    28b2:	79 ea       	ldi	r23, 0xA9	; 169
    28b4:	8b e2       	ldi	r24, 0x2B	; 43
    28b6:	9e e4       	ldi	r25, 0x4E	; 78
    28b8:	0e 94 ad 21 	call	0x435a	; 0x435a <__divsf3>
    28bc:	9b 01       	movw	r18, r22
    28be:	ac 01       	movw	r20, r24
    28c0:	c8 01       	movw	r24, r16
    28c2:	b7 01       	movw	r22, r14
    28c4:	0e 94 ad 21 	call	0x435a	; 0x435a <__divsf3>
    28c8:	0e 94 15 22 	call	0x442a	; 0x442a <__fixunssfsi>
    28cc:	9b 01       	movw	r18, r22
    28ce:	ac 01       	movw	r20, r24
  return (feedrate * feedrate) /
         (((uint32_t)7200000UL * ACCELERATION) / steps_per_m);
}
    28d0:	ca 01       	movw	r24, r20
    28d2:	1f 91       	pop	r17
    28d4:	0f 91       	pop	r16
    28d6:	ff 90       	pop	r15
    28d8:	ef 90       	pop	r14
    28da:	df 90       	pop	r13
    28dc:	cf 90       	pop	r12
    28de:	bf 90       	pop	r11
    28e0:	af 90       	pop	r10
    28e2:	08 95       	ret

000028e4 <queue_full>:
DDA BSS movebuffer[MOVEBUFFER_SIZE];

/// check if the queue is completely full
uint8_t queue_full() {
	MEMORY_BARRIER();
	if (mb_tail > mb_head) {
    28e4:	90 91 a9 02 	lds	r25, 0x02A9
    28e8:	80 91 a8 02 	lds	r24, 0x02A8
    28ec:	29 2f       	mov	r18, r25
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	48 2f       	mov	r20, r24
    28f2:	50 e0       	ldi	r21, 0x00	; 0
    28f4:	89 17       	cp	r24, r25
    28f6:	30 f4       	brcc	.+12     	; 0x2904 <queue_full+0x20>
		return ((mb_tail - mb_head - 1) == 0) ? 255 : 0;
    28f8:	24 1b       	sub	r18, r20
    28fa:	35 0b       	sbc	r19, r21
    28fc:	21 30       	cpi	r18, 0x01	; 1
    28fe:	31 05       	cpc	r19, r1
    2900:	31 f4       	brne	.+12     	; 0x290e <queue_full+0x2a>
    2902:	07 c0       	rjmp	.+14     	; 0x2912 <queue_full+0x2e>
	} else {
		return ((mb_tail + MOVEBUFFER_SIZE - mb_head - 1) == 0) ? 255 : 0;
    2904:	29 5f       	subi	r18, 0xF9	; 249
    2906:	3f 4f       	sbci	r19, 0xFF	; 255
    2908:	24 17       	cp	r18, r20
    290a:	35 07       	cpc	r19, r21
    290c:	11 f0       	breq	.+4      	; 0x2912 <queue_full+0x2e>
    290e:	80 e0       	ldi	r24, 0x00	; 0
    2910:	08 95       	ret
    2912:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    2914:	08 95       	ret

00002916 <queue_empty>:

/// check if the queue is completely empty
uint8_t queue_empty() {
  uint8_t result;

  ATOMIC_START
    2916:	4f b7       	in	r20, 0x3f	; 63
    2918:	f8 94       	cli
    result = ((mb_tail == mb_head) && (movebuffer[mb_tail].live == 0))?255:0;
    291a:	20 91 a9 02 	lds	r18, 0x02A9
    291e:	80 91 a8 02 	lds	r24, 0x02A8
    2922:	28 17       	cp	r18, r24
    2924:	89 f4       	brne	.+34     	; 0x2948 <queue_empty+0x32>
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	8b e6       	ldi	r24, 0x6B	; 107
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	28 9f       	mul	r18, r24
    292e:	f0 01       	movw	r30, r0
    2930:	29 9f       	mul	r18, r25
    2932:	f0 0d       	add	r31, r0
    2934:	38 9f       	mul	r19, r24
    2936:	f0 0d       	add	r31, r0
    2938:	11 24       	eor	r1, r1
    293a:	e1 54       	subi	r30, 0x41	; 65
    293c:	fd 4f       	sbci	r31, 0xFD	; 253
    293e:	80 81       	ld	r24, Z
    2940:	81 fd       	sbrc	r24, 1
    2942:	02 c0       	rjmp	.+4      	; 0x2948 <queue_empty+0x32>
    2944:	8f ef       	ldi	r24, 0xFF	; 255
    2946:	01 c0       	rjmp	.+2      	; 0x294a <queue_empty+0x34>
    2948:	80 e0       	ldi	r24, 0x00	; 0
  ATOMIC_END
    294a:	4f bf       	out	0x3f, r20	; 63

	return result;
}
    294c:	08 95       	ret

0000294e <queue_current_movement>:

/// Return the current movement, or NULL, if there's no movement going on.
DDA *queue_current_movement() {
  DDA* current;

  ATOMIC_START
    294e:	2f b7       	in	r18, 0x3f	; 63
    2950:	f8 94       	cli
    current = &movebuffer[mb_tail];
    2952:	90 91 a9 02 	lds	r25, 0x02A9
    2956:	8b e6       	ldi	r24, 0x6B	; 107
    2958:	98 9f       	mul	r25, r24
    295a:	f0 01       	movw	r30, r0
    295c:	11 24       	eor	r1, r1
    295e:	e6 55       	subi	r30, 0x56	; 86
    2960:	fd 4f       	sbci	r31, 0xFD	; 253

    if ( ! current->live || current->waitfor_temp || current->nullmove)
    2962:	85 89       	ldd	r24, Z+21	; 0x15
    2964:	81 ff       	sbrs	r24, 1
    2966:	04 c0       	rjmp	.+8      	; 0x2970 <queue_current_movement+0x22>
    2968:	83 fd       	sbrc	r24, 3
    296a:	02 c0       	rjmp	.+4      	; 0x2970 <queue_current_movement+0x22>
    296c:	80 ff       	sbrs	r24, 0
    296e:	02 c0       	rjmp	.+4      	; 0x2974 <queue_current_movement+0x26>
    2970:	e0 e0       	ldi	r30, 0x00	; 0
    2972:	f0 e0       	ldi	r31, 0x00	; 0
      current = NULL;
  ATOMIC_END
    2974:	2f bf       	out	0x3f, r18	; 63

  return current;
}
    2976:	cf 01       	movw	r24, r30
    2978:	08 95       	ret

0000297a <queue_flush>:
/// \todo effect on startpoint is undefined!
void queue_flush() {

  // if the timer were running, this would require
  // wrapping in ATOMIC_START ... ATOMIC_END.
  mb_tail = mb_head;
    297a:	80 91 a8 02 	lds	r24, 0x02A8
    297e:	80 93 a9 02 	sts	0x02A9, r24
  movebuffer[mb_head].live = 0;
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	2b e6       	ldi	r18, 0x6B	; 107
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	82 9f       	mul	r24, r18
    298a:	f0 01       	movw	r30, r0
    298c:	83 9f       	mul	r24, r19
    298e:	f0 0d       	add	r31, r0
    2990:	92 9f       	mul	r25, r18
    2992:	f0 0d       	add	r31, r0
    2994:	11 24       	eor	r1, r1
    2996:	e1 54       	subi	r30, 0x41	; 65
    2998:	fd 4f       	sbci	r31, 0xFD	; 253
    299a:	80 81       	ld	r24, Z
    299c:	8d 7f       	andi	r24, 0xFD	; 253
    299e:	80 83       	st	Z, r24
}
    29a0:	08 95       	ret

000029a2 <queue_wait>:

/// wait for queue to empty
void queue_wait() {
    29a2:	02 c0       	rjmp	.+4      	; 0x29a8 <queue_wait+0x6>
	while (queue_empty() == 0)
		clock();
    29a4:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <clock>

/// check if the queue is completely empty
uint8_t queue_empty() {
  uint8_t result;

  ATOMIC_START
    29a8:	4f b7       	in	r20, 0x3f	; 63
    29aa:	f8 94       	cli
    result = ((mb_tail == mb_head) && (movebuffer[mb_tail].live == 0))?255:0;
    29ac:	20 91 a9 02 	lds	r18, 0x02A9
    29b0:	80 91 a8 02 	lds	r24, 0x02A8
    29b4:	28 17       	cp	r18, r24
    29b6:	89 f4       	brne	.+34     	; 0x29da <queue_wait+0x38>
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	8b e6       	ldi	r24, 0x6B	; 107
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	28 9f       	mul	r18, r24
    29c0:	f0 01       	movw	r30, r0
    29c2:	29 9f       	mul	r18, r25
    29c4:	f0 0d       	add	r31, r0
    29c6:	38 9f       	mul	r19, r24
    29c8:	f0 0d       	add	r31, r0
    29ca:	11 24       	eor	r1, r1
    29cc:	e1 54       	subi	r30, 0x41	; 65
    29ce:	fd 4f       	sbci	r31, 0xFD	; 253
    29d0:	80 81       	ld	r24, Z
    29d2:	81 fd       	sbrc	r24, 1
    29d4:	02 c0       	rjmp	.+4      	; 0x29da <queue_wait+0x38>
    29d6:	8f ef       	ldi	r24, 0xFF	; 255
    29d8:	01 c0       	rjmp	.+2      	; 0x29dc <queue_wait+0x3a>
    29da:	80 e0       	ldi	r24, 0x00	; 0
  ATOMIC_END
    29dc:	4f bf       	out	0x3f, r20	; 63
  movebuffer[mb_head].live = 0;
}

/// wait for queue to empty
void queue_wait() {
	while (queue_empty() == 0)
    29de:	88 23       	and	r24, r24
    29e0:	09 f3       	breq	.-62     	; 0x29a4 <queue_wait+0x2>
		clock();
}
    29e2:	08 95       	ret

000029e4 <next_move>:
/// be interrupted such that it can be re-entered from within an interrupt.
/// The timer interrupt MUST be disabled on entry. This is ensured because
/// the timer was disabled at the start of the ISR or else because the current
/// move buffer was dead in the non-interrupt case (which indicates that the 
/// timer interrupt is disabled).
void next_move() {
    29e4:	cf 93       	push	r28
    29e6:	df 93       	push	r29
    29e8:	1f c0       	rjmp	.+62     	; 0x2a28 <next_move+0x44>
	while ((queue_empty() == 0) && (movebuffer[mb_tail].live == 0)) {
		// next item
		uint8_t t = mb_tail + 1;
    29ea:	84 2f       	mov	r24, r20
    29ec:	8f 5f       	subi	r24, 0xFF	; 255
		t &= (MOVEBUFFER_SIZE - 1);
    29ee:	87 70       	andi	r24, 0x07	; 7
		DDA* current_movebuffer = &movebuffer[t];
    29f0:	9b e6       	ldi	r25, 0x6B	; 107
    29f2:	89 9f       	mul	r24, r25
    29f4:	e0 01       	movw	r28, r0
    29f6:	11 24       	eor	r1, r1
    29f8:	c6 55       	subi	r28, 0x56	; 86
    29fa:	dd 4f       	sbci	r29, 0xFD	; 253
		// tail must be set before setTimer call as setTimer
		// reenables the timer interrupt, potentially exposing
		// mb_tail to the timer interrupt routine. 
		mb_tail = t;
    29fc:	80 93 a9 02 	sts	0x02A9, r24
		if (current_movebuffer->waitfor_temp) {
    2a00:	8d 89       	ldd	r24, Y+21	; 0x15
    2a02:	83 ff       	sbrs	r24, 3
    2a04:	0e c0       	rjmp	.+28     	; 0x2a22 <next_move+0x3e>
			serial_writestr_P(PSTR("Waiting for target temp\n"));
    2a06:	89 e4       	ldi	r24, 0x49	; 73
    2a08:	92 e0       	ldi	r25, 0x02	; 2
    2a0a:	0e 94 c7 1e 	call	0x3d8e	; 0x3d8e <serial_writestr_P>
			current_movebuffer->live = 1;
    2a0e:	8d 89       	ldd	r24, Y+21	; 0x15
    2a10:	82 60       	ori	r24, 0x02	; 2
    2a12:	8d 8b       	std	Y+21, r24	; 0x15
			setTimer(HEATER_WAIT_TIMEOUT);
    2a14:	60 e0       	ldi	r22, 0x00	; 0
    2a16:	74 e2       	ldi	r23, 0x24	; 36
    2a18:	84 ef       	ldi	r24, 0xF4	; 244
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	0e 94 8c 20 	call	0x4118	; 0x4118 <setTimer>
    2a20:	03 c0       	rjmp	.+6      	; 0x2a28 <next_move+0x44>
		}
		else {
			dda_start(current_movebuffer);
    2a22:	ce 01       	movw	r24, r28
    2a24:	0e 94 b0 08 	call	0x1160	; 0x1160 <dda_start>

/// check if the queue is completely empty
uint8_t queue_empty() {
  uint8_t result;

  ATOMIC_START
    2a28:	4f b7       	in	r20, 0x3f	; 63
    2a2a:	f8 94       	cli
    result = ((mb_tail == mb_head) && (movebuffer[mb_tail].live == 0))?255:0;
    2a2c:	20 91 a9 02 	lds	r18, 0x02A9
    2a30:	80 91 a8 02 	lds	r24, 0x02A8
    2a34:	28 17       	cp	r18, r24
    2a36:	89 f4       	brne	.+34     	; 0x2a5a <next_move+0x76>
    2a38:	30 e0       	ldi	r19, 0x00	; 0
    2a3a:	8b e6       	ldi	r24, 0x6B	; 107
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	28 9f       	mul	r18, r24
    2a40:	f0 01       	movw	r30, r0
    2a42:	29 9f       	mul	r18, r25
    2a44:	f0 0d       	add	r31, r0
    2a46:	38 9f       	mul	r19, r24
    2a48:	f0 0d       	add	r31, r0
    2a4a:	11 24       	eor	r1, r1
    2a4c:	e1 54       	subi	r30, 0x41	; 65
    2a4e:	fd 4f       	sbci	r31, 0xFD	; 253
    2a50:	80 81       	ld	r24, Z
    2a52:	81 fd       	sbrc	r24, 1
    2a54:	02 c0       	rjmp	.+4      	; 0x2a5a <next_move+0x76>
    2a56:	8f ef       	ldi	r24, 0xFF	; 255
    2a58:	01 c0       	rjmp	.+2      	; 0x2a5c <next_move+0x78>
    2a5a:	80 e0       	ldi	r24, 0x00	; 0
  ATOMIC_END
    2a5c:	4f bf       	out	0x3f, r20	; 63
/// The timer interrupt MUST be disabled on entry. This is ensured because
/// the timer was disabled at the start of the ISR or else because the current
/// move buffer was dead in the non-interrupt case (which indicates that the 
/// timer interrupt is disabled).
void next_move() {
	while ((queue_empty() == 0) && (movebuffer[mb_tail].live == 0)) {
    2a5e:	88 23       	and	r24, r24
    2a60:	91 f4       	brne	.+36     	; 0x2a86 <next_move+0xa2>
    2a62:	40 91 a9 02 	lds	r20, 0x02A9
    2a66:	24 2f       	mov	r18, r20
    2a68:	30 e0       	ldi	r19, 0x00	; 0
    2a6a:	8b e6       	ldi	r24, 0x6B	; 107
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	28 9f       	mul	r18, r24
    2a70:	f0 01       	movw	r30, r0
    2a72:	29 9f       	mul	r18, r25
    2a74:	f0 0d       	add	r31, r0
    2a76:	38 9f       	mul	r19, r24
    2a78:	f0 0d       	add	r31, r0
    2a7a:	11 24       	eor	r1, r1
    2a7c:	e1 54       	subi	r30, 0x41	; 65
    2a7e:	fd 4f       	sbci	r31, 0xFD	; 253
    2a80:	80 81       	ld	r24, Z
    2a82:	81 ff       	sbrs	r24, 1
    2a84:	b2 cf       	rjmp	.-156    	; 0x29ea <next_move+0x6>
		}
		else {
			dda_start(current_movebuffer);
		}
	} 
}
    2a86:	df 91       	pop	r29
    2a88:	cf 91       	pop	r28
    2a8a:	08 95       	ret

00002a8c <enqueue_home>:
}

/// add a move to the movebuffer
/// \note this function waits for space to be available if necessary, check queue_full() first if waiting is a problem
/// This is the only function that modifies mb_head and it always called from outside an interrupt.
void enqueue_home(TARGET *t, uint8_t endstop_check, uint8_t endstop_stop_cond) {
    2a8c:	ff 92       	push	r15
    2a8e:	0f 93       	push	r16
    2a90:	1f 93       	push	r17
    2a92:	cf 93       	push	r28
    2a94:	df 93       	push	r29
    2a96:	ec 01       	movw	r28, r24
    2a98:	06 2f       	mov	r16, r22
    2a9a:	f4 2e       	mov	r15, r20
DDA BSS movebuffer[MOVEBUFFER_SIZE];

/// check if the queue is completely full
uint8_t queue_full() {
	MEMORY_BARRIER();
	if (mb_tail > mb_head) {
    2a9c:	80 91 a9 02 	lds	r24, 0x02A9
    2aa0:	90 91 a8 02 	lds	r25, 0x02A8
    2aa4:	28 2f       	mov	r18, r24
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	49 2f       	mov	r20, r25
    2aaa:	50 e0       	ldi	r21, 0x00	; 0
    2aac:	98 17       	cp	r25, r24
    2aae:	30 f4       	brcc	.+12     	; 0x2abc <enqueue_home+0x30>
		return ((mb_tail - mb_head - 1) == 0) ? 255 : 0;
    2ab0:	24 1b       	sub	r18, r20
    2ab2:	35 0b       	sbc	r19, r21
    2ab4:	21 30       	cpi	r18, 0x01	; 1
    2ab6:	31 05       	cpc	r19, r1
    2ab8:	39 f4       	brne	.+14     	; 0x2ac8 <enqueue_home+0x3c>
    2aba:	45 c0       	rjmp	.+138    	; 0x2b46 <enqueue_home+0xba>
	} else {
		return ((mb_tail + MOVEBUFFER_SIZE - mb_head - 1) == 0) ? 255 : 0;
    2abc:	29 5f       	subi	r18, 0xF9	; 249
    2abe:	3f 4f       	sbci	r19, 0xFF	; 255
    2ac0:	24 17       	cp	r18, r20
    2ac2:	35 07       	cpc	r19, r21
    2ac4:	09 f4       	brne	.+2      	; 0x2ac8 <enqueue_home+0x3c>
    2ac6:	3f c0       	rjmp	.+126    	; 0x2b46 <enqueue_home+0xba>
void enqueue_home(TARGET *t, uint8_t endstop_check, uint8_t endstop_stop_cond) {
	// don't call this function when the queue is full, but just in case, wait for a move to complete and free up the space for the passed target
	while (queue_full())
		delay_us(100);

	uint8_t h = mb_head + 1;
    2ac8:	19 2f       	mov	r17, r25
    2aca:	1f 5f       	subi	r17, 0xFF	; 255
	h &= (MOVEBUFFER_SIZE - 1);
    2acc:	17 70       	andi	r17, 0x07	; 7

	DDA* new_movebuffer = &(movebuffer[h]);
    2ace:	8b e6       	ldi	r24, 0x6B	; 107
    2ad0:	18 9f       	mul	r17, r24
    2ad2:	d0 01       	movw	r26, r0
    2ad4:	11 24       	eor	r1, r1
    2ad6:	a6 55       	subi	r26, 0x56	; 86
    2ad8:	bd 4f       	sbci	r27, 0xFD	; 253

  // Initialise queue entry to a known state. This also clears flags like
  // dda->live, dda->done and dda->wait_for_temp.
  new_movebuffer->allflags = 0;
    2ada:	56 96       	adiw	r26, 0x16	; 22
    2adc:	1c 92       	st	X, r1
    2ade:	1e 92       	st	-X, r1
    2ae0:	55 97       	sbiw	r26, 0x15	; 21

  if (t != NULL) {
    2ae2:	20 97       	sbiw	r28, 0x00	; 0
    2ae4:	49 f0       	breq	.+18     	; 0x2af8 <enqueue_home+0x6c>
		new_movebuffer->endstop_check = endstop_check;
    2ae6:	fd 01       	movw	r30, r26
    2ae8:	e7 59       	subi	r30, 0x97	; 151
    2aea:	ff 4f       	sbci	r31, 0xFF	; 255
    2aec:	00 83       	st	Z, r16
		new_movebuffer->endstop_stop_cond = endstop_stop_cond;
    2aee:	fd 01       	movw	r30, r26
    2af0:	e6 59       	subi	r30, 0x96	; 150
    2af2:	ff 4f       	sbci	r31, 0xFF	; 255
    2af4:	f0 82       	st	Z, r15
    2af6:	07 c0       	rjmp	.+14     	; 0x2b06 <enqueue_home+0x7a>
	}
	else {
		// it's a wait for temp
		new_movebuffer->waitfor_temp = 1;
    2af8:	55 96       	adiw	r26, 0x15	; 21
    2afa:	8c 91       	ld	r24, X
    2afc:	55 97       	sbiw	r26, 0x15	; 21
    2afe:	88 60       	ori	r24, 0x08	; 8
    2b00:	55 96       	adiw	r26, 0x15	; 21
    2b02:	8c 93       	st	X, r24
    2b04:	55 97       	sbiw	r26, 0x15	; 21
	}
  dda_create(new_movebuffer, t);
    2b06:	cd 01       	movw	r24, r26
    2b08:	be 01       	movw	r22, r28
    2b0a:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <dda_create>

	// make certain all writes to global memory
	// are flushed before modifying mb_head.
	MEMORY_BARRIER();

	mb_head = h;
    2b0e:	10 93 a8 02 	sts	0x02A8, r17

  uint8_t isdead;

  ATOMIC_START
    2b12:	4f b7       	in	r20, 0x3f	; 63
    2b14:	f8 94       	cli
    isdead = (movebuffer[mb_tail].live == 0);
    2b16:	80 91 a9 02 	lds	r24, 0x02A9
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	2b e6       	ldi	r18, 0x6B	; 107
    2b1e:	30 e0       	ldi	r19, 0x00	; 0
    2b20:	82 9f       	mul	r24, r18
    2b22:	f0 01       	movw	r30, r0
    2b24:	83 9f       	mul	r24, r19
    2b26:	f0 0d       	add	r31, r0
    2b28:	92 9f       	mul	r25, r18
    2b2a:	f0 0d       	add	r31, r0
    2b2c:	11 24       	eor	r1, r1
    2b2e:	e1 54       	subi	r30, 0x41	; 65
    2b30:	fd 4f       	sbci	r31, 0xFD	; 253
    2b32:	80 81       	ld	r24, Z
    2b34:	86 95       	lsr	r24
    2b36:	81 70       	andi	r24, 0x01	; 1
  ATOMIC_END
    2b38:	4f bf       	out	0x3f, r20	; 63

	if (isdead) {
    2b3a:	88 23       	and	r24, r24
    2b3c:	49 f4       	brne	.+18     	; 0x2b50 <enqueue_home+0xc4>
		next_move();
    2b3e:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <next_move>
		// Compensate for the cli() in setTimer().
		sei();
    2b42:	78 94       	sei
    2b44:	05 c0       	rjmp	.+10     	; 0x2b50 <enqueue_home+0xc4>
/// \note this function waits for space to be available if necessary, check queue_full() first if waiting is a problem
/// This is the only function that modifies mb_head and it always called from outside an interrupt.
void enqueue_home(TARGET *t, uint8_t endstop_check, uint8_t endstop_stop_cond) {
	// don't call this function when the queue is full, but just in case, wait for a move to complete and free up the space for the passed target
	while (queue_full())
		delay_us(100);
    2b46:	84 e6       	ldi	r24, 0x64	; 100
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <delay_us>
    2b4e:	a6 cf       	rjmp	.-180    	; 0x2a9c <enqueue_home+0x10>
	if (isdead) {
		next_move();
		// Compensate for the cli() in setTimer().
		sei();
	}
}
    2b50:	cd b7       	in	r28, 0x3d	; 61
    2b52:	de b7       	in	r29, 0x3e	; 62
    2b54:	e5 e0       	ldi	r30, 0x05	; 5
    2b56:	0c 94 90 23 	jmp	0x4720	; 0x4720 <__epilogue_restores__+0x1a>

00002b5a <queue_step>:
// -------------------------------------------------------
// This is the one function called by the timer interrupt.
// It calls a few other functions, though.
// -------------------------------------------------------
/// Take a step or go to the next move.
void queue_step() {
    2b5a:	cf 93       	push	r28
    2b5c:	df 93       	push	r29
	// do our next step
	DDA* current_movebuffer = &movebuffer[mb_tail];
    2b5e:	90 91 a9 02 	lds	r25, 0x02A9
    2b62:	8b e6       	ldi	r24, 0x6B	; 107
    2b64:	98 9f       	mul	r25, r24
    2b66:	e0 01       	movw	r28, r0
    2b68:	11 24       	eor	r1, r1
    2b6a:	c6 55       	subi	r28, 0x56	; 86
    2b6c:	dd 4f       	sbci	r29, 0xFD	; 253
	if (current_movebuffer->live) {
    2b6e:	8d 89       	ldd	r24, Y+21	; 0x15
    2b70:	81 ff       	sbrs	r24, 1
    2b72:	17 c0       	rjmp	.+46     	; 0x2ba2 <queue_step+0x48>
		if (current_movebuffer->waitfor_temp) {
    2b74:	83 ff       	sbrs	r24, 3
    2b76:	12 c0       	rjmp	.+36     	; 0x2b9c <queue_step+0x42>
			setTimer(HEATER_WAIT_TIMEOUT);
    2b78:	60 e0       	ldi	r22, 0x00	; 0
    2b7a:	74 e2       	ldi	r23, 0x24	; 36
    2b7c:	84 ef       	ldi	r24, 0xF4	; 244
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	0e 94 8c 20 	call	0x4118	; 0x4118 <setTimer>
			if (temp_achieved()) {
    2b84:	0e 94 79 20 	call	0x40f2	; 0x40f2 <temp_achieved>
    2b88:	88 23       	and	r24, r24
    2b8a:	59 f0       	breq	.+22     	; 0x2ba2 <queue_step+0x48>
				current_movebuffer->live = current_movebuffer->done = 0;
    2b8c:	8d 89       	ldd	r24, Y+21	; 0x15
    2b8e:	89 7f       	andi	r24, 0xF9	; 249
    2b90:	8d 8b       	std	Y+21, r24	; 0x15
				serial_writestr_P(PSTR("Temp achieved\n"));
    2b92:	82 e6       	ldi	r24, 0x62	; 98
    2b94:	92 e0       	ldi	r25, 0x02	; 2
    2b96:	0e 94 c7 1e 	call	0x3d8e	; 0x3d8e <serial_writestr_P>
    2b9a:	03 c0       	rjmp	.+6      	; 0x2ba2 <queue_step+0x48>
			}
		}
		else {
			// NOTE: dda_step makes this interrupt interruptible for some time,
			//       see STEP_INTERRUPT_INTERRUPTIBLE.
			dda_step(current_movebuffer);
    2b9c:	ce 01       	movw	r24, r28
    2b9e:	0e 94 2b 07 	call	0xe56	; 0xe56 <dda_step>
		}
	}

  // Start the next move if this one is done.
	if (current_movebuffer->live == 0)
    2ba2:	8d 89       	ldd	r24, Y+21	; 0x15
    2ba4:	81 fd       	sbrc	r24, 1
    2ba6:	02 c0       	rjmp	.+4      	; 0x2bac <queue_step+0x52>
		next_move();
    2ba8:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <next_move>
}
    2bac:	df 91       	pop	r29
    2bae:	cf 91       	pop	r28
    2bb0:	08 95       	ret

00002bb2 <delay_us>:
#error Delay functions only work with F_CPU >= 4000000UL 
#endif

/// delay microseconds
/// \param delay time to wait in microseconds
void delay_us(uint16_t delay) {
    2bb2:	06 c0       	rjmp	.+12     	; 0x2bc0 <delay_us+0xe>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2bb4:	ee ef       	ldi	r30, 0xFE	; 254
    2bb6:	ff ef       	ldi	r31, 0xFF	; 255
    2bb8:	31 97       	sbiw	r30, 0x01	; 1
    2bba:	f1 f7       	brne	.-4      	; 0x2bb8 <delay_us+0x6>
	wd_reset();
	while (delay > (65536L / (F_CPU / 4000000L))) {
		_delay_loop_2(65534); // we use 65534 here to compensate for the time that the surrounding loop takes. TODO: exact figure needs tuning
		delay -= (65536L / (F_CPU / 4000000L));
    2bbc:	80 50       	subi	r24, 0x00	; 0
    2bbe:	90 44       	sbci	r25, 0x40	; 64

/// delay microseconds
/// \param delay time to wait in microseconds
void delay_us(uint16_t delay) {
	wd_reset();
	while (delay > (65536L / (F_CPU / 4000000L))) {
    2bc0:	20 e4       	ldi	r18, 0x40	; 64
    2bc2:	81 30       	cpi	r24, 0x01	; 1
    2bc4:	92 07       	cpc	r25, r18
    2bc6:	b0 f7       	brcc	.-20     	; 0x2bb4 <delay_us+0x2>
    2bc8:	a0 e0       	ldi	r26, 0x00	; 0
    2bca:	b0 e0       	ldi	r27, 0x00	; 0
    2bcc:	22 e0       	ldi	r18, 0x02	; 2
    2bce:	88 0f       	add	r24, r24
    2bd0:	99 1f       	adc	r25, r25
    2bd2:	aa 1f       	adc	r26, r26
    2bd4:	bb 1f       	adc	r27, r27
    2bd6:	2a 95       	dec	r18
    2bd8:	d1 f7       	brne	.-12     	; 0x2bce <delay_us+0x1c>
    2bda:	01 97       	sbiw	r24, 0x01	; 1
    2bdc:	f1 f7       	brne	.-4      	; 0x2bda <delay_us+0x28>
		delay -= (65536L / (F_CPU / 4000000L));
		wd_reset();
	}
	_delay_loop_2(delay * (F_CPU / 4000000L));
	wd_reset();
}
    2bde:	08 95       	ret

00002be0 <delay_ms>:

/// delay milliseconds
/// \param delay time to wait in milliseconds
void delay_ms(uint32_t delay) {
    2be0:	9b 01       	movw	r18, r22
    2be2:	ac 01       	movw	r20, r24
	wd_reset();
	while (delay > 65) {
    2be4:	22 34       	cpi	r18, 0x42	; 66
    2be6:	31 05       	cpc	r19, r1
    2be8:	41 05       	cpc	r20, r1
    2bea:	51 05       	cpc	r21, r1
    2bec:	98 f0       	brcs	.+38     	; 0x2c14 <delay_ms+0x34>
    2bee:	8e ef       	ldi	r24, 0xFE	; 254
    2bf0:	9f ef       	ldi	r25, 0xFF	; 255
    2bf2:	fc 01       	movw	r30, r24
    2bf4:	31 97       	sbiw	r30, 0x01	; 1
    2bf6:	f1 f7       	brne	.-4      	; 0x2bf4 <delay_ms+0x14>
    2bf8:	fc 01       	movw	r30, r24
    2bfa:	31 97       	sbiw	r30, 0x01	; 1
    2bfc:	f1 f7       	brne	.-4      	; 0x2bfa <delay_ms+0x1a>
    2bfe:	01 97       	sbiw	r24, 0x01	; 1
    2c00:	f1 f7       	brne	.-4      	; 0x2bfe <delay_ms+0x1e>
		delay_us(64999);
		delay -= 65;
    2c02:	8c e9       	ldi	r24, 0x9C	; 156
    2c04:	97 ef       	ldi	r25, 0xF7	; 247
    2c06:	01 97       	sbiw	r24, 0x01	; 1
    2c08:	f1 f7       	brne	.-4      	; 0x2c06 <delay_ms+0x26>
    2c0a:	21 54       	subi	r18, 0x41	; 65
    2c0c:	30 40       	sbci	r19, 0x00	; 0
    2c0e:	40 40       	sbci	r20, 0x00	; 0
    2c10:	50 40       	sbci	r21, 0x00	; 0
    2c12:	e8 cf       	rjmp	.-48     	; 0x2be4 <delay_ms+0x4>
		wd_reset();
	}
	delay_us(delay * 1000);
    2c14:	ca 01       	movw	r24, r20
    2c16:	b9 01       	movw	r22, r18
    2c18:	28 ee       	ldi	r18, 0xE8	; 232
    2c1a:	33 e0       	ldi	r19, 0x03	; 3
    2c1c:	40 e0       	ldi	r20, 0x00	; 0
    2c1e:	50 e0       	ldi	r21, 0x00	; 0
    2c20:	0e 94 f7 22 	call	0x45ee	; 0x45ee <__mulsi3>
    2c24:	06 c0       	rjmp	.+12     	; 0x2c32 <delay_ms+0x52>
    2c26:	8e ef       	ldi	r24, 0xFE	; 254
    2c28:	9f ef       	ldi	r25, 0xFF	; 255
    2c2a:	01 97       	sbiw	r24, 0x01	; 1
    2c2c:	f1 f7       	brne	.-4      	; 0x2c2a <delay_ms+0x4a>
/// \param delay time to wait in microseconds
void delay_us(uint16_t delay) {
	wd_reset();
	while (delay > (65536L / (F_CPU / 4000000L))) {
		_delay_loop_2(65534); // we use 65534 here to compensate for the time that the surrounding loop takes. TODO: exact figure needs tuning
		delay -= (65536L / (F_CPU / 4000000L));
    2c2e:	60 50       	subi	r22, 0x00	; 0
    2c30:	70 44       	sbci	r23, 0x40	; 64

/// delay microseconds
/// \param delay time to wait in microseconds
void delay_us(uint16_t delay) {
	wd_reset();
	while (delay > (65536L / (F_CPU / 4000000L))) {
    2c32:	80 e4       	ldi	r24, 0x40	; 64
    2c34:	61 30       	cpi	r22, 0x01	; 1
    2c36:	78 07       	cpc	r23, r24
    2c38:	b0 f7       	brcc	.-20     	; 0x2c26 <delay_ms+0x46>
    2c3a:	cb 01       	movw	r24, r22
    2c3c:	a0 e0       	ldi	r26, 0x00	; 0
    2c3e:	b0 e0       	ldi	r27, 0x00	; 0
    2c40:	32 e0       	ldi	r19, 0x02	; 2
    2c42:	88 0f       	add	r24, r24
    2c44:	99 1f       	adc	r25, r25
    2c46:	aa 1f       	adc	r26, r26
    2c48:	bb 1f       	adc	r27, r27
    2c4a:	3a 95       	dec	r19
    2c4c:	d1 f7       	brne	.-12     	; 0x2c42 <delay_ms+0x62>
    2c4e:	01 97       	sbiw	r24, 0x01	; 1
    2c50:	f1 f7       	brne	.-4      	; 0x2c4e <delay_ms+0x6e>
		delay -= 65;
		wd_reset();
	}
	delay_us(delay * 1000);
	wd_reset();
}
    2c52:	08 95       	ret

00002c54 <decfloat_to_int>:
/// \param *df pointer to floating point structure that holds fp value to convert
/// \param multiplicand multiply by this amount during conversion to integer
///
/// Tested for up to 42'000 mm (accurate), 420'000 mm (precision 10 um) and
/// 4'200'000 mm (precision 100 um).
static int32_t decfloat_to_int(decfloat *df, uint16_t multiplicand) {
    2c54:	df 92       	push	r13
    2c56:	ef 92       	push	r14
    2c58:	ff 92       	push	r15
    2c5a:	0f 93       	push	r16
    2c5c:	1f 93       	push	r17
    2c5e:	cf 93       	push	r28
    2c60:	df 93       	push	r29
    2c62:	ec 01       	movw	r28, r24
    2c64:	9b 01       	movw	r18, r22
	uint32_t	r = df->mantissa;
    2c66:	e8 80       	ld	r14, Y
    2c68:	f9 80       	ldd	r15, Y+1	; 0x01
    2c6a:	0a 81       	ldd	r16, Y+2	; 0x02
    2c6c:	1b 81       	ldd	r17, Y+3	; 0x03
	uint8_t	e = df->exponent;
    2c6e:	dc 80       	ldd	r13, Y+4	; 0x04
    2c70:	8f e7       	ldi	r24, 0x7F	; 127
    2c72:	d8 22       	and	r13, r24

	// e=1 means we've seen a decimal point but no digits after it, and e=2 means we've seen a decimal point with one digit so it's too high by one if not zero
	if (e)
    2c74:	41 f0       	breq	.+16     	; 0x2c86 <decfloat_to_int+0x32>
    2c76:	06 c0       	rjmp	.+12     	; 0x2c84 <decfloat_to_int+0x30>
		e--;

	// This raises range for mm by factor 1000 and for inches by factor 100.
	// It's a bit expensive, but we should have the time while parsing.
	while (e && multiplicand % 10 == 0) {
		multiplicand /= 10;
    2c78:	c9 01       	movw	r24, r18
    2c7a:	6a e0       	ldi	r22, 0x0A	; 10
    2c7c:	70 e0       	ldi	r23, 0x00	; 0
    2c7e:	0e 94 16 23 	call	0x462c	; 0x462c <__udivmodhi4>
    2c82:	9b 01       	movw	r18, r22
		e--;
    2c84:	da 94       	dec	r13
	if (e)
		e--;

	// This raises range for mm by factor 1000 and for inches by factor 100.
	// It's a bit expensive, but we should have the time while parsing.
	while (e && multiplicand % 10 == 0) {
    2c86:	dd 20       	and	r13, r13
    2c88:	39 f0       	breq	.+14     	; 0x2c98 <decfloat_to_int+0x44>
    2c8a:	c9 01       	movw	r24, r18
    2c8c:	6a e0       	ldi	r22, 0x0A	; 10
    2c8e:	70 e0       	ldi	r23, 0x00	; 0
    2c90:	0e 94 16 23 	call	0x462c	; 0x462c <__udivmodhi4>
    2c94:	89 2b       	or	r24, r25
    2c96:	81 f3       	breq	.-32     	; 0x2c78 <decfloat_to_int+0x24>
		multiplicand /= 10;
		e--;
	}

	r *= multiplicand;
    2c98:	b9 01       	movw	r22, r18
    2c9a:	80 e0       	ldi	r24, 0x00	; 0
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	a8 01       	movw	r20, r16
    2ca0:	97 01       	movw	r18, r14
    2ca2:	0e 94 f7 22 	call	0x45ee	; 0x45ee <__mulsi3>
    2ca6:	7b 01       	movw	r14, r22
    2ca8:	8c 01       	movw	r16, r24
	if (e)
    2caa:	dd 20       	and	r13, r13
    2cac:	e1 f0       	breq	.+56     	; 0x2ce6 <decfloat_to_int+0x92>
		r = (r + powers[e] / 2) / powers[e];
    2cae:	ed 2d       	mov	r30, r13
    2cb0:	f0 e0       	ldi	r31, 0x00	; 0
    2cb2:	ee 0f       	add	r30, r30
    2cb4:	ff 1f       	adc	r31, r31
    2cb6:	ee 0f       	add	r30, r30
    2cb8:	ff 1f       	adc	r31, r31
    2cba:	e0 50       	subi	r30, 0x00	; 0
    2cbc:	fe 4f       	sbci	r31, 0xFE	; 254
    2cbe:	20 81       	ld	r18, Z
    2cc0:	31 81       	ldd	r19, Z+1	; 0x01
    2cc2:	42 81       	ldd	r20, Z+2	; 0x02
    2cc4:	53 81       	ldd	r21, Z+3	; 0x03
    2cc6:	ca 01       	movw	r24, r20
    2cc8:	b9 01       	movw	r22, r18
    2cca:	96 95       	lsr	r25
    2ccc:	87 95       	ror	r24
    2cce:	77 95       	ror	r23
    2cd0:	67 95       	ror	r22
    2cd2:	6e 0d       	add	r22, r14
    2cd4:	7f 1d       	adc	r23, r15
    2cd6:	80 1f       	adc	r24, r16
    2cd8:	91 1f       	adc	r25, r17
    2cda:	0e 94 2a 23 	call	0x4654	; 0x4654 <__udivmodsi4>
    2cde:	c9 01       	movw	r24, r18
    2ce0:	da 01       	movw	r26, r20
    2ce2:	7c 01       	movw	r14, r24
    2ce4:	8d 01       	movw	r16, r26

	return df->sign ? -(int32_t)r : (int32_t)r;
    2ce6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ce8:	87 ff       	sbrs	r24, 7
    2cea:	08 c0       	rjmp	.+16     	; 0x2cfc <decfloat_to_int+0xa8>
    2cec:	22 27       	eor	r18, r18
    2cee:	33 27       	eor	r19, r19
    2cf0:	a9 01       	movw	r20, r18
    2cf2:	2e 19       	sub	r18, r14
    2cf4:	3f 09       	sbc	r19, r15
    2cf6:	40 0b       	sbc	r20, r16
    2cf8:	51 0b       	sbc	r21, r17
    2cfa:	02 c0       	rjmp	.+4      	; 0x2d00 <decfloat_to_int+0xac>
    2cfc:	a8 01       	movw	r20, r16
    2cfe:	97 01       	movw	r18, r14
}
    2d00:	b9 01       	movw	r22, r18
    2d02:	ca 01       	movw	r24, r20
    2d04:	cd b7       	in	r28, 0x3d	; 61
    2d06:	de b7       	in	r29, 0x3e	; 62
    2d08:	e7 e0       	ldi	r30, 0x07	; 7
    2d0a:	0c 94 8e 23 	jmp	0x471c	; 0x471c <__epilogue_restores__+0x16>

00002d0e <gcode_init>:

void gcode_init(void) {
	// gcc guarantees us all variables are initialised to 0.

	#ifndef E_ABSOLUTE
		next_target.option_e_relative = 1;
    2d0e:	80 91 04 06 	lds	r24, 0x0604
    2d12:	80 68       	ori	r24, 0x80	; 128
    2d14:	80 93 04 06 	sts	0x0604, r24
	#endif
}
    2d18:	08 95       	ret

00002d1a <gcode_parse_char>:

/// Character Received - add it to our command
/// \param c the next character to process
void gcode_parse_char(uint8_t c) {
    2d1a:	0f 93       	push	r16
    2d1c:	1f 93       	push	r17
    2d1e:	08 2f       	mov	r16, r24
	uint8_t checksum_char = c;

	// uppercase
	if (c >= 'a' && c <= 'z')
    2d20:	81 56       	subi	r24, 0x61	; 97
    2d22:	8a 31       	cpi	r24, 0x1A	; 26
    2d24:	10 f0       	brcs	.+4      	; 0x2d2a <gcode_parse_char+0x10>
    2d26:	10 2f       	mov	r17, r16
    2d28:	02 c0       	rjmp	.+4      	; 0x2d2e <gcode_parse_char+0x14>
		c &= ~32;
    2d2a:	10 2f       	mov	r17, r16
    2d2c:	1f 7d       	andi	r17, 0xDF	; 223
#ifdef SIMULATOR
  sim_gcode_ch(c);
#endif
	// process previous field
	if (last_field) {
    2d2e:	90 91 02 06 	lds	r25, 0x0602
    2d32:	99 23       	and	r25, r25
    2d34:	09 f4       	brne	.+2      	; 0x2d38 <gcode_parse_char+0x1e>
    2d36:	0e c1       	rjmp	.+540    	; 0x2f54 <gcode_parse_char+0x23a>
		// check if we're seeing a new field or end of line
		// any character will start a new field, even invalid/unknown ones
		if ((c >= 'A' && c <= 'Z') || c == '*' || (c == 10) || (c == 13)) {
    2d38:	81 2f       	mov	r24, r17
    2d3a:	81 54       	subi	r24, 0x41	; 65
    2d3c:	8a 31       	cpi	r24, 0x1A	; 26
    2d3e:	38 f0       	brcs	.+14     	; 0x2d4e <gcode_parse_char+0x34>
    2d40:	1a 32       	cpi	r17, 0x2A	; 42
    2d42:	29 f0       	breq	.+10     	; 0x2d4e <gcode_parse_char+0x34>
    2d44:	1a 30       	cpi	r17, 0x0A	; 10
    2d46:	19 f0       	breq	.+6      	; 0x2d4e <gcode_parse_char+0x34>
    2d48:	1d 30       	cpi	r17, 0x0D	; 13
    2d4a:	09 f0       	breq	.+2      	; 0x2d4e <gcode_parse_char+0x34>
    2d4c:	03 c1       	rjmp	.+518    	; 0x2f54 <gcode_parse_char+0x23a>
			switch (last_field) {
    2d4e:	90 35       	cpi	r25, 0x50	; 80
    2d50:	09 f4       	brne	.+2      	; 0x2d54 <gcode_parse_char+0x3a>
    2d52:	cd c0       	rjmp	.+410    	; 0x2eee <gcode_parse_char+0x1d4>
    2d54:	91 35       	cpi	r25, 0x51	; 81
    2d56:	a0 f4       	brcc	.+40     	; 0x2d80 <gcode_parse_char+0x66>
    2d58:	97 34       	cpi	r25, 0x47	; 71
    2d5a:	19 f1       	breq	.+70     	; 0x2da2 <gcode_parse_char+0x88>
    2d5c:	98 34       	cpi	r25, 0x48	; 72
    2d5e:	50 f4       	brcc	.+20     	; 0x2d74 <gcode_parse_char+0x5a>
    2d60:	95 34       	cpi	r25, 0x45	; 69
    2d62:	09 f4       	brne	.+2      	; 0x2d66 <gcode_parse_char+0x4c>
    2d64:	70 c0       	rjmp	.+224    	; 0x2e46 <gcode_parse_char+0x12c>
    2d66:	96 34       	cpi	r25, 0x46	; 70
    2d68:	08 f0       	brcs	.+2      	; 0x2d6c <gcode_parse_char+0x52>
    2d6a:	85 c0       	rjmp	.+266    	; 0x2e76 <gcode_parse_char+0x15c>
    2d6c:	9a 32       	cpi	r25, 0x2A	; 42
    2d6e:	09 f0       	breq	.+2      	; 0x2d72 <gcode_parse_char+0x58>
    2d70:	e5 c0       	rjmp	.+458    	; 0x2f3c <gcode_parse_char+0x222>
    2d72:	dc c0       	rjmp	.+440    	; 0x2f2c <gcode_parse_char+0x212>
    2d74:	9d 34       	cpi	r25, 0x4D	; 77
    2d76:	d1 f0       	breq	.+52     	; 0x2dac <gcode_parse_char+0x92>
    2d78:	9e 34       	cpi	r25, 0x4E	; 78
    2d7a:	09 f0       	breq	.+2      	; 0x2d7e <gcode_parse_char+0x64>
    2d7c:	df c0       	rjmp	.+446    	; 0x2f3c <gcode_parse_char+0x222>
    2d7e:	c7 c0       	rjmp	.+398    	; 0x2f0e <gcode_parse_char+0x1f4>
    2d80:	98 35       	cpi	r25, 0x58	; 88
    2d82:	c9 f0       	breq	.+50     	; 0x2db6 <gcode_parse_char+0x9c>
    2d84:	99 35       	cpi	r25, 0x59	; 89
    2d86:	38 f4       	brcc	.+14     	; 0x2d96 <gcode_parse_char+0x7c>
    2d88:	93 35       	cpi	r25, 0x53	; 83
    2d8a:	09 f4       	brne	.+2      	; 0x2d8e <gcode_parse_char+0x74>
    2d8c:	8c c0       	rjmp	.+280    	; 0x2ea6 <gcode_parse_char+0x18c>
    2d8e:	94 35       	cpi	r25, 0x54	; 84
    2d90:	09 f0       	breq	.+2      	; 0x2d94 <gcode_parse_char+0x7a>
    2d92:	d4 c0       	rjmp	.+424    	; 0x2f3c <gcode_parse_char+0x222>
    2d94:	b7 c0       	rjmp	.+366    	; 0x2f04 <gcode_parse_char+0x1ea>
    2d96:	99 35       	cpi	r25, 0x59	; 89
    2d98:	31 f1       	breq	.+76     	; 0x2de6 <gcode_parse_char+0xcc>
    2d9a:	9a 35       	cpi	r25, 0x5A	; 90
    2d9c:	09 f0       	breq	.+2      	; 0x2da0 <gcode_parse_char+0x86>
    2d9e:	ce c0       	rjmp	.+412    	; 0x2f3c <gcode_parse_char+0x222>
    2da0:	3a c0       	rjmp	.+116    	; 0x2e16 <gcode_parse_char+0xfc>
				case 'G':
					next_target.G = read_digit.mantissa;
    2da2:	80 91 2e 06 	lds	r24, 0x062E
    2da6:	80 93 06 06 	sts	0x0606, r24
    2daa:	c8 c0       	rjmp	.+400    	; 0x2f3c <gcode_parse_char+0x222>
					if (DEBUG_ECHO && (debug_flags & DEBUG_ECHO))
						serwrite_uint8(next_target.G);
					break;
				case 'M':
					next_target.M = read_digit.mantissa;
    2dac:	80 91 2e 06 	lds	r24, 0x062E
    2db0:	80 93 07 06 	sts	0x0607, r24
    2db4:	c3 c0       	rjmp	.+390    	; 0x2f3c <gcode_parse_char+0x222>
					if (DEBUG_ECHO && (debug_flags & DEBUG_ECHO))
						serwrite_uint8(next_target.M);
					break;
				case 'X':
					if (next_target.option_inches)
    2db6:	80 91 05 06 	lds	r24, 0x0605
    2dba:	80 ff       	sbrs	r24, 0
    2dbc:	05 c0       	rjmp	.+10     	; 0x2dc8 <gcode_parse_char+0xae>
            next_target.target.axis[X] = decfloat_to_int(&read_digit, 25400);
    2dbe:	8e e2       	ldi	r24, 0x2E	; 46
    2dc0:	96 e0       	ldi	r25, 0x06	; 6
    2dc2:	68 e3       	ldi	r22, 0x38	; 56
    2dc4:	73 e6       	ldi	r23, 0x63	; 99
    2dc6:	04 c0       	rjmp	.+8      	; 0x2dd0 <gcode_parse_char+0xb6>
					else
            next_target.target.axis[X] = decfloat_to_int(&read_digit, 1000);
    2dc8:	8e e2       	ldi	r24, 0x2E	; 46
    2dca:	96 e0       	ldi	r25, 0x06	; 6
    2dcc:	68 ee       	ldi	r22, 0xE8	; 232
    2dce:	73 e0       	ldi	r23, 0x03	; 3
    2dd0:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <decfloat_to_int>
    2dd4:	60 93 08 06 	sts	0x0608, r22
    2dd8:	70 93 09 06 	sts	0x0609, r23
    2ddc:	80 93 0a 06 	sts	0x060A, r24
    2de0:	90 93 0b 06 	sts	0x060B, r25
    2de4:	ab c0       	rjmp	.+342    	; 0x2f3c <gcode_parse_char+0x222>
					if (DEBUG_ECHO && (debug_flags & DEBUG_ECHO))
            serwrite_int32(next_target.target.axis[X]);
					break;
				case 'Y':
					if (next_target.option_inches)
    2de6:	80 91 05 06 	lds	r24, 0x0605
    2dea:	80 ff       	sbrs	r24, 0
    2dec:	05 c0       	rjmp	.+10     	; 0x2df8 <gcode_parse_char+0xde>
            next_target.target.axis[Y] = decfloat_to_int(&read_digit, 25400);
    2dee:	8e e2       	ldi	r24, 0x2E	; 46
    2df0:	96 e0       	ldi	r25, 0x06	; 6
    2df2:	68 e3       	ldi	r22, 0x38	; 56
    2df4:	73 e6       	ldi	r23, 0x63	; 99
    2df6:	04 c0       	rjmp	.+8      	; 0x2e00 <gcode_parse_char+0xe6>
					else
            next_target.target.axis[Y] = decfloat_to_int(&read_digit, 1000);
    2df8:	8e e2       	ldi	r24, 0x2E	; 46
    2dfa:	96 e0       	ldi	r25, 0x06	; 6
    2dfc:	68 ee       	ldi	r22, 0xE8	; 232
    2dfe:	73 e0       	ldi	r23, 0x03	; 3
    2e00:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <decfloat_to_int>
    2e04:	60 93 0c 06 	sts	0x060C, r22
    2e08:	70 93 0d 06 	sts	0x060D, r23
    2e0c:	80 93 0e 06 	sts	0x060E, r24
    2e10:	90 93 0f 06 	sts	0x060F, r25
    2e14:	93 c0       	rjmp	.+294    	; 0x2f3c <gcode_parse_char+0x222>
					if (DEBUG_ECHO && (debug_flags & DEBUG_ECHO))
            serwrite_int32(next_target.target.axis[Y]);
					break;
				case 'Z':
					if (next_target.option_inches)
    2e16:	80 91 05 06 	lds	r24, 0x0605
    2e1a:	80 ff       	sbrs	r24, 0
    2e1c:	05 c0       	rjmp	.+10     	; 0x2e28 <gcode_parse_char+0x10e>
            next_target.target.axis[Z] = decfloat_to_int(&read_digit, 25400);
    2e1e:	8e e2       	ldi	r24, 0x2E	; 46
    2e20:	96 e0       	ldi	r25, 0x06	; 6
    2e22:	68 e3       	ldi	r22, 0x38	; 56
    2e24:	73 e6       	ldi	r23, 0x63	; 99
    2e26:	04 c0       	rjmp	.+8      	; 0x2e30 <gcode_parse_char+0x116>
					else
            next_target.target.axis[Z] = decfloat_to_int(&read_digit, 1000);
    2e28:	8e e2       	ldi	r24, 0x2E	; 46
    2e2a:	96 e0       	ldi	r25, 0x06	; 6
    2e2c:	68 ee       	ldi	r22, 0xE8	; 232
    2e2e:	73 e0       	ldi	r23, 0x03	; 3
    2e30:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <decfloat_to_int>
    2e34:	60 93 10 06 	sts	0x0610, r22
    2e38:	70 93 11 06 	sts	0x0611, r23
    2e3c:	80 93 12 06 	sts	0x0612, r24
    2e40:	90 93 13 06 	sts	0x0613, r25
    2e44:	7b c0       	rjmp	.+246    	; 0x2f3c <gcode_parse_char+0x222>
					if (DEBUG_ECHO && (debug_flags & DEBUG_ECHO))
            serwrite_int32(next_target.target.axis[Z]);
					break;
				case 'E':
					if (next_target.option_inches)
    2e46:	80 91 05 06 	lds	r24, 0x0605
    2e4a:	80 ff       	sbrs	r24, 0
    2e4c:	05 c0       	rjmp	.+10     	; 0x2e58 <gcode_parse_char+0x13e>
            next_target.target.axis[E] = decfloat_to_int(&read_digit, 25400);
    2e4e:	8e e2       	ldi	r24, 0x2E	; 46
    2e50:	96 e0       	ldi	r25, 0x06	; 6
    2e52:	68 e3       	ldi	r22, 0x38	; 56
    2e54:	73 e6       	ldi	r23, 0x63	; 99
    2e56:	04 c0       	rjmp	.+8      	; 0x2e60 <gcode_parse_char+0x146>
					else
            next_target.target.axis[E] = decfloat_to_int(&read_digit, 1000);
    2e58:	8e e2       	ldi	r24, 0x2E	; 46
    2e5a:	96 e0       	ldi	r25, 0x06	; 6
    2e5c:	68 ee       	ldi	r22, 0xE8	; 232
    2e5e:	73 e0       	ldi	r23, 0x03	; 3
    2e60:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <decfloat_to_int>
    2e64:	60 93 14 06 	sts	0x0614, r22
    2e68:	70 93 15 06 	sts	0x0615, r23
    2e6c:	80 93 16 06 	sts	0x0616, r24
    2e70:	90 93 17 06 	sts	0x0617, r25
    2e74:	63 c0       	rjmp	.+198    	; 0x2f3c <gcode_parse_char+0x222>
					if (DEBUG_ECHO && (debug_flags & DEBUG_ECHO))
            serwrite_uint32(next_target.target.axis[E]);
					break;
				case 'F':
					// just use raw integer, we need move distance and n_steps to convert it to a useful value, so wait until we have those to convert it
					if (next_target.option_inches)
    2e76:	80 91 05 06 	lds	r24, 0x0605
    2e7a:	80 ff       	sbrs	r24, 0
    2e7c:	05 c0       	rjmp	.+10     	; 0x2e88 <gcode_parse_char+0x16e>
						next_target.target.F = decfloat_to_int(&read_digit, 25400);
    2e7e:	8e e2       	ldi	r24, 0x2E	; 46
    2e80:	96 e0       	ldi	r25, 0x06	; 6
    2e82:	68 e3       	ldi	r22, 0x38	; 56
    2e84:	73 e6       	ldi	r23, 0x63	; 99
    2e86:	04 c0       	rjmp	.+8      	; 0x2e90 <gcode_parse_char+0x176>
					else
						next_target.target.F = decfloat_to_int(&read_digit, 1);
    2e88:	8e e2       	ldi	r24, 0x2E	; 46
    2e8a:	96 e0       	ldi	r25, 0x06	; 6
    2e8c:	61 e0       	ldi	r22, 0x01	; 1
    2e8e:	70 e0       	ldi	r23, 0x00	; 0
    2e90:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <decfloat_to_int>
    2e94:	60 93 18 06 	sts	0x0618, r22
    2e98:	70 93 19 06 	sts	0x0619, r23
    2e9c:	80 93 1a 06 	sts	0x061A, r24
    2ea0:	90 93 1b 06 	sts	0x061B, r25
    2ea4:	4b c0       	rjmp	.+150    	; 0x2f3c <gcode_parse_char+0x222>
					break;
				case 'S':
					// if this is temperature, multiply by 4 to convert to quarter-degree units
					// cosmetically this should be done in the temperature section,
					// but it takes less code, less memory and loses no precision if we do it here instead
					if ((next_target.M == 104) || (next_target.M == 109) || (next_target.M == 140))
    2ea6:	80 91 07 06 	lds	r24, 0x0607
    2eaa:	88 36       	cpi	r24, 0x68	; 104
    2eac:	21 f0       	breq	.+8      	; 0x2eb6 <gcode_parse_char+0x19c>
    2eae:	8d 36       	cpi	r24, 0x6D	; 109
    2eb0:	11 f0       	breq	.+4      	; 0x2eb6 <gcode_parse_char+0x19c>
    2eb2:	8c 38       	cpi	r24, 0x8C	; 140
    2eb4:	29 f4       	brne	.+10     	; 0x2ec0 <gcode_parse_char+0x1a6>
						next_target.S = decfloat_to_int(&read_digit, 4);
    2eb6:	8e e2       	ldi	r24, 0x2E	; 46
    2eb8:	96 e0       	ldi	r25, 0x06	; 6
    2eba:	64 e0       	ldi	r22, 0x04	; 4
    2ebc:	70 e0       	ldi	r23, 0x00	; 0
    2ebe:	0c c0       	rjmp	.+24     	; 0x2ed8 <gcode_parse_char+0x1be>
					// if this is heater PID stuff, multiply by PID_SCALE because we divide by PID_SCALE later on
					else if ((next_target.M >= 130) && (next_target.M <= 132))
    2ec0:	82 58       	subi	r24, 0x82	; 130
    2ec2:	83 30       	cpi	r24, 0x03	; 3
    2ec4:	28 f4       	brcc	.+10     	; 0x2ed0 <gcode_parse_char+0x1b6>
						next_target.S = decfloat_to_int(&read_digit, PID_SCALE);
    2ec6:	8e e2       	ldi	r24, 0x2E	; 46
    2ec8:	96 e0       	ldi	r25, 0x06	; 6
    2eca:	60 e0       	ldi	r22, 0x00	; 0
    2ecc:	74 e0       	ldi	r23, 0x04	; 4
    2ece:	04 c0       	rjmp	.+8      	; 0x2ed8 <gcode_parse_char+0x1be>
					else
						next_target.S = decfloat_to_int(&read_digit, 1);
    2ed0:	8e e2       	ldi	r24, 0x2E	; 46
    2ed2:	96 e0       	ldi	r25, 0x06	; 6
    2ed4:	61 e0       	ldi	r22, 0x01	; 1
    2ed6:	70 e0       	ldi	r23, 0x00	; 0
    2ed8:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <decfloat_to_int>
    2edc:	60 93 1d 06 	sts	0x061D, r22
    2ee0:	70 93 1e 06 	sts	0x061E, r23
    2ee4:	80 93 1f 06 	sts	0x061F, r24
    2ee8:	90 93 20 06 	sts	0x0620, r25
    2eec:	27 c0       	rjmp	.+78     	; 0x2f3c <gcode_parse_char+0x222>
					if (DEBUG_ECHO && (debug_flags & DEBUG_ECHO))
						serwrite_int32(next_target.S);
					break;
				case 'P':
					next_target.P = decfloat_to_int(&read_digit, 1);
    2eee:	8e e2       	ldi	r24, 0x2E	; 46
    2ef0:	96 e0       	ldi	r25, 0x06	; 6
    2ef2:	61 e0       	ldi	r22, 0x01	; 1
    2ef4:	70 e0       	ldi	r23, 0x00	; 0
    2ef6:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <decfloat_to_int>
    2efa:	70 93 22 06 	sts	0x0622, r23
    2efe:	60 93 21 06 	sts	0x0621, r22
    2f02:	1c c0       	rjmp	.+56     	; 0x2f3c <gcode_parse_char+0x222>
					if (DEBUG_ECHO && (debug_flags & DEBUG_ECHO))
						serwrite_uint16(next_target.P);
					break;
				case 'T':
					next_target.T = read_digit.mantissa;
    2f04:	80 91 2e 06 	lds	r24, 0x062E
    2f08:	80 93 23 06 	sts	0x0623, r24
    2f0c:	17 c0       	rjmp	.+46     	; 0x2f3c <gcode_parse_char+0x222>
					if (DEBUG_ECHO && (debug_flags & DEBUG_ECHO))
						serwrite_uint8(next_target.T);
					break;
				case 'N':
					next_target.N = decfloat_to_int(&read_digit, 1);
    2f0e:	8e e2       	ldi	r24, 0x2E	; 46
    2f10:	96 e0       	ldi	r25, 0x06	; 6
    2f12:	61 e0       	ldi	r22, 0x01	; 1
    2f14:	70 e0       	ldi	r23, 0x00	; 0
    2f16:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <decfloat_to_int>
    2f1a:	60 93 24 06 	sts	0x0624, r22
    2f1e:	70 93 25 06 	sts	0x0625, r23
    2f22:	80 93 26 06 	sts	0x0626, r24
    2f26:	90 93 27 06 	sts	0x0627, r25
    2f2a:	08 c0       	rjmp	.+16     	; 0x2f3c <gcode_parse_char+0x222>
					if (DEBUG_ECHO && (debug_flags & DEBUG_ECHO))
						serwrite_uint32(next_target.N);
					break;
				case '*':
					next_target.checksum_read = decfloat_to_int(&read_digit, 1);
    2f2c:	8e e2       	ldi	r24, 0x2E	; 46
    2f2e:	96 e0       	ldi	r25, 0x06	; 6
    2f30:	61 e0       	ldi	r22, 0x01	; 1
    2f32:	70 e0       	ldi	r23, 0x00	; 0
    2f34:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <decfloat_to_int>
    2f38:	60 93 2c 06 	sts	0x062C, r22
					if (DEBUG_ECHO && (debug_flags & DEBUG_ECHO))
						serwrite_uint8(next_target.checksum_read);
					break;
			}
			// reset for next field
			last_field = 0;
    2f3c:	10 92 02 06 	sts	0x0602, r1
			read_digit.sign = read_digit.mantissa = read_digit.exponent = 0;
    2f40:	10 92 2e 06 	sts	0x062E, r1
    2f44:	10 92 2f 06 	sts	0x062F, r1
    2f48:	10 92 30 06 	sts	0x0630, r1
    2f4c:	10 92 31 06 	sts	0x0631, r1
    2f50:	10 92 32 06 	sts	0x0632, r1
		}
	}

	// skip comments
	if (next_target.seen_semi_comment == 0 && next_target.seen_parens_comment == 0) {
    2f54:	80 91 04 06 	lds	r24, 0x0604
    2f58:	84 fd       	sbrc	r24, 4
    2f5a:	01 c1       	rjmp	.+514    	; 0x315e <gcode_parse_char+0x444>
    2f5c:	85 fd       	sbrc	r24, 5
    2f5e:	ff c0       	rjmp	.+510    	; 0x315e <gcode_parse_char+0x444>
		// new field?
		if ((c >= 'A' && c <= 'Z') || c == '*') {
    2f60:	81 2f       	mov	r24, r17
    2f62:	81 54       	subi	r24, 0x41	; 65
    2f64:	8a 31       	cpi	r24, 0x1A	; 26
    2f66:	10 f0       	brcs	.+4      	; 0x2f6c <gcode_parse_char+0x252>
    2f68:	1a 32       	cpi	r17, 0x2A	; 42
    2f6a:	11 f4       	brne	.+4      	; 0x2f70 <gcode_parse_char+0x256>
			last_field = c;
    2f6c:	10 93 02 06 	sts	0x0602, r17
		}

		// process character
    // Can't do ranges in switch..case, so process actual digits here.
    // Do it early, as there are many more digits than characters expected.
    if (c >= '0' && c <= '9') {
    2f70:	81 2f       	mov	r24, r17
    2f72:	80 53       	subi	r24, 0x30	; 48
    2f74:	8a 30       	cpi	r24, 0x0A	; 10
    2f76:	08 f0       	brcs	.+2      	; 0x2f7a <gcode_parse_char+0x260>
    2f78:	60 c0       	rjmp	.+192    	; 0x303a <gcode_parse_char+0x320>
      if (read_digit.exponent < DECFLOAT_EXP_MAX + 1 &&
    2f7a:	60 91 32 06 	lds	r22, 0x0632
    2f7e:	6f 77       	andi	r22, 0x7F	; 127
    2f80:	86 2f       	mov	r24, r22
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	04 97       	sbiw	r24, 0x04	; 4
    2f86:	0c f0       	brlt	.+2      	; 0x2f8a <gcode_parse_char+0x270>
    2f88:	f3 c0       	rjmp	.+486    	; 0x3170 <gcode_parse_char+0x456>
    2f8a:	80 91 05 06 	lds	r24, 0x0605
    2f8e:	80 fd       	sbrc	r24, 0
    2f90:	0e c0       	rjmp	.+28     	; 0x2fae <gcode_parse_char+0x294>
    2f92:	80 91 2e 06 	lds	r24, 0x062E
    2f96:	90 91 2f 06 	lds	r25, 0x062F
    2f9a:	a0 91 30 06 	lds	r26, 0x0630
    2f9e:	b0 91 31 06 	lds	r27, 0x0631
    2fa2:	8f 5a       	subi	r24, 0xAF	; 175
    2fa4:	95 47       	sbci	r25, 0x75	; 117
    2fa6:	a1 44       	sbci	r26, 0x41	; 65
    2fa8:	b0 40       	sbci	r27, 0x00	; 0
    2faa:	78 f0       	brcs	.+30     	; 0x2fca <gcode_parse_char+0x2b0>
    2fac:	e1 c0       	rjmp	.+450    	; 0x3170 <gcode_parse_char+0x456>
    2fae:	80 91 2e 06 	lds	r24, 0x062E
    2fb2:	90 91 2f 06 	lds	r25, 0x062F
    2fb6:	a0 91 30 06 	lds	r26, 0x0630
    2fba:	b0 91 31 06 	lds	r27, 0x0631
    2fbe:	8d 5f       	subi	r24, 0xFD	; 253
    2fc0:	90 48       	sbci	r25, 0x80	; 128
    2fc2:	a2 40       	sbci	r26, 0x02	; 2
    2fc4:	b0 40       	sbci	r27, 0x00	; 0
    2fc6:	08 f0       	brcs	.+2      	; 0x2fca <gcode_parse_char+0x2b0>
    2fc8:	d3 c0       	rjmp	.+422    	; 0x3170 <gcode_parse_char+0x456>
          ((next_target.option_inches == 0 &&
          read_digit.mantissa < DECFLOAT_MANT_MM_MAX) ||
          (next_target.option_inches &&
          read_digit.mantissa < DECFLOAT_MANT_IN_MAX))) {
        // this is simply mantissa = (mantissa * 10) + atoi(c) in different clothes
        read_digit.mantissa = (read_digit.mantissa << 3) +
    2fca:	80 91 2e 06 	lds	r24, 0x062E
    2fce:	90 91 2f 06 	lds	r25, 0x062F
    2fd2:	a0 91 30 06 	lds	r26, 0x0630
    2fd6:	b0 91 31 06 	lds	r27, 0x0631
    2fda:	9c 01       	movw	r18, r24
    2fdc:	ad 01       	movw	r20, r26
    2fde:	e3 e0       	ldi	r30, 0x03	; 3
    2fe0:	22 0f       	add	r18, r18
    2fe2:	33 1f       	adc	r19, r19
    2fe4:	44 1f       	adc	r20, r20
    2fe6:	55 1f       	adc	r21, r21
    2fe8:	ea 95       	dec	r30
    2fea:	d1 f7       	brne	.-12     	; 0x2fe0 <gcode_parse_char+0x2c6>
    2fec:	88 0f       	add	r24, r24
    2fee:	99 1f       	adc	r25, r25
    2ff0:	aa 1f       	adc	r26, r26
    2ff2:	bb 1f       	adc	r27, r27
    2ff4:	28 0f       	add	r18, r24
    2ff6:	39 1f       	adc	r19, r25
    2ff8:	4a 1f       	adc	r20, r26
    2ffa:	5b 1f       	adc	r21, r27
    2ffc:	81 2f       	mov	r24, r17
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	c0 97       	sbiw	r24, 0x30	; 48
    3002:	aa 27       	eor	r26, r26
    3004:	97 fd       	sbrc	r25, 7
    3006:	a0 95       	com	r26
    3008:	ba 2f       	mov	r27, r26
    300a:	28 0f       	add	r18, r24
    300c:	39 1f       	adc	r19, r25
    300e:	4a 1f       	adc	r20, r26
    3010:	5b 1f       	adc	r21, r27
    3012:	20 93 2e 06 	sts	0x062E, r18
    3016:	30 93 2f 06 	sts	0x062F, r19
    301a:	40 93 30 06 	sts	0x0630, r20
    301e:	50 93 31 06 	sts	0x0631, r21
                              (read_digit.mantissa << 1) + (c - '0');
        if (read_digit.exponent)
    3022:	66 23       	and	r22, r22
    3024:	09 f4       	brne	.+2      	; 0x3028 <gcode_parse_char+0x30e>
    3026:	a4 c0       	rjmp	.+328    	; 0x3170 <gcode_parse_char+0x456>
          read_digit.exponent++;
    3028:	6f 5f       	subi	r22, 0xFF	; 255
    302a:	6f 77       	andi	r22, 0x7F	; 127
    302c:	80 91 32 06 	lds	r24, 0x0632
    3030:	80 78       	andi	r24, 0x80	; 128
    3032:	86 2b       	or	r24, r22
    3034:	80 93 32 06 	sts	0x0632, r24
    3038:	9b c0       	rjmp	.+310    	; 0x3170 <gcode_parse_char+0x456>
      }
    }
    else {
      switch (c) {
    303a:	1e 34       	cpi	r17, 0x4E	; 78
    303c:	09 f4       	brne	.+2      	; 0x3040 <gcode_parse_char+0x326>
    303e:	69 c0       	rjmp	.+210    	; 0x3112 <gcode_parse_char+0x3f8>
    3040:	1f 34       	cpi	r17, 0x4F	; 79
    3042:	00 f5       	brcc	.+64     	; 0x3084 <gcode_parse_char+0x36a>
    3044:	15 34       	cpi	r17, 0x45	; 69
    3046:	09 f4       	brne	.+2      	; 0x304a <gcode_parse_char+0x330>
    3048:	4e c0       	rjmp	.+156    	; 0x30e6 <gcode_parse_char+0x3cc>
    304a:	16 34       	cpi	r17, 0x46	; 70
    304c:	98 f4       	brcc	.+38     	; 0x3074 <gcode_parse_char+0x35a>
    304e:	1d 32       	cpi	r17, 0x2D	; 45
    3050:	09 f4       	brne	.+2      	; 0x3054 <gcode_parse_char+0x33a>
    3052:	6f c0       	rjmp	.+222    	; 0x3132 <gcode_parse_char+0x418>
    3054:	1e 32       	cpi	r17, 0x2E	; 46
    3056:	38 f4       	brcc	.+14     	; 0x3066 <gcode_parse_char+0x34c>
    3058:	18 32       	cpi	r17, 0x28	; 40
    305a:	09 f4       	brne	.+2      	; 0x305e <gcode_parse_char+0x344>
    305c:	66 c0       	rjmp	.+204    	; 0x312a <gcode_parse_char+0x410>
    305e:	1a 32       	cpi	r17, 0x2A	; 42
    3060:	09 f0       	breq	.+2      	; 0x3064 <gcode_parse_char+0x34a>
    3062:	86 c0       	rjmp	.+268    	; 0x3170 <gcode_parse_char+0x456>
    3064:	5a c0       	rjmp	.+180    	; 0x311a <gcode_parse_char+0x400>
    3066:	1e 32       	cpi	r17, 0x2E	; 46
    3068:	09 f4       	brne	.+2      	; 0x306c <gcode_parse_char+0x352>
    306a:	6f c0       	rjmp	.+222    	; 0x314a <gcode_parse_char+0x430>
    306c:	1b 33       	cpi	r17, 0x3B	; 59
    306e:	09 f0       	breq	.+2      	; 0x3072 <gcode_parse_char+0x358>
    3070:	7f c0       	rjmp	.+254    	; 0x3170 <gcode_parse_char+0x456>
    3072:	57 c0       	rjmp	.+174    	; 0x3122 <gcode_parse_char+0x408>
    3074:	17 34       	cpi	r17, 0x47	; 71
    3076:	c9 f0       	breq	.+50     	; 0x30aa <gcode_parse_char+0x390>
    3078:	17 34       	cpi	r17, 0x47	; 71
    307a:	c8 f1       	brcs	.+114    	; 0x30ee <gcode_parse_char+0x3d4>
    307c:	1d 34       	cpi	r17, 0x4D	; 77
    307e:	09 f0       	breq	.+2      	; 0x3082 <gcode_parse_char+0x368>
    3080:	77 c0       	rjmp	.+238    	; 0x3170 <gcode_parse_char+0x456>
    3082:	1c c0       	rjmp	.+56     	; 0x30bc <gcode_parse_char+0x3a2>
    3084:	14 35       	cpi	r17, 0x54	; 84
    3086:	09 f4       	brne	.+2      	; 0x308a <gcode_parse_char+0x370>
    3088:	40 c0       	rjmp	.+128    	; 0x310a <gcode_parse_char+0x3f0>
    308a:	15 35       	cpi	r17, 0x55	; 85
    308c:	30 f4       	brcc	.+12     	; 0x309a <gcode_parse_char+0x380>
    308e:	10 35       	cpi	r17, 0x50	; 80
    3090:	c1 f1       	breq	.+112    	; 0x3102 <gcode_parse_char+0x3e8>
    3092:	13 35       	cpi	r17, 0x53	; 83
    3094:	09 f0       	breq	.+2      	; 0x3098 <gcode_parse_char+0x37e>
    3096:	6c c0       	rjmp	.+216    	; 0x3170 <gcode_parse_char+0x456>
    3098:	2e c0       	rjmp	.+92     	; 0x30f6 <gcode_parse_char+0x3dc>
    309a:	19 35       	cpi	r17, 0x59	; 89
    309c:	e1 f0       	breq	.+56     	; 0x30d6 <gcode_parse_char+0x3bc>
    309e:	1a 35       	cpi	r17, 0x5A	; 90
    30a0:	f1 f0       	breq	.+60     	; 0x30de <gcode_parse_char+0x3c4>
    30a2:	18 35       	cpi	r17, 0x58	; 88
    30a4:	09 f0       	breq	.+2      	; 0x30a8 <gcode_parse_char+0x38e>
    30a6:	64 c0       	rjmp	.+200    	; 0x3170 <gcode_parse_char+0x456>
    30a8:	12 c0       	rjmp	.+36     	; 0x30ce <gcode_parse_char+0x3b4>
        // Each currently known command is either G or M, so preserve
        // previous G/M unless a new one has appeared.
        // FIXME: same for T command
        case 'G':
          next_target.seen_G = 1;
    30aa:	80 91 03 06 	lds	r24, 0x0603
    30ae:	81 60       	ori	r24, 0x01	; 1
          next_target.seen_M = 0;
    30b0:	8d 7f       	andi	r24, 0xFD	; 253
    30b2:	80 93 03 06 	sts	0x0603, r24
          next_target.M = 0;
    30b6:	10 92 07 06 	sts	0x0607, r1
    30ba:	5a c0       	rjmp	.+180    	; 0x3170 <gcode_parse_char+0x456>
          break;
        case 'M':
          next_target.seen_M = 1;
    30bc:	80 91 03 06 	lds	r24, 0x0603
    30c0:	82 60       	ori	r24, 0x02	; 2
          next_target.seen_G = 0;
    30c2:	8e 7f       	andi	r24, 0xFE	; 254
    30c4:	80 93 03 06 	sts	0x0603, r24
          next_target.G = 0;
    30c8:	10 92 06 06 	sts	0x0606, r1
    30cc:	51 c0       	rjmp	.+162    	; 0x3170 <gcode_parse_char+0x456>
          break;
        case 'X':
          next_target.seen_X = 1;
    30ce:	80 91 03 06 	lds	r24, 0x0603
    30d2:	84 60       	ori	r24, 0x04	; 4
    30d4:	13 c0       	rjmp	.+38     	; 0x30fc <gcode_parse_char+0x3e2>
          break;
        case 'Y':
          next_target.seen_Y = 1;
    30d6:	80 91 03 06 	lds	r24, 0x0603
    30da:	88 60       	ori	r24, 0x08	; 8
    30dc:	0f c0       	rjmp	.+30     	; 0x30fc <gcode_parse_char+0x3e2>
          break;
        case 'Z':
          next_target.seen_Z = 1;
    30de:	80 91 03 06 	lds	r24, 0x0603
    30e2:	80 61       	ori	r24, 0x10	; 16
    30e4:	0b c0       	rjmp	.+22     	; 0x30fc <gcode_parse_char+0x3e2>
          break;
        case 'E':
          next_target.seen_E = 1;
    30e6:	80 91 03 06 	lds	r24, 0x0603
    30ea:	80 62       	ori	r24, 0x20	; 32
    30ec:	07 c0       	rjmp	.+14     	; 0x30fc <gcode_parse_char+0x3e2>
          break;
        case 'F':
          next_target.seen_F = 1;
    30ee:	80 91 03 06 	lds	r24, 0x0603
    30f2:	80 64       	ori	r24, 0x40	; 64
    30f4:	03 c0       	rjmp	.+6      	; 0x30fc <gcode_parse_char+0x3e2>
          break;
        case 'S':
          next_target.seen_S = 1;
    30f6:	80 91 03 06 	lds	r24, 0x0603
    30fa:	80 68       	ori	r24, 0x80	; 128
    30fc:	80 93 03 06 	sts	0x0603, r24
    3100:	37 c0       	rjmp	.+110    	; 0x3170 <gcode_parse_char+0x456>
          break;
        case 'P':
          next_target.seen_P = 1;
    3102:	80 91 04 06 	lds	r24, 0x0604
    3106:	81 60       	ori	r24, 0x01	; 1
    3108:	31 c0       	rjmp	.+98     	; 0x316c <gcode_parse_char+0x452>
          break;
        case 'T':
          next_target.seen_T = 1;
    310a:	80 91 04 06 	lds	r24, 0x0604
    310e:	82 60       	ori	r24, 0x02	; 2
    3110:	2d c0       	rjmp	.+90     	; 0x316c <gcode_parse_char+0x452>
          break;
        case 'N':
          next_target.seen_N = 1;
    3112:	80 91 04 06 	lds	r24, 0x0604
    3116:	84 60       	ori	r24, 0x04	; 4
    3118:	29 c0       	rjmp	.+82     	; 0x316c <gcode_parse_char+0x452>
          break;
        case '*':
          next_target.seen_checksum = 1;
    311a:	80 91 04 06 	lds	r24, 0x0604
    311e:	88 60       	ori	r24, 0x08	; 8
    3120:	25 c0       	rjmp	.+74     	; 0x316c <gcode_parse_char+0x452>
          break;

        // comments
        case ';':
          next_target.seen_semi_comment = 1;
    3122:	80 91 04 06 	lds	r24, 0x0604
    3126:	80 61       	ori	r24, 0x10	; 16
    3128:	21 c0       	rjmp	.+66     	; 0x316c <gcode_parse_char+0x452>
          break;
        case '(':
          next_target.seen_parens_comment = 1;
    312a:	80 91 04 06 	lds	r24, 0x0604
    312e:	80 62       	ori	r24, 0x20	; 32
    3130:	1d c0       	rjmp	.+58     	; 0x316c <gcode_parse_char+0x452>

        // now for some numeracy
        case '-':
          read_digit.sign = 1;
          // force sign to be at start of number, so 1-2 = -2 instead of -12
          read_digit.exponent = 0;
    3132:	80 e8       	ldi	r24, 0x80	; 128
    3134:	80 93 32 06 	sts	0x0632, r24
          read_digit.mantissa = 0;
    3138:	10 92 2e 06 	sts	0x062E, r1
    313c:	10 92 2f 06 	sts	0x062F, r1
    3140:	10 92 30 06 	sts	0x0630, r1
    3144:	10 92 31 06 	sts	0x0631, r1
    3148:	13 c0       	rjmp	.+38     	; 0x3170 <gcode_parse_char+0x456>
          break;
        case '.':
          if (read_digit.exponent == 0)
    314a:	90 91 32 06 	lds	r25, 0x0632
    314e:	89 2f       	mov	r24, r25
    3150:	8f 77       	andi	r24, 0x7F	; 127
    3152:	71 f4       	brne	.+28     	; 0x3170 <gcode_parse_char+0x456>
            read_digit.exponent = 1;
    3154:	90 78       	andi	r25, 0x80	; 128
    3156:	91 60       	ori	r25, 0x01	; 1
    3158:	90 93 32 06 	sts	0x0632, r25
    315c:	09 c0       	rjmp	.+18     	; 0x3170 <gcode_parse_char+0x456>
            serial_writechar('?');
          #endif
          break;
      }
		}
	} else if ( next_target.seen_parens_comment == 1 && c == ')')
    315e:	80 91 04 06 	lds	r24, 0x0604
    3162:	85 ff       	sbrs	r24, 5
    3164:	05 c0       	rjmp	.+10     	; 0x3170 <gcode_parse_char+0x456>
    3166:	19 32       	cpi	r17, 0x29	; 41
    3168:	19 f4       	brne	.+6      	; 0x3170 <gcode_parse_char+0x456>
		next_target.seen_parens_comment = 0; // recognize stuff after a (comment)
    316a:	8f 7d       	andi	r24, 0xDF	; 223
    316c:	80 93 04 06 	sts	0x0604, r24

	if (next_target.seen_checksum == 0)
    3170:	90 91 04 06 	lds	r25, 0x0604
    3174:	96 95       	lsr	r25
    3176:	96 95       	lsr	r25
    3178:	96 95       	lsr	r25
    317a:	91 70       	andi	r25, 0x01	; 1
    317c:	29 f4       	brne	.+10     	; 0x3188 <gcode_parse_char+0x46e>
		next_target.checksum_calculated =
    317e:	80 91 2d 06 	lds	r24, 0x062D
    3182:	80 27       	eor	r24, r16
    3184:	80 93 2d 06 	sts	0x062D, r24
			crc(next_target.checksum_calculated, checksum_char);

	// end of line
	if ((c == 10) || (c == 13)) {
    3188:	1a 30       	cpi	r17, 0x0A	; 10
    318a:	19 f0       	breq	.+6      	; 0x3192 <gcode_parse_char+0x478>
    318c:	1d 30       	cpi	r17, 0x0D	; 13
    318e:	09 f0       	breq	.+2      	; 0x3192 <gcode_parse_char+0x478>
    3190:	9d c0       	rjmp	.+314    	; 0x32cc <gcode_parse_char+0x5b2>
		if (DEBUG_ECHO && (debug_flags & DEBUG_ECHO))
			serial_writechar(c);

    // Assume G1 for unspecified movements.
    if ( ! next_target.seen_G &&
    3192:	80 91 03 06 	lds	r24, 0x0603
    3196:	80 fd       	sbrc	r24, 0
    3198:	12 c0       	rjmp	.+36     	; 0x31be <gcode_parse_char+0x4a4>
    319a:	82 fd       	sbrc	r24, 2
    319c:	08 c0       	rjmp	.+16     	; 0x31ae <gcode_parse_char+0x494>
    319e:	83 fd       	sbrc	r24, 3
    31a0:	06 c0       	rjmp	.+12     	; 0x31ae <gcode_parse_char+0x494>
    31a2:	84 fd       	sbrc	r24, 4
    31a4:	04 c0       	rjmp	.+8      	; 0x31ae <gcode_parse_char+0x494>
    31a6:	85 fd       	sbrc	r24, 5
    31a8:	02 c0       	rjmp	.+4      	; 0x31ae <gcode_parse_char+0x494>
    31aa:	86 ff       	sbrs	r24, 6
    31ac:	08 c0       	rjmp	.+16     	; 0x31be <gcode_parse_char+0x4a4>
        (next_target.seen_X || next_target.seen_Y || next_target.seen_Z ||
         next_target.seen_E || next_target.seen_F)) {
      next_target.seen_G = 1;
    31ae:	80 91 03 06 	lds	r24, 0x0603
    31b2:	81 60       	ori	r24, 0x01	; 1
    31b4:	80 93 03 06 	sts	0x0603, r24
      next_target.G = 1;
    31b8:	81 e0       	ldi	r24, 0x01	; 1
    31ba:	80 93 06 06 	sts	0x0606, r24
			(next_target.seen_M && (next_target.M == 110))
		#else
			1
		#endif
			) {
			if (
    31be:	20 91 2d 06 	lds	r18, 0x062D
    31c2:	80 91 2c 06 	lds	r24, 0x062C
    31c6:	28 17       	cp	r18, r24
    31c8:	11 f0       	breq	.+4      	; 0x31ce <gcode_parse_char+0x4b4>
    31ca:	99 23       	and	r25, r25
    31cc:	09 f5       	brne	.+66     	; 0x3210 <gcode_parse_char+0x4f6>
				#else
				((next_target.checksum_calculated == next_target.checksum_read) || (next_target.seen_checksum == 0))
				#endif
				) {
				// process
				serial_writestr_P(PSTR("ok "));
    31ce:	83 e9       	ldi	r24, 0x93	; 147
    31d0:	92 e0       	ldi	r25, 0x02	; 2
    31d2:	0e 94 c7 1e 	call	0x3d8e	; 0x3d8e <serial_writestr_P>
				process_gcode_command();
    31d6:	0e 94 69 19 	call	0x32d2	; 0x32d2 <process_gcode_command>
				serial_writechar('\n');
    31da:	8a e0       	ldi	r24, 0x0A	; 10
    31dc:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <serial_writechar>

				// expect next line number
				if (next_target.seen_N == 1)
    31e0:	80 91 04 06 	lds	r24, 0x0604
    31e4:	82 ff       	sbrs	r24, 2
    31e6:	3f c0       	rjmp	.+126    	; 0x3266 <gcode_parse_char+0x54c>
					next_target.N_expected = next_target.N + 1;
    31e8:	80 91 24 06 	lds	r24, 0x0624
    31ec:	90 91 25 06 	lds	r25, 0x0625
    31f0:	a0 91 26 06 	lds	r26, 0x0626
    31f4:	b0 91 27 06 	lds	r27, 0x0627
    31f8:	01 96       	adiw	r24, 0x01	; 1
    31fa:	a1 1d       	adc	r26, r1
    31fc:	b1 1d       	adc	r27, r1
    31fe:	80 93 28 06 	sts	0x0628, r24
    3202:	90 93 29 06 	sts	0x0629, r25
    3206:	a0 93 2a 06 	sts	0x062A, r26
    320a:	b0 93 2b 06 	sts	0x062B, r27
    320e:	2b c0       	rjmp	.+86     	; 0x3266 <gcode_parse_char+0x54c>
			}
			else {
				sersendf_P(PSTR("rs N%ld Expected checksum %d\n"), next_target.N_expected, next_target.checksum_calculated);
    3210:	8d b7       	in	r24, 0x3d	; 61
    3212:	9e b7       	in	r25, 0x3e	; 62
    3214:	08 97       	sbiw	r24, 0x08	; 8
    3216:	0f b6       	in	r0, 0x3f	; 63
    3218:	f8 94       	cli
    321a:	9e bf       	out	0x3e, r25	; 62
    321c:	0f be       	out	0x3f, r0	; 63
    321e:	8d bf       	out	0x3d, r24	; 61
    3220:	ed b7       	in	r30, 0x3d	; 61
    3222:	fe b7       	in	r31, 0x3e	; 62
    3224:	31 96       	adiw	r30, 0x01	; 1
    3226:	85 e7       	ldi	r24, 0x75	; 117
    3228:	92 e0       	ldi	r25, 0x02	; 2
    322a:	ad b7       	in	r26, 0x3d	; 61
    322c:	be b7       	in	r27, 0x3e	; 62
    322e:	12 96       	adiw	r26, 0x02	; 2
    3230:	9c 93       	st	X, r25
    3232:	8e 93       	st	-X, r24
    3234:	11 97       	sbiw	r26, 0x01	; 1
    3236:	80 91 28 06 	lds	r24, 0x0628
    323a:	90 91 29 06 	lds	r25, 0x0629
    323e:	a0 91 2a 06 	lds	r26, 0x062A
    3242:	b0 91 2b 06 	lds	r27, 0x062B
    3246:	82 83       	std	Z+2, r24	; 0x02
    3248:	93 83       	std	Z+3, r25	; 0x03
    324a:	a4 83       	std	Z+4, r26	; 0x04
    324c:	b5 83       	std	Z+5, r27	; 0x05
    324e:	26 83       	std	Z+6, r18	; 0x06
    3250:	17 82       	std	Z+7, r1	; 0x07
    3252:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <sersendf_P>
    3256:	8d b7       	in	r24, 0x3d	; 61
    3258:	9e b7       	in	r25, 0x3e	; 62
    325a:	08 96       	adiw	r24, 0x08	; 8
    325c:	0f b6       	in	r0, 0x3f	; 63
    325e:	f8 94       	cli
    3260:	9e bf       	out	0x3e, r25	; 62
    3262:	0f be       	out	0x3f, r0	; 63
    3264:	8d bf       	out	0x3d, r24	; 61
			sersendf_P(PSTR("rs N%ld Expected line number %ld\n"), next_target.N_expected, next_target.N_expected);
// 			request_resend();
		}

		// reset variables
		next_target.seen_X = next_target.seen_Y = next_target.seen_Z = \
    3266:	10 92 2d 06 	sts	0x062D, r1
    326a:	10 92 2c 06 	sts	0x062C, r1
    326e:	80 91 04 06 	lds	r24, 0x0604
    3272:	80 7c       	andi	r24, 0xC0	; 192
    3274:	80 93 04 06 	sts	0x0604, r24
    3278:	10 92 03 06 	sts	0x0603, r1
      next_target.seen_G = next_target.seen_M = next_target.seen_checksum = \
      next_target.seen_semi_comment = next_target.seen_parens_comment = \
      next_target.checksum_read = next_target.checksum_calculated = 0;
		// last_field and read_digit are reset above already

		if (next_target.option_all_relative) {
    327c:	86 ff       	sbrs	r24, 6
    327e:	18 c0       	rjmp	.+48     	; 0x32b0 <gcode_parse_char+0x596>
      next_target.target.axis[X] = next_target.target.axis[Y] = next_target.target.axis[Z] = 0;
    3280:	10 92 10 06 	sts	0x0610, r1
    3284:	10 92 11 06 	sts	0x0611, r1
    3288:	10 92 12 06 	sts	0x0612, r1
    328c:	10 92 13 06 	sts	0x0613, r1
    3290:	10 92 0c 06 	sts	0x060C, r1
    3294:	10 92 0d 06 	sts	0x060D, r1
    3298:	10 92 0e 06 	sts	0x060E, r1
    329c:	10 92 0f 06 	sts	0x060F, r1
    32a0:	10 92 08 06 	sts	0x0608, r1
    32a4:	10 92 09 06 	sts	0x0609, r1
    32a8:	10 92 0a 06 	sts	0x060A, r1
    32ac:	10 92 0b 06 	sts	0x060B, r1
		}
		if (next_target.option_all_relative || next_target.option_e_relative) {
    32b0:	80 91 04 06 	lds	r24, 0x0604
    32b4:	86 fd       	sbrc	r24, 6
    32b6:	02 c0       	rjmp	.+4      	; 0x32bc <gcode_parse_char+0x5a2>
    32b8:	87 ff       	sbrs	r24, 7
    32ba:	08 c0       	rjmp	.+16     	; 0x32cc <gcode_parse_char+0x5b2>
      next_target.target.axis[E] = 0;
    32bc:	10 92 14 06 	sts	0x0614, r1
    32c0:	10 92 15 06 	sts	0x0615, r1
    32c4:	10 92 16 06 	sts	0x0616, r1
    32c8:	10 92 17 06 	sts	0x0617, r1
		}
	}
}
    32cc:	1f 91       	pop	r17
    32ce:	0f 91       	pop	r16
    32d0:	08 95       	ret

000032d2 <process_gcode_command>:
    If you want to add support for a new G or M code, this is the place.


*//*************************************************************************/

void process_gcode_command() {
    32d2:	ef 92       	push	r14
    32d4:	ff 92       	push	r15
    32d6:	0f 93       	push	r16
    32d8:	1f 93       	push	r17
	uint32_t	backup_f;

	// convert relative to absolute
	if (next_target.option_all_relative) {
    32da:	80 91 04 06 	lds	r24, 0x0604
    32de:	86 ff       	sbrs	r24, 6
    32e0:	55 c0       	rjmp	.+170    	; 0x338c <process_gcode_command+0xba>
    next_target.target.axis[X] += startpoint.axis[X];
    32e2:	80 91 28 02 	lds	r24, 0x0228
    32e6:	90 91 29 02 	lds	r25, 0x0229
    32ea:	a0 91 2a 02 	lds	r26, 0x022A
    32ee:	b0 91 2b 02 	lds	r27, 0x022B
    32f2:	20 91 08 06 	lds	r18, 0x0608
    32f6:	30 91 09 06 	lds	r19, 0x0609
    32fa:	40 91 0a 06 	lds	r20, 0x060A
    32fe:	50 91 0b 06 	lds	r21, 0x060B
    3302:	82 0f       	add	r24, r18
    3304:	93 1f       	adc	r25, r19
    3306:	a4 1f       	adc	r26, r20
    3308:	b5 1f       	adc	r27, r21
    330a:	80 93 08 06 	sts	0x0608, r24
    330e:	90 93 09 06 	sts	0x0609, r25
    3312:	a0 93 0a 06 	sts	0x060A, r26
    3316:	b0 93 0b 06 	sts	0x060B, r27
    next_target.target.axis[Y] += startpoint.axis[Y];
    331a:	80 91 2c 02 	lds	r24, 0x022C
    331e:	90 91 2d 02 	lds	r25, 0x022D
    3322:	a0 91 2e 02 	lds	r26, 0x022E
    3326:	b0 91 2f 02 	lds	r27, 0x022F
    332a:	20 91 0c 06 	lds	r18, 0x060C
    332e:	30 91 0d 06 	lds	r19, 0x060D
    3332:	40 91 0e 06 	lds	r20, 0x060E
    3336:	50 91 0f 06 	lds	r21, 0x060F
    333a:	82 0f       	add	r24, r18
    333c:	93 1f       	adc	r25, r19
    333e:	a4 1f       	adc	r26, r20
    3340:	b5 1f       	adc	r27, r21
    3342:	80 93 0c 06 	sts	0x060C, r24
    3346:	90 93 0d 06 	sts	0x060D, r25
    334a:	a0 93 0e 06 	sts	0x060E, r26
    334e:	b0 93 0f 06 	sts	0x060F, r27
    next_target.target.axis[Z] += startpoint.axis[Z];
    3352:	80 91 30 02 	lds	r24, 0x0230
    3356:	90 91 31 02 	lds	r25, 0x0231
    335a:	a0 91 32 02 	lds	r26, 0x0232
    335e:	b0 91 33 02 	lds	r27, 0x0233
    3362:	20 91 10 06 	lds	r18, 0x0610
    3366:	30 91 11 06 	lds	r19, 0x0611
    336a:	40 91 12 06 	lds	r20, 0x0612
    336e:	50 91 13 06 	lds	r21, 0x0613
    3372:	82 0f       	add	r24, r18
    3374:	93 1f       	adc	r25, r19
    3376:	a4 1f       	adc	r26, r20
    3378:	b5 1f       	adc	r27, r21
    337a:	80 93 10 06 	sts	0x0610, r24
    337e:	90 93 11 06 	sts	0x0611, r25
    3382:	a0 93 12 06 	sts	0x0612, r26
    3386:	b0 93 13 06 	sts	0x0613, r27
    338a:	02 c0       	rjmp	.+4      	; 0x3390 <process_gcode_command+0xbe>
	}

	// E relative movement.
	// Matches Sprinter's behaviour as of March 2012.
	if (next_target.option_all_relative || next_target.option_e_relative)
    338c:	87 ff       	sbrs	r24, 7
    338e:	04 c0       	rjmp	.+8      	; 0x3398 <process_gcode_command+0xc6>
		next_target.target.e_relative = 1;
    3390:	80 91 1c 06 	lds	r24, 0x061C
    3394:	81 60       	ori	r24, 0x01	; 1
    3396:	03 c0       	rjmp	.+6      	; 0x339e <process_gcode_command+0xcc>
	else
		next_target.target.e_relative = 0;
    3398:	80 91 1c 06 	lds	r24, 0x061C
    339c:	8e 7f       	andi	r24, 0xFE	; 254
    339e:	80 93 1c 06 	sts	0x061C, r24
	#ifdef	Y_MAX
    if (next_target.target.axis[Y] > Y_MAX * 1000.)
      next_target.target.axis[Y] = Y_MAX * 1000.;
	#endif
	#ifdef	Z_MIN
    if (next_target.target.axis[Z] < Z_MIN * 1000.)
    33a2:	60 91 10 06 	lds	r22, 0x0610
    33a6:	70 91 11 06 	lds	r23, 0x0611
    33aa:	80 91 12 06 	lds	r24, 0x0612
    33ae:	90 91 13 06 	lds	r25, 0x0613
    33b2:	0e 94 43 22 	call	0x4486	; 0x4486 <__floatsisf>
    33b6:	20 e0       	ldi	r18, 0x00	; 0
    33b8:	30 e0       	ldi	r19, 0x00	; 0
    33ba:	40 e0       	ldi	r20, 0x00	; 0
    33bc:	50 e0       	ldi	r21, 0x00	; 0
    33be:	0e 94 a9 21 	call	0x4352	; 0x4352 <__cmpsf2>
    33c2:	88 23       	and	r24, r24
    33c4:	44 f4       	brge	.+16     	; 0x33d6 <process_gcode_command+0x104>
      next_target.target.axis[Z] = Z_MIN * 1000.;
    33c6:	10 92 10 06 	sts	0x0610, r1
    33ca:	10 92 11 06 	sts	0x0611, r1
    33ce:	10 92 12 06 	sts	0x0612, r1
    33d2:	10 92 13 06 	sts	0x0613, r1
	#endif
	#ifdef	Z_MAX
    if (next_target.target.axis[Z] > Z_MAX * 1000.)
    33d6:	60 91 10 06 	lds	r22, 0x0610
    33da:	70 91 11 06 	lds	r23, 0x0611
    33de:	80 91 12 06 	lds	r24, 0x0612
    33e2:	90 91 13 06 	lds	r25, 0x0613
    33e6:	0e 94 43 22 	call	0x4486	; 0x4486 <__floatsisf>
    33ea:	20 e0       	ldi	r18, 0x00	; 0
    33ec:	30 e5       	ldi	r19, 0x50	; 80
    33ee:	43 ec       	ldi	r20, 0xC3	; 195
    33f0:	57 e4       	ldi	r21, 0x47	; 71
    33f2:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <__gesf2>
    33f6:	18 16       	cp	r1, r24
    33f8:	64 f4       	brge	.+24     	; 0x3412 <process_gcode_command+0x140>
      next_target.target.axis[Z] = Z_MAX * 1000.;
    33fa:	80 ea       	ldi	r24, 0xA0	; 160
    33fc:	96 e8       	ldi	r25, 0x86	; 134
    33fe:	a1 e0       	ldi	r26, 0x01	; 1
    3400:	b0 e0       	ldi	r27, 0x00	; 0
    3402:	80 93 10 06 	sts	0x0610, r24
    3406:	90 93 11 06 	sts	0x0611, r25
    340a:	a0 93 12 06 	sts	0x0612, r26
    340e:	b0 93 13 06 	sts	0x0613, r27
	#endif


	// The GCode documentation was taken from http://reprap.org/wiki/Gcode .

	if (next_target.seen_T) {
    3412:	80 91 04 06 	lds	r24, 0x0604
    3416:	81 ff       	sbrs	r24, 1
    3418:	04 c0       	rjmp	.+8      	; 0x3422 <process_gcode_command+0x150>
	    //?
	    //? Example: T1
	    //?
	    //? Select extruder number 1 to build with.  Extruder numbering starts at 0.

	    next_tool = next_target.T;
    341a:	80 91 23 06 	lds	r24, 0x0623
    341e:	80 93 81 06 	sts	0x0681, r24
	}

	if (next_target.seen_G) {
    3422:	80 91 03 06 	lds	r24, 0x0603
    3426:	80 ff       	sbrs	r24, 0
    3428:	53 c1       	rjmp	.+678    	; 0x36d0 <process_gcode_command+0x3fe>
		uint8_t axisSelected = 0;
		switch (next_target.G) {
    342a:	20 91 06 06 	lds	r18, 0x0606
    342e:	2c 31       	cpi	r18, 0x1C	; 28
    3430:	09 f4       	brne	.+2      	; 0x3434 <process_gcode_command+0x162>
    3432:	7f c0       	rjmp	.+254    	; 0x3532 <process_gcode_command+0x260>
    3434:	2d 31       	cpi	r18, 0x1D	; 29
    3436:	90 f4       	brcc	.+36     	; 0x345c <process_gcode_command+0x18a>
    3438:	24 30       	cpi	r18, 0x04	; 4
    343a:	09 f4       	brne	.+2      	; 0x343e <process_gcode_command+0x16c>
    343c:	4b c0       	rjmp	.+150    	; 0x34d4 <process_gcode_command+0x202>
    343e:	25 30       	cpi	r18, 0x05	; 5
    3440:	30 f4       	brcc	.+12     	; 0x344e <process_gcode_command+0x17c>
    3442:	22 23       	and	r18, r18
    3444:	09 f1       	breq	.+66     	; 0x3488 <process_gcode_command+0x1b6>
    3446:	21 30       	cpi	r18, 0x01	; 1
    3448:	09 f0       	breq	.+2      	; 0x344c <process_gcode_command+0x17a>
    344a:	3a c1       	rjmp	.+628    	; 0x36c0 <process_gcode_command+0x3ee>
    344c:	40 c0       	rjmp	.+128    	; 0x34ce <process_gcode_command+0x1fc>
    344e:	24 31       	cpi	r18, 0x14	; 20
    3450:	09 f4       	brne	.+2      	; 0x3454 <process_gcode_command+0x182>
    3452:	5f c0       	rjmp	.+190    	; 0x3512 <process_gcode_command+0x240>
    3454:	25 31       	cpi	r18, 0x15	; 21
    3456:	09 f0       	breq	.+2      	; 0x345a <process_gcode_command+0x188>
    3458:	33 c1       	rjmp	.+614    	; 0x36c0 <process_gcode_command+0x3ee>
    345a:	5f c0       	rjmp	.+190    	; 0x351a <process_gcode_command+0x248>
    345c:	2b 35       	cpi	r18, 0x5B	; 91
    345e:	09 f4       	brne	.+2      	; 0x3462 <process_gcode_command+0x190>
    3460:	86 c0       	rjmp	.+268    	; 0x356e <process_gcode_command+0x29c>
    3462:	2c 35       	cpi	r18, 0x5C	; 92
    3464:	38 f4       	brcc	.+14     	; 0x3474 <process_gcode_command+0x1a2>
    3466:	2e 31       	cpi	r18, 0x1E	; 30
    3468:	09 f4       	brne	.+2      	; 0x346c <process_gcode_command+0x19a>
    346a:	5d c0       	rjmp	.+186    	; 0x3526 <process_gcode_command+0x254>
    346c:	2a 35       	cpi	r18, 0x5A	; 90
    346e:	09 f0       	breq	.+2      	; 0x3472 <process_gcode_command+0x1a0>
    3470:	27 c1       	rjmp	.+590    	; 0x36c0 <process_gcode_command+0x3ee>
    3472:	79 c0       	rjmp	.+242    	; 0x3566 <process_gcode_command+0x294>
    3474:	21 3a       	cpi	r18, 0xA1	; 161
    3476:	09 f4       	brne	.+2      	; 0x347a <process_gcode_command+0x1a8>
    3478:	1e c1       	rjmp	.+572    	; 0x36b6 <process_gcode_command+0x3e4>
    347a:	22 3a       	cpi	r18, 0xA2	; 162
    347c:	09 f4       	brne	.+2      	; 0x3480 <process_gcode_command+0x1ae>
    347e:	8d c2       	rjmp	.+1306   	; 0x399a <process_gcode_command+0x6c8>
    3480:	2c 35       	cpi	r18, 0x5C	; 92
    3482:	09 f0       	breq	.+2      	; 0x3486 <process_gcode_command+0x1b4>
    3484:	1d c1       	rjmp	.+570    	; 0x36c0 <process_gcode_command+0x3ee>
    3486:	79 c0       	rjmp	.+242    	; 0x357a <process_gcode_command+0x2a8>
				//?
				//? Example: G0 X12
				//?
				//? In this case move rapidly to X = 12 mm.  In fact, the RepRap firmware uses exactly the same code for rapid as it uses for controlled moves (see G1 below), as - for the RepRap machine - this is just as efficient as not doing so.  (The distinction comes from some old machine tools that used to move faster if the axes were not driven in a straight line.  For them G0 allowed any movement in space to get to the destination as fast as possible.)
				//?
				backup_f = next_target.target.F;
    3488:	e0 90 18 06 	lds	r14, 0x0618
    348c:	f0 90 19 06 	lds	r15, 0x0619
    3490:	00 91 1a 06 	lds	r16, 0x061A
    3494:	10 91 1b 06 	lds	r17, 0x061B
				next_target.target.F = MAXIMUM_FEEDRATE_X * 2L;
    3498:	88 ee       	ldi	r24, 0xE8	; 232
    349a:	93 e0       	ldi	r25, 0x03	; 3
    349c:	a0 e0       	ldi	r26, 0x00	; 0
    349e:	b0 e0       	ldi	r27, 0x00	; 0
    34a0:	80 93 18 06 	sts	0x0618, r24
    34a4:	90 93 19 06 	sts	0x0619, r25
    34a8:	a0 93 1a 06 	sts	0x061A, r26
    34ac:	b0 93 1b 06 	sts	0x061B, r27
// t == NULL means add a wait for target temp to the queue
void enqueue_home(TARGET *t, uint8_t endstop_check, uint8_t endstop_stop_cond);

static void enqueue(TARGET *) __attribute__ ((always_inline));
inline void enqueue(TARGET *t) {
  enqueue_home(t, 0, 0);
    34b0:	88 e0       	ldi	r24, 0x08	; 8
    34b2:	96 e0       	ldi	r25, 0x06	; 6
    34b4:	60 e0       	ldi	r22, 0x00	; 0
    34b6:	40 e0       	ldi	r20, 0x00	; 0
    34b8:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <enqueue_home>
				enqueue(&next_target.target);
				next_target.target.F = backup_f;
    34bc:	e0 92 18 06 	sts	0x0618, r14
    34c0:	f0 92 19 06 	sts	0x0619, r15
    34c4:	00 93 1a 06 	sts	0x061A, r16
    34c8:	10 93 1b 06 	sts	0x061B, r17
    34cc:	66 c2       	rjmp	.+1228   	; 0x399a <process_gcode_command+0x6c8>
    34ce:	88 e0       	ldi	r24, 0x08	; 8
    34d0:	96 e0       	ldi	r25, 0x06	; 6
    34d2:	17 c2       	rjmp	.+1070   	; 0x3902 <process_gcode_command+0x630>
				//?
				//? Example: G4 P200
				//?
				//? In this case sit still doing nothing for 200 milliseconds.  During delays the state of the machine (for example the temperatures of its extruders) will still be preserved and controlled.
				//?
				queue_wait();
    34d4:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <queue_wait>
				// delay
				if (next_target.seen_P) {
    34d8:	80 91 04 06 	lds	r24, 0x0604
    34dc:	80 fd       	sbrc	r24, 0
    34de:	12 c0       	rjmp	.+36     	; 0x3504 <process_gcode_command+0x232>
    34e0:	5c c2       	rjmp	.+1208   	; 0x399a <process_gcode_command+0x6c8>
					for (;next_target.P > 0;next_target.P--) {
						clock();
    34e2:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <clock>
						delay_ms(1);
    34e6:	61 e0       	ldi	r22, 0x01	; 1
    34e8:	70 e0       	ldi	r23, 0x00	; 0
    34ea:	80 e0       	ldi	r24, 0x00	; 0
    34ec:	90 e0       	ldi	r25, 0x00	; 0
    34ee:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <delay_ms>
				//? In this case sit still doing nothing for 200 milliseconds.  During delays the state of the machine (for example the temperatures of its extruders) will still be preserved and controlled.
				//?
				queue_wait();
				// delay
				if (next_target.seen_P) {
					for (;next_target.P > 0;next_target.P--) {
    34f2:	80 91 21 06 	lds	r24, 0x0621
    34f6:	90 91 22 06 	lds	r25, 0x0622
    34fa:	01 97       	sbiw	r24, 0x01	; 1
    34fc:	90 93 22 06 	sts	0x0622, r25
    3500:	80 93 21 06 	sts	0x0621, r24
    3504:	80 91 21 06 	lds	r24, 0x0621
    3508:	90 91 22 06 	lds	r25, 0x0622
    350c:	89 2b       	or	r24, r25
    350e:	49 f7       	brne	.-46     	; 0x34e2 <process_gcode_command+0x210>
    3510:	44 c2       	rjmp	.+1160   	; 0x399a <process_gcode_command+0x6c8>
				//?
				//? Example: G20
				//?
				//? Units from now on are in inches.
				//?
				next_target.option_inches = 1;
    3512:	80 91 05 06 	lds	r24, 0x0605
    3516:	81 60       	ori	r24, 0x01	; 1
    3518:	03 c0       	rjmp	.+6      	; 0x3520 <process_gcode_command+0x24e>
				//?
				//? Example: G21
				//?
				//? Units from now on are in millimeters.  (This is the RepRap default.)
				//?
				next_target.option_inches = 0;
    351a:	80 91 05 06 	lds	r24, 0x0605
    351e:	8e 7f       	andi	r24, 0xFE	; 254
    3520:	80 93 05 06 	sts	0x0605, r24
    3524:	3a c2       	rjmp	.+1140   	; 0x399a <process_gcode_command+0x6c8>
    3526:	88 e0       	ldi	r24, 0x08	; 8
    3528:	96 e0       	ldi	r25, 0x06	; 6
    352a:	60 e0       	ldi	r22, 0x00	; 0
    352c:	40 e0       	ldi	r20, 0x00	; 0
    352e:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <enqueue_home>
				//? G28 X0 Y72.3
				//?
				//? will zero the X and Y axes, but not Z.  The actual coordinate values are ignored.
				//?

				queue_wait();
    3532:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <queue_wait>

				if (next_target.seen_X) {
    3536:	80 91 03 06 	lds	r24, 0x0603
    353a:	98 2f       	mov	r25, r24
    353c:	96 95       	lsr	r25
    353e:	96 95       	lsr	r25
    3540:	91 70       	andi	r25, 0x01	; 1
					#elif defined X_MAX_PIN
						home_x_positive();
					#endif
					axisSelected = 1;
				}
				if (next_target.seen_Y) {
    3542:	83 ff       	sbrs	r24, 3
    3544:	02 c0       	rjmp	.+4      	; 0x354a <process_gcode_command+0x278>
    3546:	91 e0       	ldi	r25, 0x01	; 1
    3548:	04 c0       	rjmp	.+8      	; 0x3552 <process_gcode_command+0x280>
    354a:	89 2f       	mov	r24, r25
    354c:	91 11       	cpse	r25, r1
    354e:	81 e0       	ldi	r24, 0x01	; 1
    3550:	98 2f       	mov	r25, r24
					#elif defined Y_MAX_PIN
						home_y_positive();
					#endif
					axisSelected = 1;
				}
				if (next_target.seen_Z) {
    3552:	80 91 03 06 	lds	r24, 0x0603
    3556:	84 fd       	sbrc	r24, 4
    3558:	b0 c0       	rjmp	.+352    	; 0x36ba <process_gcode_command+0x3e8>
					#endif
					axisSelected = 1;
				}
				// there's no point in moving E, as E has no endstops

				if (!axisSelected) {
    355a:	99 23       	and	r25, r25
    355c:	09 f0       	breq	.+2      	; 0x3560 <process_gcode_command+0x28e>
    355e:	1d c2       	rjmp	.+1082   	; 0x399a <process_gcode_command+0x6c8>
					home();
    3560:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <home>
    3564:	1a c2       	rjmp	.+1076   	; 0x399a <process_gcode_command+0x6c8>
				//? coordinate system while E doesn't change it's position in the
				//? coordinate system on relative movements.
				//?

				// No wait_queue() needed.
				next_target.option_all_relative = 0;
    3566:	80 91 04 06 	lds	r24, 0x0604
    356a:	8f 7b       	andi	r24, 0xBF	; 191
    356c:	03 c0       	rjmp	.+6      	; 0x3574 <process_gcode_command+0x2a2>
				//?
				//? All coordinates from now on are relative to the last position.
				//?

				// No wait_queue() needed.
				next_target.option_all_relative = 1;
    356e:	80 91 04 06 	lds	r24, 0x0604
    3572:	80 64       	ori	r24, 0x40	; 64
    3574:	80 93 04 06 	sts	0x0604, r24
    3578:	10 c2       	rjmp	.+1056   	; 0x399a <process_gcode_command+0x6c8>
				//? Example: G92 X10 E90
				//?
				//? Allows programming of absolute zero point, by reseting the current position to the values specified.  This would set the machine's X coordinate to 10, and the extrude coordinate to 90. No physical motion will occur.
				//?

				queue_wait();
    357a:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <queue_wait>

				if (next_target.seen_X) {
    357e:	80 91 03 06 	lds	r24, 0x0603
    3582:	82 fd       	sbrc	r24, 2
    3584:	02 c0       	rjmp	.+4      	; 0x358a <process_gcode_command+0x2b8>
    3586:	90 e0       	ldi	r25, 0x00	; 0
    3588:	11 c0       	rjmp	.+34     	; 0x35ac <process_gcode_command+0x2da>
          startpoint.axis[X] = next_target.target.axis[X];
    358a:	80 91 08 06 	lds	r24, 0x0608
    358e:	90 91 09 06 	lds	r25, 0x0609
    3592:	a0 91 0a 06 	lds	r26, 0x060A
    3596:	b0 91 0b 06 	lds	r27, 0x060B
    359a:	80 93 28 02 	sts	0x0228, r24
    359e:	90 93 29 02 	sts	0x0229, r25
    35a2:	a0 93 2a 02 	sts	0x022A, r26
    35a6:	b0 93 2b 02 	sts	0x022B, r27
    35aa:	91 e0       	ldi	r25, 0x01	; 1
					axisSelected = 1;
				}
				if (next_target.seen_Y) {
    35ac:	80 91 03 06 	lds	r24, 0x0603
    35b0:	83 ff       	sbrs	r24, 3
    35b2:	11 c0       	rjmp	.+34     	; 0x35d6 <process_gcode_command+0x304>
          startpoint.axis[Y] = next_target.target.axis[Y];
    35b4:	80 91 0c 06 	lds	r24, 0x060C
    35b8:	90 91 0d 06 	lds	r25, 0x060D
    35bc:	a0 91 0e 06 	lds	r26, 0x060E
    35c0:	b0 91 0f 06 	lds	r27, 0x060F
    35c4:	80 93 2c 02 	sts	0x022C, r24
    35c8:	90 93 2d 02 	sts	0x022D, r25
    35cc:	a0 93 2e 02 	sts	0x022E, r26
    35d0:	b0 93 2f 02 	sts	0x022F, r27
    35d4:	91 e0       	ldi	r25, 0x01	; 1
					axisSelected = 1;
				}
				if (next_target.seen_Z) {
    35d6:	80 91 03 06 	lds	r24, 0x0603
    35da:	84 ff       	sbrs	r24, 4
    35dc:	11 c0       	rjmp	.+34     	; 0x3600 <process_gcode_command+0x32e>
          startpoint.axis[Z] = next_target.target.axis[Z];
    35de:	80 91 10 06 	lds	r24, 0x0610
    35e2:	90 91 11 06 	lds	r25, 0x0611
    35e6:	a0 91 12 06 	lds	r26, 0x0612
    35ea:	b0 91 13 06 	lds	r27, 0x0613
    35ee:	80 93 30 02 	sts	0x0230, r24
    35f2:	90 93 31 02 	sts	0x0231, r25
    35f6:	a0 93 32 02 	sts	0x0232, r26
    35fa:	b0 93 33 02 	sts	0x0233, r27
    35fe:	91 e0       	ldi	r25, 0x01	; 1
					axisSelected = 1;
				}
				if (next_target.seen_E) {
    3600:	80 91 03 06 	lds	r24, 0x0603
    3604:	85 ff       	sbrs	r24, 5
    3606:	11 c0       	rjmp	.+34     	; 0x362a <process_gcode_command+0x358>
          startpoint.axis[E] = next_target.target.axis[E];
    3608:	80 91 14 06 	lds	r24, 0x0614
    360c:	90 91 15 06 	lds	r25, 0x0615
    3610:	a0 91 16 06 	lds	r26, 0x0616
    3614:	b0 91 17 06 	lds	r27, 0x0617
    3618:	80 93 34 02 	sts	0x0234, r24
    361c:	90 93 35 02 	sts	0x0235, r25
    3620:	a0 93 36 02 	sts	0x0236, r26
    3624:	b0 93 37 02 	sts	0x0237, r27
    3628:	43 c0       	rjmp	.+134    	; 0x36b0 <process_gcode_command+0x3de>
					axisSelected = 1;
				}

				if (axisSelected == 0) {
    362a:	99 23       	and	r25, r25
    362c:	09 f0       	breq	.+2      	; 0x3630 <process_gcode_command+0x35e>
    362e:	40 c0       	rjmp	.+128    	; 0x36b0 <process_gcode_command+0x3de>
          startpoint.axis[X] = next_target.target.axis[X] =
    3630:	10 92 14 06 	sts	0x0614, r1
    3634:	10 92 15 06 	sts	0x0615, r1
    3638:	10 92 16 06 	sts	0x0616, r1
    363c:	10 92 17 06 	sts	0x0617, r1
    3640:	10 92 34 02 	sts	0x0234, r1
    3644:	10 92 35 02 	sts	0x0235, r1
    3648:	10 92 36 02 	sts	0x0236, r1
    364c:	10 92 37 02 	sts	0x0237, r1
    3650:	10 92 10 06 	sts	0x0610, r1
    3654:	10 92 11 06 	sts	0x0611, r1
    3658:	10 92 12 06 	sts	0x0612, r1
    365c:	10 92 13 06 	sts	0x0613, r1
    3660:	10 92 30 02 	sts	0x0230, r1
    3664:	10 92 31 02 	sts	0x0231, r1
    3668:	10 92 32 02 	sts	0x0232, r1
    366c:	10 92 33 02 	sts	0x0233, r1
    3670:	10 92 0c 06 	sts	0x060C, r1
    3674:	10 92 0d 06 	sts	0x060D, r1
    3678:	10 92 0e 06 	sts	0x060E, r1
    367c:	10 92 0f 06 	sts	0x060F, r1
    3680:	10 92 2c 02 	sts	0x022C, r1
    3684:	10 92 2d 02 	sts	0x022D, r1
    3688:	10 92 2e 02 	sts	0x022E, r1
    368c:	10 92 2f 02 	sts	0x022F, r1
    3690:	10 92 08 06 	sts	0x0608, r1
    3694:	10 92 09 06 	sts	0x0609, r1
    3698:	10 92 0a 06 	sts	0x060A, r1
    369c:	10 92 0b 06 	sts	0x060B, r1
    36a0:	10 92 28 02 	sts	0x0228, r1
    36a4:	10 92 29 02 	sts	0x0229, r1
    36a8:	10 92 2a 02 	sts	0x022A, r1
    36ac:	10 92 2b 02 	sts	0x022B, r1
          startpoint.axis[Y] = next_target.target.axis[Y] =
          startpoint.axis[Z] = next_target.target.axis[Z] =
          startpoint.axis[E] = next_target.target.axis[E] = 0;
				}

				dda_new_startpoint();
    36b0:	0e 94 3a 09 	call	0x1274	; 0x1274 <dda_new_startpoint>
    36b4:	72 c1       	rjmp	.+740    	; 0x399a <process_gcode_command+0x6c8>
        #if defined Y_MIN_PIN
          if (next_target.seen_Y)
            home_y_negative();
        #endif
        #if defined Z_MIN_PIN
          if (next_target.seen_Z)
    36b6:	84 ff       	sbrs	r24, 4
    36b8:	70 c1       	rjmp	.+736    	; 0x399a <process_gcode_command+0x6c8>
            home_z_negative();
    36ba:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <home_z_negative>
    36be:	6d c1       	rjmp	.+730    	; 0x399a <process_gcode_command+0x6c8>
        #endif
				break;

				// unknown gcode: spit an error
			default:
				sersendf_P(PSTR("E: Bad G-code %d"), next_target.G);
    36c0:	00 d0       	rcall	.+0      	; 0x36c2 <process_gcode_command+0x3f0>
    36c2:	0f 92       	push	r0
    36c4:	ed b7       	in	r30, 0x3d	; 61
    36c6:	fe b7       	in	r31, 0x3e	; 62
    36c8:	31 96       	adiw	r30, 0x01	; 1
    36ca:	84 e9       	ldi	r24, 0x94	; 148
    36cc:	93 e0       	ldi	r25, 0x03	; 3
    36ce:	57 c1       	rjmp	.+686    	; 0x397e <process_gcode_command+0x6ac>
				// newline is sent from gcode_parse after we return
				return;
		}
	}
	else if (next_target.seen_M) {
    36d0:	81 ff       	sbrs	r24, 1
    36d2:	63 c1       	rjmp	.+710    	; 0x399a <process_gcode_command+0x6c8>
		uint8_t i;

		switch (next_target.M) {
    36d4:	20 91 07 06 	lds	r18, 0x0607
    36d8:	27 36       	cpi	r18, 0x67	; 103
    36da:	09 f4       	brne	.+2      	; 0x36de <process_gcode_command+0x40c>
    36dc:	5e c1       	rjmp	.+700    	; 0x399a <process_gcode_command+0x6c8>
    36de:	28 36       	cpi	r18, 0x68	; 104
    36e0:	30 f5       	brcc	.+76     	; 0x372e <process_gcode_command+0x45c>
    36e2:	26 30       	cpi	r18, 0x06	; 6
    36e4:	09 f4       	brne	.+2      	; 0x36e8 <process_gcode_command+0x416>
    36e6:	58 c0       	rjmp	.+176    	; 0x3798 <process_gcode_command+0x4c6>
    36e8:	27 30       	cpi	r18, 0x07	; 7
    36ea:	78 f4       	brcc	.+30     	; 0x370a <process_gcode_command+0x438>
    36ec:	22 30       	cpi	r18, 0x02	; 2
    36ee:	09 f4       	brne	.+2      	; 0x36f2 <process_gcode_command+0x420>
    36f0:	42 c0       	rjmp	.+132    	; 0x3776 <process_gcode_command+0x4a4>
    36f2:	23 30       	cpi	r18, 0x03	; 3
    36f4:	18 f4       	brcc	.+6      	; 0x36fc <process_gcode_command+0x42a>
    36f6:	22 23       	and	r18, r18
    36f8:	f1 f1       	breq	.+124    	; 0x3776 <process_gcode_command+0x4a4>
    36fa:	3a c1       	rjmp	.+628    	; 0x3970 <process_gcode_command+0x69e>
    36fc:	23 30       	cpi	r18, 0x03	; 3
    36fe:	09 f4       	brne	.+2      	; 0x3702 <process_gcode_command+0x430>
    3700:	58 c0       	rjmp	.+176    	; 0x37b2 <process_gcode_command+0x4e0>
    3702:	25 30       	cpi	r18, 0x05	; 5
    3704:	09 f0       	breq	.+2      	; 0x3708 <process_gcode_command+0x436>
    3706:	34 c1       	rjmp	.+616    	; 0x3970 <process_gcode_command+0x69e>
    3708:	48 c1       	rjmp	.+656    	; 0x399a <process_gcode_command+0x6c8>
    370a:	23 35       	cpi	r18, 0x53	; 83
    370c:	09 f4       	brne	.+2      	; 0x3710 <process_gcode_command+0x43e>
    370e:	4d c0       	rjmp	.+154    	; 0x37aa <process_gcode_command+0x4d8>
    3710:	24 35       	cpi	r18, 0x54	; 84
    3712:	38 f4       	brcc	.+14     	; 0x3722 <process_gcode_command+0x450>
    3714:	27 30       	cpi	r18, 0x07	; 7
    3716:	09 f4       	brne	.+2      	; 0x371a <process_gcode_command+0x448>
    3718:	6c c0       	rjmp	.+216    	; 0x37f2 <process_gcode_command+0x520>
    371a:	22 35       	cpi	r18, 0x52	; 82
    371c:	09 f0       	breq	.+2      	; 0x3720 <process_gcode_command+0x44e>
    371e:	28 c1       	rjmp	.+592    	; 0x3970 <process_gcode_command+0x69e>
    3720:	40 c0       	rjmp	.+128    	; 0x37a2 <process_gcode_command+0x4d0>
    3722:	24 35       	cpi	r18, 0x54	; 84
    3724:	41 f1       	breq	.+80     	; 0x3776 <process_gcode_command+0x4a4>
    3726:	25 36       	cpi	r18, 0x65	; 101
    3728:	09 f0       	breq	.+2      	; 0x372c <process_gcode_command+0x45a>
    372a:	22 c1       	rjmp	.+580    	; 0x3970 <process_gcode_command+0x69e>
    372c:	42 c0       	rjmp	.+132    	; 0x37b2 <process_gcode_command+0x4e0>
    372e:	20 37       	cpi	r18, 0x70	; 112
    3730:	59 f1       	breq	.+86     	; 0x3788 <process_gcode_command+0x4b6>
    3732:	21 37       	cpi	r18, 0x71	; 113
    3734:	68 f4       	brcc	.+26     	; 0x3750 <process_gcode_command+0x47e>
    3736:	29 36       	cpi	r18, 0x69	; 105
    3738:	09 f4       	brne	.+2      	; 0x373c <process_gcode_command+0x46a>
    373a:	4c c0       	rjmp	.+152    	; 0x37d4 <process_gcode_command+0x502>
    373c:	29 36       	cpi	r18, 0x69	; 105
    373e:	08 f4       	brcc	.+2      	; 0x3742 <process_gcode_command+0x470>
    3740:	3e c0       	rjmp	.+124    	; 0x37be <process_gcode_command+0x4ec>
    3742:	2a 36       	cpi	r18, 0x6A	; 106
    3744:	09 f4       	brne	.+2      	; 0x3748 <process_gcode_command+0x476>
    3746:	55 c0       	rjmp	.+170    	; 0x37f2 <process_gcode_command+0x520>
    3748:	2e 36       	cpi	r18, 0x6E	; 110
    374a:	09 f0       	breq	.+2      	; 0x374e <process_gcode_command+0x47c>
    374c:	11 c1       	rjmp	.+546    	; 0x3970 <process_gcode_command+0x69e>
    374e:	25 c1       	rjmp	.+586    	; 0x399a <process_gcode_command+0x6c8>
    3750:	24 37       	cpi	r18, 0x74	; 116
    3752:	09 f4       	brne	.+2      	; 0x3756 <process_gcode_command+0x484>
    3754:	d4 c0       	rjmp	.+424    	; 0x38fe <process_gcode_command+0x62c>
    3756:	25 37       	cpi	r18, 0x75	; 117
    3758:	38 f4       	brcc	.+14     	; 0x3768 <process_gcode_command+0x496>
    375a:	22 37       	cpi	r18, 0x72	; 114
    375c:	09 f4       	brne	.+2      	; 0x3760 <process_gcode_command+0x48e>
    375e:	54 c0       	rjmp	.+168    	; 0x3808 <process_gcode_command+0x536>
    3760:	23 37       	cpi	r18, 0x73	; 115
    3762:	09 f0       	breq	.+2      	; 0x3766 <process_gcode_command+0x494>
    3764:	05 c1       	rjmp	.+522    	; 0x3970 <process_gcode_command+0x69e>
    3766:	a5 c0       	rjmp	.+330    	; 0x38b2 <process_gcode_command+0x5e0>
    3768:	27 37       	cpi	r18, 0x77	; 119
    376a:	09 f4       	brne	.+2      	; 0x376e <process_gcode_command+0x49c>
    376c:	cf c0       	rjmp	.+414    	; 0x390c <process_gcode_command+0x63a>
    376e:	2c 38       	cpi	r18, 0x8C	; 140
    3770:	09 f0       	breq	.+2      	; 0x3774 <process_gcode_command+0x4a2>
    3772:	fe c0       	rjmp	.+508    	; 0x3970 <process_gcode_command+0x69e>
    3774:	12 c1       	rjmp	.+548    	; 0x399a <process_gcode_command+0x6c8>
				//?
				//? Example: M2
				//?
				//? http://linuxcnc.org/handbook/RS274NGC_3/RS274NGC_33a.html#1002379
				//?
				queue_wait();
    3776:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <queue_wait>
				for (i = 0; i < NUM_HEATERS; i++)
					temp_set(i, 0);
				power_off();
    377a:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <power_off>
        serial_writestr_P(PSTR("\nstop\n"));
    377e:	8d e8       	ldi	r24, 0x8D	; 141
    3780:	93 e0       	ldi	r25, 0x03	; 3
    3782:	0e 94 c7 1e 	call	0x3d8e	; 0x3d8e <serial_writestr_P>
    3786:	09 c1       	rjmp	.+530    	; 0x399a <process_gcode_command+0x6c8>
				//?
				//? Any moves in progress are immediately terminated, then RepRap shuts down.  All motors and heaters are turned off.
				//? It can be started again by pressing the reset button on the master microcontroller.  See also M0.
				//?

				timer_stop();
    3788:	0e 94 c9 20 	call	0x4192	; 0x4192 <timer_stop>
				queue_flush();
    378c:	0e 94 bd 14 	call	0x297a	; 0x297a <queue_flush>
				power_off();
    3790:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <power_off>
				cli();
    3794:	f8 94       	cli
    3796:	ff cf       	rjmp	.-2      	; 0x3796 <process_gcode_command+0x4c4>

			case 6:
				//? --- M6: tool change ---
				//?
				//? Undocumented.
				tool = next_tool;
    3798:	80 91 81 06 	lds	r24, 0x0681
    379c:	80 93 82 06 	sts	0x0682, r24
    37a0:	fc c0       	rjmp	.+504    	; 0x399a <process_gcode_command+0x6c8>
				//? While E does relative movements, it doesn't change its
				//? position in the coordinate system. See also comment on G90.
				//?

				// No wait_queue() needed.
				next_target.option_e_relative = 0;
    37a2:	80 91 04 06 	lds	r24, 0x0604
    37a6:	8f 77       	andi	r24, 0x7F	; 127
    37a8:	e5 ce       	rjmp	.-566    	; 0x3574 <process_gcode_command+0x2a2>
				//?
				//? Counterpart to M82.
				//?

				// No wait_queue() needed.
				next_target.option_e_relative = 1;
    37aa:	80 91 04 06 	lds	r24, 0x0604
    37ae:	80 68       	ori	r24, 0x80	; 128
    37b0:	e1 ce       	rjmp	.-574    	; 0x3574 <process_gcode_command+0x2a2>
			case 3:
			case 101:
				//? --- M101: extruder on ---
				//?
				//? Undocumented.
				if (temp_achieved() == 0) {
    37b2:	0e 94 79 20 	call	0x40f2	; 0x40f2 <temp_achieved>
    37b6:	88 23       	and	r24, r24
    37b8:	09 f0       	breq	.+2      	; 0x37bc <process_gcode_command+0x4ea>
    37ba:	ef c0       	rjmp	.+478    	; 0x399a <process_gcode_command+0x6c8>
    37bc:	a0 c0       	rjmp	.+320    	; 0x38fe <process_gcode_command+0x62c>
        //? Teacup supports an optional P parameter as a zero-based temperature
        //? sensor index to address (e.g. M104 P1 S100 will set the temperature
        //? of the heater connected to the second temperature sensor rather
        //? than the extruder temperature).
        //?
				if ( ! next_target.seen_S)
    37be:	87 ff       	sbrs	r24, 7
    37c0:	ec c0       	rjmp	.+472    	; 0x399a <process_gcode_command+0x6c8>
        #ifdef HEATER_EXTRUDER
          if ( ! next_target.seen_P)
            next_target.P = HEATER_EXTRUDER;
        // else use the first available device
        #endif
				temp_set(next_target.P, next_target.S);
    37c2:	60 91 1d 06 	lds	r22, 0x061D
    37c6:	70 91 1e 06 	lds	r23, 0x061E
    37ca:	80 91 21 06 	lds	r24, 0x0621
    37ce:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <temp_set>
    37d2:	e3 c0       	rjmp	.+454    	; 0x399a <process_gcode_command+0x6c8>
        //? sensor index to address.
				//?
				#ifdef ENFORCE_ORDER
					queue_wait();
				#endif
				if ( ! next_target.seen_P)
    37d4:	80 91 04 06 	lds	r24, 0x0604
    37d8:	80 fd       	sbrc	r24, 0
    37da:	06 c0       	rjmp	.+12     	; 0x37e8 <process_gcode_command+0x516>
					next_target.P = TEMP_SENSOR_none;
    37dc:	81 e0       	ldi	r24, 0x01	; 1
    37de:	90 e0       	ldi	r25, 0x00	; 0
    37e0:	90 93 22 06 	sts	0x0622, r25
    37e4:	80 93 21 06 	sts	0x0621, r24
				temp_print(next_target.P);
    37e8:	80 91 21 06 	lds	r24, 0x0621
    37ec:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <temp_print>
    37f0:	d4 c0       	rjmp	.+424    	; 0x399a <process_gcode_command+0x6c8>
        #ifdef HEATER_FAN
          if ( ! next_target.seen_P)
            next_target.P = HEATER_FAN;
        // else use the first available device
        #endif
				if ( ! next_target.seen_S)
    37f2:	80 91 03 06 	lds	r24, 0x0603
    37f6:	87 ff       	sbrs	r24, 7
    37f8:	d0 c0       	rjmp	.+416    	; 0x399a <process_gcode_command+0x6c8>
					break;
        heater_set(next_target.P, next_target.S);
    37fa:	80 91 21 06 	lds	r24, 0x0621
    37fe:	60 91 1d 06 	lds	r22, 0x061D
    3802:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <heater_set>
    3806:	c9 c0       	rjmp	.+402    	; 0x399a <process_gcode_command+0x6c8>
				//?
				#ifdef ENFORCE_ORDER
					// wait for all moves to complete
					queue_wait();
				#endif
				update_current_position();
    3808:	0e 94 c8 04 	call	0x990	; 0x990 <update_current_position>
				sersendf_P(PSTR("X:%lq,Y:%lq,Z:%lq,E:%lq,F:%lu"),
    380c:	ed b7       	in	r30, 0x3d	; 61
    380e:	fe b7       	in	r31, 0x3e	; 62
    3810:	76 97       	sbiw	r30, 0x16	; 22
    3812:	0f b6       	in	r0, 0x3f	; 63
    3814:	f8 94       	cli
    3816:	fe bf       	out	0x3e, r31	; 62
    3818:	0f be       	out	0x3f, r0	; 63
    381a:	ed bf       	out	0x3d, r30	; 61
    381c:	31 96       	adiw	r30, 0x01	; 1
    381e:	8f e6       	ldi	r24, 0x6F	; 111
    3820:	93 e0       	ldi	r25, 0x03	; 3
    3822:	ad b7       	in	r26, 0x3d	; 61
    3824:	be b7       	in	r27, 0x3e	; 62
    3826:	12 96       	adiw	r26, 0x02	; 2
    3828:	9c 93       	st	X, r25
    382a:	8e 93       	st	-X, r24
    382c:	11 97       	sbiw	r26, 0x01	; 1
    382e:	80 91 52 02 	lds	r24, 0x0252
    3832:	90 91 53 02 	lds	r25, 0x0253
    3836:	a0 91 54 02 	lds	r26, 0x0254
    383a:	b0 91 55 02 	lds	r27, 0x0255
    383e:	82 83       	std	Z+2, r24	; 0x02
    3840:	93 83       	std	Z+3, r25	; 0x03
    3842:	a4 83       	std	Z+4, r26	; 0x04
    3844:	b5 83       	std	Z+5, r27	; 0x05
    3846:	80 91 56 02 	lds	r24, 0x0256
    384a:	90 91 57 02 	lds	r25, 0x0257
    384e:	a0 91 58 02 	lds	r26, 0x0258
    3852:	b0 91 59 02 	lds	r27, 0x0259
    3856:	86 83       	std	Z+6, r24	; 0x06
    3858:	97 83       	std	Z+7, r25	; 0x07
    385a:	a0 87       	std	Z+8, r26	; 0x08
    385c:	b1 87       	std	Z+9, r27	; 0x09
    385e:	80 91 5a 02 	lds	r24, 0x025A
    3862:	90 91 5b 02 	lds	r25, 0x025B
    3866:	a0 91 5c 02 	lds	r26, 0x025C
    386a:	b0 91 5d 02 	lds	r27, 0x025D
    386e:	82 87       	std	Z+10, r24	; 0x0a
    3870:	93 87       	std	Z+11, r25	; 0x0b
    3872:	a4 87       	std	Z+12, r26	; 0x0c
    3874:	b5 87       	std	Z+13, r27	; 0x0d
    3876:	80 91 5e 02 	lds	r24, 0x025E
    387a:	90 91 5f 02 	lds	r25, 0x025F
    387e:	a0 91 60 02 	lds	r26, 0x0260
    3882:	b0 91 61 02 	lds	r27, 0x0261
    3886:	86 87       	std	Z+14, r24	; 0x0e
    3888:	97 87       	std	Z+15, r25	; 0x0f
    388a:	a0 8b       	std	Z+16, r26	; 0x10
    388c:	b1 8b       	std	Z+17, r27	; 0x11
    388e:	80 91 62 02 	lds	r24, 0x0262
    3892:	90 91 63 02 	lds	r25, 0x0263
    3896:	a0 91 64 02 	lds	r26, 0x0264
    389a:	b0 91 65 02 	lds	r27, 0x0265
    389e:	82 8b       	std	Z+18, r24	; 0x12
    38a0:	93 8b       	std	Z+19, r25	; 0x13
    38a2:	a4 8b       	std	Z+20, r26	; 0x14
    38a4:	b5 8b       	std	Z+21, r27	; 0x15
    38a6:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <sersendf_P>
    38aa:	ed b7       	in	r30, 0x3d	; 61
    38ac:	fe b7       	in	r31, 0x3e	; 62
    38ae:	76 96       	adiw	r30, 0x16	; 22
    38b0:	20 c0       	rjmp	.+64     	; 0x38f2 <process_gcode_command+0x620>
				//?
				//? sample data from firmware:
				//?  FIRMWARE_NAME:Teacup FIRMWARE_URL:http://github.com/traumflug/Teacup_Firmware/ PROTOCOL_VERSION:1.0 MACHINE_TYPE:Mendel EXTRUDER_COUNT:1 TEMP_SENSOR_COUNT:1 HEATER_COUNT:1
				//?

				sersendf_P(PSTR("FIRMWARE_NAME:Teacup FIRMWARE_URL:http://github.com/traumflug/Teacup_Firmware/ PROTOCOL_VERSION:1.0 MACHINE_TYPE:Mendel EXTRUDER_COUNT:%d TEMP_SENSOR_COUNT:%d HEATER_COUNT:%d"), 1, NUM_TEMP_SENSORS, NUM_HEATERS);
    38b2:	8d b7       	in	r24, 0x3d	; 61
    38b4:	9e b7       	in	r25, 0x3e	; 62
    38b6:	08 97       	sbiw	r24, 0x08	; 8
    38b8:	0f b6       	in	r0, 0x3f	; 63
    38ba:	f8 94       	cli
    38bc:	9e bf       	out	0x3e, r25	; 62
    38be:	0f be       	out	0x3f, r0	; 63
    38c0:	8d bf       	out	0x3d, r24	; 61
    38c2:	ed b7       	in	r30, 0x3d	; 61
    38c4:	fe b7       	in	r31, 0x3e	; 62
    38c6:	31 96       	adiw	r30, 0x01	; 1
    38c8:	80 ec       	ldi	r24, 0xC0	; 192
    38ca:	92 e0       	ldi	r25, 0x02	; 2
    38cc:	ad b7       	in	r26, 0x3d	; 61
    38ce:	be b7       	in	r27, 0x3e	; 62
    38d0:	12 96       	adiw	r26, 0x02	; 2
    38d2:	9c 93       	st	X, r25
    38d4:	8e 93       	st	-X, r24
    38d6:	11 97       	sbiw	r26, 0x01	; 1
    38d8:	81 e0       	ldi	r24, 0x01	; 1
    38da:	90 e0       	ldi	r25, 0x00	; 0
    38dc:	93 83       	std	Z+3, r25	; 0x03
    38de:	82 83       	std	Z+2, r24	; 0x02
    38e0:	15 82       	std	Z+5, r1	; 0x05
    38e2:	14 82       	std	Z+4, r1	; 0x04
    38e4:	17 82       	std	Z+7, r1	; 0x07
    38e6:	16 82       	std	Z+6, r1	; 0x06
    38e8:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <sersendf_P>
    38ec:	ed b7       	in	r30, 0x3d	; 61
    38ee:	fe b7       	in	r31, 0x3e	; 62
    38f0:	38 96       	adiw	r30, 0x08	; 8
    38f2:	0f b6       	in	r0, 0x3f	; 63
    38f4:	f8 94       	cli
    38f6:	fe bf       	out	0x3e, r31	; 62
    38f8:	0f be       	out	0x3f, r0	; 63
    38fa:	ed bf       	out	0x3d, r30	; 61
    38fc:	4e c0       	rjmp	.+156    	; 0x399a <process_gcode_command+0x6c8>
    38fe:	80 e0       	ldi	r24, 0x00	; 0
    3900:	90 e0       	ldi	r25, 0x00	; 0
    3902:	60 e0       	ldi	r22, 0x00	; 0
    3904:	40 e0       	ldi	r20, 0x00	; 0
    3906:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <enqueue_home>
    390a:	47 c0       	rjmp	.+142    	; 0x399a <process_gcode_command+0x6c8>

      case 119:
        //? --- M119: report endstop status ---
        //? Report the current status of the endstops configured in the
        //? firmware to the host.
        power_on();
    390c:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <power_on>
    3910:	75 9a       	sbi	0x0e, 5	; 14
        endstops_on();
        delay_ms(10); // allow the signal to stabilize
    3912:	6a e0       	ldi	r22, 0x0A	; 10
    3914:	70 e0       	ldi	r23, 0x00	; 0
    3916:	80 e0       	ldi	r24, 0x00	; 0
    3918:	90 e0       	ldi	r25, 0x00	; 0
    391a:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <delay_ms>
          #if defined(Y_MAX_PIN)
            sersendf_P(PSTR("y_max:"));
            y_max() ? sersendf_P(triggered) : sersendf_P(open);
          #endif
          #if defined(Z_MIN_PIN)
            sersendf_P(PSTR("z_min:"));
    391e:	0f 92       	push	r0
    3920:	0f 92       	push	r0
    3922:	88 ea       	ldi	r24, 0xA8	; 168
    3924:	92 e0       	ldi	r25, 0x02	; 2
    3926:	ad b7       	in	r26, 0x3d	; 61
    3928:	be b7       	in	r27, 0x3e	; 62
    392a:	12 96       	adiw	r26, 0x02	; 2
    392c:	9c 93       	st	X, r25
    392e:	8e 93       	st	-X, r24
    3930:	11 97       	sbiw	r26, 0x01	; 1
    3932:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <sersendf_P>
            z_min() ? sersendf_P(triggered) : sersendf_P(open);
    3936:	0f 90       	pop	r0
    3938:	0f 90       	pop	r0
    393a:	65 99       	sbic	0x0c, 5	; 12
    393c:	09 c0       	rjmp	.+18     	; 0x3950 <process_gcode_command+0x67e>
    393e:	0f 92       	push	r0
    3940:	0f 92       	push	r0
        power_on();
        endstops_on();
        delay_ms(10); // allow the signal to stabilize
        {
          const char* const open = PSTR("open ");
          const char* const triggered = PSTR("triggered ");
    3942:	8f ea       	ldi	r24, 0xAF	; 175
    3944:	92 e0       	ldi	r25, 0x02	; 2
    3946:	ed b7       	in	r30, 0x3d	; 61
    3948:	fe b7       	in	r31, 0x3e	; 62
    394a:	92 83       	std	Z+2, r25	; 0x02
    394c:	81 83       	std	Z+1, r24	; 0x01
    394e:	0a c0       	rjmp	.+20     	; 0x3964 <process_gcode_command+0x692>
            sersendf_P(PSTR("y_max:"));
            y_max() ? sersendf_P(triggered) : sersendf_P(open);
          #endif
          #if defined(Z_MIN_PIN)
            sersendf_P(PSTR("z_min:"));
            z_min() ? sersendf_P(triggered) : sersendf_P(open);
    3950:	0f 92       	push	r0
    3952:	0f 92       	push	r0
        //? firmware to the host.
        power_on();
        endstops_on();
        delay_ms(10); // allow the signal to stabilize
        {
          const char* const open = PSTR("open ");
    3954:	8a eb       	ldi	r24, 0xBA	; 186
    3956:	92 e0       	ldi	r25, 0x02	; 2
    3958:	ad b7       	in	r26, 0x3d	; 61
    395a:	be b7       	in	r27, 0x3e	; 62
    395c:	12 96       	adiw	r26, 0x02	; 2
    395e:	9c 93       	st	X, r25
    3960:	8e 93       	st	-X, r24
    3962:	11 97       	sbiw	r26, 0x01	; 1
    3964:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <sersendf_P>
    3968:	0f 90       	pop	r0
    396a:	0f 90       	pop	r0
		#endif
		#ifdef Y_MAX_PIN
			WRITE(Y_MAX_PIN, 0);
		#endif
		#ifdef Z_MIN_PIN
			WRITE(Z_MIN_PIN, 0);
    396c:	75 98       	cbi	0x0e, 5	; 14
    396e:	15 c0       	rjmp	.+42     	; 0x399a <process_gcode_command+0x6c8>

			#endif /* DEBUG */

				// unknown mcode: spit an error
			default:
				sersendf_P(PSTR("E: Bad M-code %d"), next_target.M);
    3970:	00 d0       	rcall	.+0      	; 0x3972 <process_gcode_command+0x6a0>
    3972:	0f 92       	push	r0
    3974:	ed b7       	in	r30, 0x3d	; 61
    3976:	fe b7       	in	r31, 0x3e	; 62
    3978:	31 96       	adiw	r30, 0x01	; 1
    397a:	87 e9       	ldi	r24, 0x97	; 151
    397c:	92 e0       	ldi	r25, 0x02	; 2
    397e:	ad b7       	in	r26, 0x3d	; 61
    3980:	be b7       	in	r27, 0x3e	; 62
    3982:	12 96       	adiw	r26, 0x02	; 2
    3984:	9c 93       	st	X, r25
    3986:	8e 93       	st	-X, r24
    3988:	11 97       	sbiw	r26, 0x01	; 1
    398a:	22 83       	std	Z+2, r18	; 0x02
    398c:	13 82       	std	Z+3, r1	; 0x03
    398e:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <sersendf_P>
    3992:	0f 90       	pop	r0
    3994:	0f 90       	pop	r0
    3996:	0f 90       	pop	r0
    3998:	0f 90       	pop	r0
				// newline is sent from gcode_parse after we return
		} // switch (next_target.M)
	} // else if (next_target.seen_M)
} // process_gcode_command()
    399a:	1f 91       	pop	r17
    399c:	0f 91       	pop	r16
    399e:	ff 90       	pop	r15
    39a0:	ef 90       	pop	r14
    39a2:	08 95       	ret

000039a4 <heater_init>:
void heater_init() {
	heater_t i;

	// setup PWM timers: fast PWM
	// Warning 2012-01-11: these are not consistent across all AVRs
	TCCR0A = MASK(WGM01) | MASK(WGM00);
    39a4:	23 e0       	ldi	r18, 0x03	; 3
    39a6:	24 bd       	out	0x24, r18	; 36
	// PWM frequencies in TCCR0B, see page 108 of the ATmega644 reference.
	TCCR0B = MASK(CS00); // F_CPU / 256 (about 78(62.5) kHz on a 20(16) MHz chip)
    39a8:	91 e0       	ldi	r25, 0x01	; 1
    39aa:	95 bd       	out	0x25, r25	; 37
	#ifndef FAST_PWM
		TCCR0B = MASK(CS00) | MASK(CS02); // F_CPU / 256 / 1024  (about 76(61) Hz)
    39ac:	85 e0       	ldi	r24, 0x05	; 5
    39ae:	85 bd       	out	0x25, r24	; 37
	#endif
	TIMSK0 = 0;
    39b0:	10 92 6e 00 	sts	0x006E, r1
	OCR0A = 0;
    39b4:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0;
    39b6:	18 bc       	out	0x28, r1	; 40

	// timer 1 is used for stepping

	TCCR2A = MASK(WGM21) | MASK(WGM20);
    39b8:	20 93 b0 00 	sts	0x00B0, r18
	// PWM frequencies in TCCR2B, see page 156 of the ATmega644 reference.
	TCCR2B = MASK(CS20); // F_CPU / 256  (about 78(62.5) kHz on a 20(16) MHz chip)
    39bc:	e1 eb       	ldi	r30, 0xB1	; 177
    39be:	f0 e0       	ldi	r31, 0x00	; 0
    39c0:	90 83       	st	Z, r25
	#ifndef FAST_PWM
		TCCR2B = MASK(CS20) | MASK(CS21) | MASK(CS22); // F_CPU / 256 / 1024
    39c2:	87 e0       	ldi	r24, 0x07	; 7
    39c4:	80 83       	st	Z, r24
	#endif
	TIMSK2 = 0;
    39c6:	10 92 70 00 	sts	0x0070, r1
	OCR2A = 0;
    39ca:	10 92 b3 00 	sts	0x00B3, r1
	OCR2B = 0;
    39ce:	10 92 b4 00 	sts	0x00B4, r1

	#ifdef	TCCR3A
		TCCR3A = MASK(WGM30);
    39d2:	90 93 90 00 	sts	0x0090, r25
		TCCR3B = MASK(WGM32) | MASK(CS30);
    39d6:	89 e0       	ldi	r24, 0x09	; 9
    39d8:	80 93 91 00 	sts	0x0091, r24
		TIMSK3 = 0;
    39dc:	10 92 71 00 	sts	0x0071, r1
		OCR3A = 0;
    39e0:	10 92 99 00 	sts	0x0099, r1
    39e4:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    39e8:	10 92 9b 00 	sts	0x009B, r1
    39ec:	10 92 9a 00 	sts	0x009A, r1
				//TCCR4B = MASK(CS40) | MASK(CS41) | MASK(CS43); // 16 MHz / 4096 / 256 
			#endif
			TC4H   = 0;           // clear high bits
			OCR4C  = 0xff;        // 8 bit max count at top before reset
		#else
			TCCR4A = MASK(WGM40);
    39f0:	90 93 a0 00 	sts	0x00A0, r25
			TCCR4B = MASK(WGM42) | MASK(CS40);
    39f4:	80 93 a1 00 	sts	0x00A1, r24
		#endif
		TIMSK4 = 0;
    39f8:	10 92 72 00 	sts	0x0072, r1
		OCR4A = 0;
    39fc:	10 92 a9 00 	sts	0x00A9, r1
    3a00:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    3a04:	10 92 ab 00 	sts	0x00AB, r1
    3a08:	10 92 aa 00 	sts	0x00AA, r1
			OCR4D = 0;
		#endif
	#endif

	#ifdef	TCCR5A
		TCCR5A = MASK(WGM50);
    3a0c:	90 93 20 01 	sts	0x0120, r25
		TCCR5B = MASK(WGM52) | MASK(CS50);
    3a10:	80 93 21 01 	sts	0x0121, r24
		TIMSK5 = 0;
    3a14:	10 92 73 00 	sts	0x0073, r1
		OCR5A = 0;
    3a18:	10 92 29 01 	sts	0x0129, r1
    3a1c:	10 92 28 01 	sts	0x0128, r1
		OCR5B = 0;
    3a20:	10 92 2b 01 	sts	0x012B, r1
    3a24:	10 92 2a 01 	sts	0x012A, r1
		#undef	DEFINE_HEATER
		#define	DEFINE_HEATER(name, pin, pwm) WRITE(pin, 0); SET_OUTPUT(pin);
			#include "config_wrapper.h"
		#undef DEFINE_HEATER
	} while (0);
}
    3a28:	08 95       	ret

00003a2a <heater_set>:
			*(heaters[index].heater_port) &= ~MASK(heaters[index].heater_pin);
	}

  if (value)
    power_on();
}
    3a2a:	08 95       	ret

00003a2c <heaters_all_zero>:
  for (i = 0; i < NUM_HEATERS; i++) {
    if (heaters_runtime[i].heater_output)
      return 0;
  }
  return 255;
}
    3a2c:	8f ef       	ldi	r24, 0xFF	; 255
    3a2e:	08 95       	ret

00003a30 <home_z_negative>:
		dda_new_startpoint();
	#endif
}

/// find Z MIN endstop
void home_z_negative() {
    3a30:	a5 e1       	ldi	r26, 0x15	; 21
    3a32:	b0 e0       	ldi	r27, 0x00	; 0
    3a34:	ee e1       	ldi	r30, 0x1E	; 30
    3a36:	fd e1       	ldi	r31, 0x1D	; 29
    3a38:	0c 94 75 23 	jmp	0x46ea	; 0x46ea <__prologue_saves__+0x1c>
	#if defined Z_MIN_PIN
		TARGET t = startpoint;
    3a3c:	de 01       	movw	r26, r28
    3a3e:	11 96       	adiw	r26, 0x01	; 1
    3a40:	e8 e2       	ldi	r30, 0x28	; 40
    3a42:	f2 e0       	ldi	r31, 0x02	; 2
    3a44:	85 e1       	ldi	r24, 0x15	; 21
    3a46:	01 90       	ld	r0, Z+
    3a48:	0d 92       	st	X+, r0
    3a4a:	81 50       	subi	r24, 0x01	; 1
    3a4c:	e1 f7       	brne	.-8      	; 0x3a46 <home_z_negative+0x16>

    t.axis[Z] = -1000000;
    3a4e:	80 ec       	ldi	r24, 0xC0	; 192
    3a50:	9d eb       	ldi	r25, 0xBD	; 189
    3a52:	a0 ef       	ldi	r26, 0xF0	; 240
    3a54:	bf ef       	ldi	r27, 0xFF	; 255
    3a56:	89 87       	std	Y+9, r24	; 0x09
    3a58:	9a 87       	std	Y+10, r25	; 0x0a
    3a5a:	ab 87       	std	Y+11, r26	; 0x0b
    3a5c:	bc 87       	std	Y+12, r27	; 0x0c
    if (SEARCH_FAST_Z > SEARCH_FEEDRATE_Z)
      t.F = SEARCH_FAST_Z;
    3a5e:	80 e5       	ldi	r24, 0x50	; 80
    3a60:	93 e0       	ldi	r25, 0x03	; 3
    3a62:	a0 e0       	ldi	r26, 0x00	; 0
    3a64:	b0 e0       	ldi	r27, 0x00	; 0
    3a66:	89 8b       	std	Y+17, r24	; 0x11
    3a68:	9a 8b       	std	Y+18, r25	; 0x12
    3a6a:	ab 8b       	std	Y+19, r26	; 0x13
    3a6c:	bc 8b       	std	Y+20, r27	; 0x14
    else
      t.F = SEARCH_FEEDRATE_Z;
		enqueue_home(&t, 0x4, 1);
    3a6e:	8e 01       	movw	r16, r28
    3a70:	0f 5f       	subi	r16, 0xFF	; 255
    3a72:	1f 4f       	sbci	r17, 0xFF	; 255
    3a74:	c8 01       	movw	r24, r16
    3a76:	64 e0       	ldi	r22, 0x04	; 4
    3a78:	41 e0       	ldi	r20, 0x01	; 1
    3a7a:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <enqueue_home>

    if (SEARCH_FAST_Z > SEARCH_FEEDRATE_Z) {
      t.axis[Z] = +1000000;
    3a7e:	80 e4       	ldi	r24, 0x40	; 64
    3a80:	92 e4       	ldi	r25, 0x42	; 66
    3a82:	af e0       	ldi	r26, 0x0F	; 15
    3a84:	b0 e0       	ldi	r27, 0x00	; 0
    3a86:	89 87       	std	Y+9, r24	; 0x09
    3a88:	9a 87       	std	Y+10, r25	; 0x0a
    3a8a:	ab 87       	std	Y+11, r26	; 0x0b
    3a8c:	bc 87       	std	Y+12, r27	; 0x0c
			t.F = SEARCH_FEEDRATE_Z;
    3a8e:	8a e0       	ldi	r24, 0x0A	; 10
    3a90:	90 e0       	ldi	r25, 0x00	; 0
    3a92:	a0 e0       	ldi	r26, 0x00	; 0
    3a94:	b0 e0       	ldi	r27, 0x00	; 0
    3a96:	89 8b       	std	Y+17, r24	; 0x11
    3a98:	9a 8b       	std	Y+18, r25	; 0x12
    3a9a:	ab 8b       	std	Y+19, r26	; 0x13
    3a9c:	bc 8b       	std	Y+20, r27	; 0x14
			enqueue_home(&t, 0x4, 0);
    3a9e:	c8 01       	movw	r24, r16
    3aa0:	64 e0       	ldi	r22, 0x04	; 4
    3aa2:	40 e0       	ldi	r20, 0x00	; 0
    3aa4:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <enqueue_home>
    }

		// set Z home
		queue_wait();
    3aa8:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <queue_wait>
		#ifdef Z_MIN
      startpoint.axis[Z] = next_target.target.axis[Z] = (int32_t)(Z_MIN * 1000.);
    3aac:	10 92 10 06 	sts	0x0610, r1
    3ab0:	10 92 11 06 	sts	0x0611, r1
    3ab4:	10 92 12 06 	sts	0x0612, r1
    3ab8:	10 92 13 06 	sts	0x0613, r1
    3abc:	10 92 30 02 	sts	0x0230, r1
    3ac0:	10 92 31 02 	sts	0x0231, r1
    3ac4:	10 92 32 02 	sts	0x0232, r1
    3ac8:	10 92 33 02 	sts	0x0233, r1
		#else
      startpoint.axis[Z] = next_target.target.axis[Z] = 0;
		#endif
		dda_new_startpoint();
    3acc:	0e 94 3a 09 	call	0x1274	; 0x1274 <dda_new_startpoint>
	#endif
}
    3ad0:	65 96       	adiw	r28, 0x15	; 21
    3ad2:	e4 e0       	ldi	r30, 0x04	; 4
    3ad4:	0c 94 91 23 	jmp	0x4722	; 0x4722 <__epilogue_restores__+0x1c>

00003ad8 <home>:
  home_x_positive();

  home_y_negative();
  home_y_positive();

  home_z_negative();
    3ad8:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <home_z_negative>
  home_z_positive();
}
    3adc:	08 95       	ret

00003ade <joints_init>:

AX12servo shoulder;
AX12servo elbow;
AX12servo wrist;

void joints_init() {
    3ade:	0f 93       	push	r16
	// init Dynamixel servos
  	AX12_init (1000000);
    3ae0:	60 e4       	ldi	r22, 0x40	; 64
    3ae2:	72 e4       	ldi	r23, 0x42	; 66
    3ae4:	8f e0       	ldi	r24, 0x0F	; 15
    3ae6:	90 e0       	ldi	r25, 0x00	; 0
    3ae8:	0e 94 34 02 	call	0x468	; 0x468 <AX12_init>

	shoulder.id = 3;
    3aec:	63 e0       	ldi	r22, 0x03	; 3
    3aee:	60 93 83 06 	sts	0x0683, r22
	shoulder.SRL = RETURN_READ;
    3af2:	81 e0       	ldi	r24, 0x01	; 1
    3af4:	80 93 85 06 	sts	0x0685, r24
	shoulder.inverse = 0;
    3af8:	10 92 84 06 	sts	0x0684, r1
	
	elbow.id = 2;
    3afc:	92 e0       	ldi	r25, 0x02	; 2
    3afe:	90 93 89 06 	sts	0x0689, r25
	elbow.SRL = RETURN_READ;
    3b02:	80 93 8b 06 	sts	0x068B, r24
	elbow.inverse = 0;
    3b06:	10 92 8a 06 	sts	0x068A, r1
	
	wrist.id = 1;
    3b0a:	80 93 86 06 	sts	0x0686, r24
	wrist.SRL = RETURN_READ;
    3b0e:	80 93 88 06 	sts	0x0688, r24
	wrist.inverse = 0;
    3b12:	10 92 87 06 	sts	0x0687, r1
	
	// set compliance slopes
	
	
	// set initial positions
	AX12_writeInfo (shoulder, GOAL_POSITION, 512, 0);
    3b16:	70 e0       	ldi	r23, 0x00	; 0
    3b18:	4e e1       	ldi	r20, 0x1E	; 30
    3b1a:	20 e0       	ldi	r18, 0x00	; 0
    3b1c:	32 e0       	ldi	r19, 0x02	; 2
    3b1e:	00 e0       	ldi	r16, 0x00	; 0
    3b20:	0e 94 30 04 	call	0x860	; 0x860 <AX12_writeInfo>
	TCCR3A = 0;          // normal operation
	TCCR3B = bit(WGM12) | bit(CS12) | bit(CS10);   // CTC, scale / 1024
	OCR3A =  300;       // compare A register value, 156 is approx 100 Hz
	TIMSK3 = bit (OCIE3A);             // interrupt on Compare A Match, enable
	*/
}
    3b24:	0f 91       	pop	r16
    3b26:	08 95       	ret

00003b28 <io_init>:
void io_init(void) {
	// disable modules we don't use
	#ifdef PRR
		PRR = MASK(PRTWI) | MASK(PRADC) | MASK(PRSPI);
	#elif defined PRR0
		PRR0 = MASK(PRTWI) | MASK(PRADC) | MASK(PRSPI);
    3b28:	85 e8       	ldi	r24, 0x85	; 133
    3b2a:	80 93 64 00 	sts	0x0064, r24
		#if defined(PRUSART3)
			// don't use USART2 or USART3- leave USART1 for GEN3 and derivatives
			PRR1 |= MASK(PRUSART3) | MASK(PRUSART2);
    3b2e:	e5 e6       	ldi	r30, 0x65	; 101
    3b30:	f0 e0       	ldi	r31, 0x00	; 0
    3b32:	80 81       	ld	r24, Z
    3b34:	86 60       	ori	r24, 0x06	; 6
    3b36:	80 83       	st	Z, r24
		#endif
		#if defined(PRUSART2)
			// don't use USART2 or USART3- leave USART1 for GEN3 and derivatives
			PRR1 |= MASK(PRUSART2);
    3b38:	80 81       	ld	r24, Z
    3b3a:	82 60       	ori	r24, 0x02	; 2
    3b3c:	80 83       	st	Z, r24
		#endif
	#endif
	ACSR = MASK(ACD);
    3b3e:	80 e8       	ldi	r24, 0x80	; 128
    3b40:	80 bf       	out	0x30, r24	; 48

	// setup I/O pins

	// X Stepper
	WRITE(X_STEP_PIN, 0);	SET_OUTPUT(X_STEP_PIN);
    3b42:	88 98       	cbi	0x11, 0	; 17
    3b44:	80 9a       	sbi	0x10, 0	; 16
	WRITE(X_DIR_PIN,  0);	SET_OUTPUT(X_DIR_PIN);
    3b46:	89 98       	cbi	0x11, 1	; 17
    3b48:	81 9a       	sbi	0x10, 1	; 16
		SET_INPUT(X_MAX_PIN);
		WRITE(X_MAX_PIN, 0); // pullup resistors off
	#endif

	// Y Stepper
	WRITE(Y_STEP_PIN, 0);	SET_OUTPUT(Y_STEP_PIN);
    3b4a:	8e 98       	cbi	0x11, 6	; 17
    3b4c:	86 9a       	sbi	0x10, 6	; 16
	WRITE(Y_DIR_PIN,  0);	SET_OUTPUT(Y_DIR_PIN);
    3b4e:	8f 98       	cbi	0x11, 7	; 17
    3b50:	87 9a       	sbi	0x10, 7	; 16
		WRITE(Y_MAX_PIN, 0); // pullup resistors off
	#endif

	// Z Stepper
	#if defined Z_STEP_PIN && defined Z_DIR_PIN
		WRITE(Z_STEP_PIN, 0);	SET_OUTPUT(Z_STEP_PIN);
    3b52:	41 98       	cbi	0x08, 1	; 8
    3b54:	39 9a       	sbi	0x07, 1	; 7
		WRITE(Z_DIR_PIN,  0);	SET_OUTPUT(Z_DIR_PIN);
    3b56:	43 98       	cbi	0x08, 3	; 8
    3b58:	3b 9a       	sbi	0x07, 3	; 7
	#endif
	#ifdef Z_MIN_PIN
		SET_INPUT(Z_MIN_PIN);
    3b5a:	6d 98       	cbi	0x0d, 5	; 13
		WRITE(Z_MIN_PIN, 0); // pullup resistors off
    3b5c:	75 98       	cbi	0x0e, 5	; 14
		SET_INPUT(Z_MAX_PIN);
		WRITE(Z_MAX_PIN, 0); // pullup resistors off
	#endif

	#if defined E_STEP_PIN && defined E_DIR_PIN
		WRITE(E_STEP_PIN, 0);	SET_OUTPUT(E_STEP_PIN);
    3b5e:	14 98       	cbi	0x02, 4	; 2
    3b60:	0c 9a       	sbi	0x01, 4	; 1
		WRITE(E_DIR_PIN,  0);	SET_OUTPUT(E_DIR_PIN);
    3b62:	16 98       	cbi	0x02, 6	; 2
    3b64:	0e 9a       	sbi	0x01, 6	; 1
	#endif

	// X Stepper Enable
	#ifdef X_ENABLE_PIN
		#ifdef X_INVERT_ENABLE
			WRITE(X_ENABLE_PIN, 0);
    3b66:	5f 98       	cbi	0x0b, 7	; 11
		#else
			WRITE(X_ENABLE_PIN, 1);
		#endif
		SET_OUTPUT(X_ENABLE_PIN);
    3b68:	57 9a       	sbi	0x0a, 7	; 10
	#endif

	// Y Stepper Enable
	#ifdef Y_ENABLE_PIN
		#ifdef Y_INVERT_ENABLE
			WRITE(Y_ENABLE_PIN, 0);
    3b6a:	8a 98       	cbi	0x11, 2	; 17
		#else
			WRITE(Y_ENABLE_PIN, 1);
		#endif
		SET_OUTPUT(Y_ENABLE_PIN);
    3b6c:	82 9a       	sbi	0x10, 2	; 16
	#endif

	// Z Stepper Enable
	#ifdef Z_ENABLE_PIN
		#ifdef Z_INVERT_ENABLE
			WRITE(Z_ENABLE_PIN, 0);
    3b6e:	47 98       	cbi	0x08, 7	; 8
		#else
			WRITE(Z_ENABLE_PIN, 1);
		#endif
		SET_OUTPUT(Z_ENABLE_PIN);
    3b70:	3f 9a       	sbi	0x07, 7	; 7
	#endif

	// E Stepper Enable
	#ifdef E_ENABLE_PIN
		#ifdef E_INVERT_ENABLE
			WRITE(E_ENABLE_PIN, 0);
    3b72:	12 98       	cbi	0x02, 2	; 2
		#else
			WRITE(E_ENABLE_PIN, 1);
		#endif
		SET_OUTPUT(E_ENABLE_PIN);
    3b74:	0a 9a       	sbi	0x01, 2	; 1

  #ifdef DEBUG_LED_PIN 
    WRITE(DEBUG_LED_PIN, 0);
    SET_OUTPUT(DEBUG_LED_PIN);
  #endif
}
    3b76:	08 95       	ret

00003b78 <init>:
void init(void) {
	// set up watchdog
	wd_init();

	// set up serial
	serial_init();
    3b78:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <serial_init>

	// set up G-code parsing
	gcode_init();
    3b7c:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <gcode_init>

	// set up inputs and outputs
	io_init();
    3b80:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <io_init>

	// set up timers
	timer_init();
    3b84:	0e 94 7d 20 	call	0x40fa	; 0x40fa <timer_init>

	// read PID settings from EEPROM
	heater_init();
    3b88:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <heater_init>

	// set up dda
	dda_init();
    3b8c:	0e 94 a7 04 	call	0x94e	; 0x94e <dda_init>

	// start up analog read interrupt loop,
	// if any of the temp sensors in your config.h use analog interface
	analog_init();
    3b90:	0e 94 06 02 	call	0x40c	; 0x40c <analog_init>

	// set up temperature inputs
	temp_init();
    3b94:	0e 94 77 20 	call	0x40ee	; 0x40ee <temp_init>

	// enable interrupts
	sei();
    3b98:	78 94       	sei

  	// prepare the power supply
  	power_init();
  
  	// init joints
  	joints_init();
    3b9a:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <joints_init>

	// say hi to host
	serial_writestr_P(PSTR("start\nok\n"));
    3b9e:	85 ea       	ldi	r24, 0xA5	; 165
    3ba0:	93 e0       	ldi	r25, 0x03	; 3
    3ba2:	0e 94 c7 1e 	call	0x3d8e	; 0x3d8e <serial_writestr_P>

}
    3ba6:	08 95       	ret

00003ba8 <main>:
  sim_start(argc, argv);
#else
int main (void)
{
#endif
	init();
    3ba8:	0e 94 bc 1d 	call	0x3b78	; 0x3b78 <init>

	// main loop
	for (;;)
	{
		// if queue is full, no point in reading chars- host will just have to wait
    if (queue_full() == 0) {
    3bac:	0e 94 72 14 	call	0x28e4	; 0x28e4 <queue_full>
    3bb0:	88 23       	and	r24, r24
    3bb2:	41 f4       	brne	.+16     	; 0x3bc4 <main+0x1c>
      if (serial_rxchars() != 0) {
    3bb4:	0e 94 76 1e 	call	0x3cec	; 0x3cec <serial_rxchars>
    3bb8:	88 23       	and	r24, r24
    3bba:	21 f0       	breq	.+8      	; 0x3bc4 <main+0x1c>
        uint8_t c = serial_popchar();
    3bbc:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <serial_popchar>
        gcode_parse_char(c);
    3bc0:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <gcode_parse_char>
          canned_gcode_pos = 0;

      #endif /* CANNED_CYCLE */
		}

		clock();
    3bc4:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <clock>
    3bc8:	f1 cf       	rjmp	.-30     	; 0x3bac <main+0x4>

00003bca <power_on>:
/// step/psu timeout
volatile uint8_t	psu_timeout = 0;

void power_on() {

	if (ps_is_on == 0) {
    3bca:	80 91 34 06 	lds	r24, 0x0634
    3bce:	88 23       	and	r24, r24
    3bd0:	19 f4       	brne	.+6      	; 0x3bd8 <power_on+0xe>
		#endif
    #ifdef PS_MOSFET_PIN
      WRITE(PS_MOSFET_PIN, 1);
      delay_ms(10);
    #endif
		ps_is_on = 1;
    3bd2:	81 e0       	ldi	r24, 0x01	; 1
    3bd4:	80 93 34 06 	sts	0x0634, r24
	}

	psu_timeout = 0;
    3bd8:	10 92 33 06 	sts	0x0633, r1
}
    3bdc:	08 95       	ret

00003bde <power_off>:

void power_off() {

	stepper_disable();
	x_disable();
    3bde:	5f 9a       	sbi	0x0b, 7	; 11
	y_disable();
    3be0:	8a 9a       	sbi	0x11, 2	; 17
	z_disable();
    3be2:	47 9a       	sbi	0x08, 7	; 8
	e_disable();
    3be4:	12 9a       	sbi	0x02, 2	; 2

  #ifdef PS_MOSFET_PIN
    WRITE(PS_MOSFET_PIN, 0);
  #endif

	ps_is_on = 0;
    3be6:	10 92 34 06 	sts	0x0634, r1
}
    3bea:	08 95       	ret

00003bec <serial_init>:
///
/// set up baud generator and interrupts, clear buffers
void serial_init()
{
#if BAUD > 38401
	UCSR0A = MASK(U2X0);
    3bec:	82 e0       	ldi	r24, 0x02	; 2
    3bee:	80 93 c0 00 	sts	0x00C0, r24
	UBRR0 = (((F_CPU / 8) / BAUD) - 0.5);
    3bf2:	80 e1       	ldi	r24, 0x10	; 16
    3bf4:	90 e0       	ldi	r25, 0x00	; 0
    3bf6:	90 93 c5 00 	sts	0x00C5, r25
    3bfa:	80 93 c4 00 	sts	0x00C4, r24
#else
	UCSR0A = 0;
	UBRR0 = (((F_CPU / 16) / BAUD) - 0.5);
#endif

	UCSR0B = MASK(RXEN0) | MASK(TXEN0);
    3bfe:	e1 ec       	ldi	r30, 0xC1	; 193
    3c00:	f0 e0       	ldi	r31, 0x00	; 0
    3c02:	88 e1       	ldi	r24, 0x18	; 24
    3c04:	80 83       	st	Z, r24
	UCSR0C = MASK(UCSZ01) | MASK(UCSZ00);
    3c06:	86 e0       	ldi	r24, 0x06	; 6
    3c08:	80 93 c2 00 	sts	0x00C2, r24

	UCSR0B |= MASK(RXCIE0) | MASK(UDRIE0);
    3c0c:	80 81       	ld	r24, Z
    3c0e:	80 6a       	ori	r24, 0xA0	; 160
    3c10:	80 83       	st	Z, r24
}
    3c12:	08 95       	ret

00003c14 <__vector_25>:
#ifdef	USART_RX_vect
ISR(USART_RX_vect)
#else
ISR(USART0_RX_vect)
#endif
{
    3c14:	1f 92       	push	r1
    3c16:	0f 92       	push	r0
    3c18:	0f b6       	in	r0, 0x3f	; 63
    3c1a:	0f 92       	push	r0
    3c1c:	0b b6       	in	r0, 0x3b	; 59
    3c1e:	0f 92       	push	r0
    3c20:	11 24       	eor	r1, r1
    3c22:	2f 93       	push	r18
    3c24:	8f 93       	push	r24
    3c26:	9f 93       	push	r25
    3c28:	ef 93       	push	r30
    3c2a:	ff 93       	push	r31
	if (buf_canwrite(rx))
    3c2c:	80 91 36 06 	lds	r24, 0x0636
    3c30:	20 91 35 06 	lds	r18, 0x0635
    3c34:	90 e0       	ldi	r25, 0x00	; 0
    3c36:	01 97       	sbiw	r24, 0x01	; 1
    3c38:	82 1b       	sub	r24, r18
    3c3a:	91 09       	sbc	r25, r1
    3c3c:	8f 73       	andi	r24, 0x3F	; 63
    3c3e:	90 70       	andi	r25, 0x00	; 0
    3c40:	89 2b       	or	r24, r25
    3c42:	79 f0       	breq	.+30     	; 0x3c62 <__vector_25+0x4e>
		buf_push(rx, UDR0);
    3c44:	e0 91 35 06 	lds	r30, 0x0635
    3c48:	f0 e0       	ldi	r31, 0x00	; 0
    3c4a:	80 91 c6 00 	lds	r24, 0x00C6
    3c4e:	e4 57       	subi	r30, 0x74	; 116
    3c50:	f9 4f       	sbci	r31, 0xF9	; 249
    3c52:	80 83       	st	Z, r24
    3c54:	80 91 35 06 	lds	r24, 0x0635
    3c58:	8f 5f       	subi	r24, 0xFF	; 255
    3c5a:	8f 73       	andi	r24, 0x3F	; 63
    3c5c:	80 93 35 06 	sts	0x0635, r24
    3c60:	02 c0       	rjmp	.+4      	; 0x3c66 <__vector_25+0x52>
    // retries, so better read it and throw it away.
    // #pragma GCC diagnostic ignored "-Wunused-but-set-variable"
		uint8_t trash;
    // #pragma GCC diagnostic pop

		trash = UDR0;
    3c62:	80 91 c6 00 	lds	r24, 0x00C6
		flowflags = FLOWFLAG_SEND_XOFF | FLOWFLAG_STATE_XON;
		// enable TX interrupt so we can send this character
		UCSR0B |= MASK(UDRIE0);
	}
	#endif
}
    3c66:	ff 91       	pop	r31
    3c68:	ef 91       	pop	r30
    3c6a:	9f 91       	pop	r25
    3c6c:	8f 91       	pop	r24
    3c6e:	2f 91       	pop	r18
    3c70:	0f 90       	pop	r0
    3c72:	0b be       	out	0x3b, r0	; 59
    3c74:	0f 90       	pop	r0
    3c76:	0f be       	out	0x3f, r0	; 63
    3c78:	0f 90       	pop	r0
    3c7a:	1f 90       	pop	r1
    3c7c:	18 95       	reti

00003c7e <__vector_26>:
#ifdef	USART_UDRE_vect
ISR(USART_UDRE_vect)
#else
ISR(USART0_UDRE_vect)
#endif
{
    3c7e:	1f 92       	push	r1
    3c80:	0f 92       	push	r0
    3c82:	0f b6       	in	r0, 0x3f	; 63
    3c84:	0f 92       	push	r0
    3c86:	0b b6       	in	r0, 0x3b	; 59
    3c88:	0f 92       	push	r0
    3c8a:	11 24       	eor	r1, r1
    3c8c:	2f 93       	push	r18
    3c8e:	8f 93       	push	r24
    3c90:	9f 93       	push	r25
    3c92:	ef 93       	push	r30
    3c94:	ff 93       	push	r31
		UDR0 = ASCII_XOFF;
		flowflags = FLOWFLAG_STATE_XOFF;
	}
	else
	#endif
	if (buf_canread(tx))
    3c96:	80 91 37 06 	lds	r24, 0x0637
    3c9a:	20 91 38 06 	lds	r18, 0x0638
    3c9e:	90 e0       	ldi	r25, 0x00	; 0
    3ca0:	82 1b       	sub	r24, r18
    3ca2:	91 09       	sbc	r25, r1
    3ca4:	8f 73       	andi	r24, 0x3F	; 63
    3ca6:	90 70       	andi	r25, 0x00	; 0
    3ca8:	89 2b       	or	r24, r25
    3caa:	79 f0       	breq	.+30     	; 0x3cca <__vector_26+0x4c>
		buf_pop(tx, UDR0);
    3cac:	e0 91 38 06 	lds	r30, 0x0638
    3cb0:	f0 e0       	ldi	r31, 0x00	; 0
    3cb2:	e4 53       	subi	r30, 0x34	; 52
    3cb4:	f9 4f       	sbci	r31, 0xF9	; 249
    3cb6:	80 81       	ld	r24, Z
    3cb8:	80 93 c6 00 	sts	0x00C6, r24
    3cbc:	80 91 38 06 	lds	r24, 0x0638
    3cc0:	8f 5f       	subi	r24, 0xFF	; 255
    3cc2:	8f 73       	andi	r24, 0x3F	; 63
    3cc4:	80 93 38 06 	sts	0x0638, r24
    3cc8:	05 c0       	rjmp	.+10     	; 0x3cd4 <__vector_26+0x56>
	else
		UCSR0B &= ~MASK(UDRIE0);
    3cca:	80 91 c1 00 	lds	r24, 0x00C1
    3cce:	8f 7d       	andi	r24, 0xDF	; 223
    3cd0:	80 93 c1 00 	sts	0x00C1, r24
}
    3cd4:	ff 91       	pop	r31
    3cd6:	ef 91       	pop	r30
    3cd8:	9f 91       	pop	r25
    3cda:	8f 91       	pop	r24
    3cdc:	2f 91       	pop	r18
    3cde:	0f 90       	pop	r0
    3ce0:	0b be       	out	0x3b, r0	; 59
    3ce2:	0f 90       	pop	r0
    3ce4:	0f be       	out	0x3f, r0	; 63
    3ce6:	0f 90       	pop	r0
    3ce8:	1f 90       	pop	r1
    3cea:	18 95       	reti

00003cec <serial_rxchars>:
*/

/// check how many characters can be read
uint8_t serial_rxchars()
{
	return buf_canread(rx);
    3cec:	80 91 35 06 	lds	r24, 0x0635
    3cf0:	90 91 36 06 	lds	r25, 0x0636
    3cf4:	89 1b       	sub	r24, r25
}
    3cf6:	8f 73       	andi	r24, 0x3F	; 63
    3cf8:	08 95       	ret

00003cfa <serial_popchar>:
uint8_t serial_popchar()
{
	uint8_t c = 0;

	// it's imperative that we check, because if the buffer is empty and we pop, we'll go through the whole buffer again
	if (buf_canread(rx))
    3cfa:	80 91 35 06 	lds	r24, 0x0635
    3cfe:	20 91 36 06 	lds	r18, 0x0636
    3d02:	90 e0       	ldi	r25, 0x00	; 0
    3d04:	82 1b       	sub	r24, r18
    3d06:	91 09       	sbc	r25, r1
    3d08:	8f 73       	andi	r24, 0x3F	; 63
    3d0a:	90 70       	andi	r25, 0x00	; 0
    3d0c:	89 2b       	or	r24, r25
    3d0e:	11 f4       	brne	.+4      	; 0x3d14 <serial_popchar+0x1a>
    3d10:	e0 e0       	ldi	r30, 0x00	; 0
    3d12:	0c c0       	rjmp	.+24     	; 0x3d2c <serial_popchar+0x32>
		buf_pop(rx, c);
    3d14:	e0 91 36 06 	lds	r30, 0x0636
    3d18:	f0 e0       	ldi	r31, 0x00	; 0
    3d1a:	e4 57       	subi	r30, 0x74	; 116
    3d1c:	f9 4f       	sbci	r31, 0xF9	; 249
    3d1e:	e0 81       	ld	r30, Z
    3d20:	80 91 36 06 	lds	r24, 0x0636
    3d24:	8f 5f       	subi	r24, 0xFF	; 255
    3d26:	8f 73       	andi	r24, 0x3F	; 63
    3d28:	80 93 36 06 	sts	0x0636, r24
		UCSR0B |= MASK(UDRIE0);
	}
	#endif

	return c;
}
    3d2c:	8e 2f       	mov	r24, r30
    3d2e:	08 95       	ret

00003d30 <serial_writechar>:
	Write
*/

/// send one character
void serial_writechar(uint8_t data)
{
    3d30:	38 2f       	mov	r19, r24
	// check if interrupts are enabled
	if (SREG & MASK(SREG_I)) {
    3d32:	0f b6       	in	r0, 0x3f	; 63
    3d34:	07 fe       	sbrs	r0, 7
    3d36:	0d c0       	rjmp	.+26     	; 0x3d52 <serial_writechar+0x22>
		// if they are, we should be ok to block since the tx buffer is emptied from an interrupt
		for (;buf_canwrite(tx) == 0;);
    3d38:	80 91 38 06 	lds	r24, 0x0638
    3d3c:	20 91 37 06 	lds	r18, 0x0637
    3d40:	90 e0       	ldi	r25, 0x00	; 0
    3d42:	01 97       	sbiw	r24, 0x01	; 1
    3d44:	82 1b       	sub	r24, r18
    3d46:	91 09       	sbc	r25, r1
    3d48:	8f 73       	andi	r24, 0x3F	; 63
    3d4a:	90 70       	andi	r25, 0x00	; 0
    3d4c:	89 2b       	or	r24, r25
    3d4e:	a1 f3       	breq	.-24     	; 0x3d38 <serial_writechar+0x8>
    3d50:	0c c0       	rjmp	.+24     	; 0x3d6a <serial_writechar+0x3a>
		buf_push(tx, data);
	}
	else {
		// interrupts are disabled- maybe we're in one?
		// anyway, instead of blocking, only write if we have room
		if (buf_canwrite(tx))
    3d52:	80 91 38 06 	lds	r24, 0x0638
    3d56:	20 91 37 06 	lds	r18, 0x0637
    3d5a:	90 e0       	ldi	r25, 0x00	; 0
    3d5c:	01 97       	sbiw	r24, 0x01	; 1
    3d5e:	82 1b       	sub	r24, r18
    3d60:	91 09       	sbc	r25, r1
    3d62:	8f 73       	andi	r24, 0x3F	; 63
    3d64:	90 70       	andi	r25, 0x00	; 0
    3d66:	89 2b       	or	r24, r25
    3d68:	61 f0       	breq	.+24     	; 0x3d82 <serial_writechar+0x52>
			buf_push(tx, data);
    3d6a:	e0 91 37 06 	lds	r30, 0x0637
    3d6e:	f0 e0       	ldi	r31, 0x00	; 0
    3d70:	e4 53       	subi	r30, 0x34	; 52
    3d72:	f9 4f       	sbci	r31, 0xF9	; 249
    3d74:	30 83       	st	Z, r19
    3d76:	80 91 37 06 	lds	r24, 0x0637
    3d7a:	8f 5f       	subi	r24, 0xFF	; 255
    3d7c:	8f 73       	andi	r24, 0x3F	; 63
    3d7e:	80 93 37 06 	sts	0x0637, r24
	}
	// enable TX interrupt so we can send this character
	UCSR0B |= MASK(UDRIE0);
    3d82:	80 91 c1 00 	lds	r24, 0x00C1
    3d86:	80 62       	ori	r24, 0x20	; 32
    3d88:	80 93 c1 00 	sts	0x00C1, r24
}
    3d8c:	08 95       	ret

00003d8e <serial_writestr_P>:
		serial_writechar(pgm_read_byte(&data_P[i]));
}

/// Write string from FLASH
void serial_writestr_P(PGM_P data_P)
{
    3d8e:	1f 93       	push	r17
    3d90:	cf 93       	push	r28
    3d92:	df 93       	push	r29
    3d94:	ec 01       	movw	r28, r24
    3d96:	10 e0       	ldi	r17, 0x00	; 0
    3d98:	02 c0       	rjmp	.+4      	; 0x3d9e <serial_writestr_P+0x10>
	uint8_t r, i = 0;
	// yes, this is *supposed* to be assignment rather than comparison, so we break when r is assigned zero
	while ((r = pgm_read_byte(&data_P[i++])))
		serial_writechar(r);
    3d9a:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <serial_writechar>
/// Write string from FLASH
void serial_writestr_P(PGM_P data_P)
{
	uint8_t r, i = 0;
	// yes, this is *supposed* to be assignment rather than comparison, so we break when r is assigned zero
	while ((r = pgm_read_byte(&data_P[i++])))
    3d9e:	fe 01       	movw	r30, r28
    3da0:	e1 0f       	add	r30, r17
    3da2:	f1 1d       	adc	r31, r1
    3da4:	1f 5f       	subi	r17, 0xFF	; 255
    3da6:	84 91       	lpm	r24, Z+
    3da8:	88 23       	and	r24, r24
    3daa:	b9 f7       	brne	.-18     	; 0x3d9a <serial_writestr_P+0xc>
		serial_writechar(r);
}
    3dac:	df 91       	pop	r29
    3dae:	cf 91       	pop	r28
    3db0:	1f 91       	pop	r17
    3db2:	08 95       	ret

00003db4 <serwrite_uint32_vf>:

/** write decimal digits from a long unsigned int
\param v number to send
\param fp number of decimal places to the right of the decimal point
*/
void serwrite_uint32_vf(uint32_t v, uint8_t fp) {
    3db4:	cf 92       	push	r12
    3db6:	df 92       	push	r13
    3db8:	ef 92       	push	r14
    3dba:	ff 92       	push	r15
    3dbc:	0f 93       	push	r16
    3dbe:	1f 93       	push	r17
    3dc0:	7b 01       	movw	r14, r22
    3dc2:	8c 01       	movw	r16, r24
    3dc4:	c4 2e       	mov	r12, r20
    3dc6:	e4 e2       	ldi	r30, 0x24	; 36
    3dc8:	f2 e0       	ldi	r31, 0x02	; 2
    3dca:	29 e0       	ldi	r18, 0x09	; 9
	uint8_t e, t;

	for (e = 9; e > 0; e--) {
		if (v >= powers[e])
    3dcc:	80 81       	ld	r24, Z
    3dce:	91 81       	ldd	r25, Z+1	; 0x01
    3dd0:	a2 81       	ldd	r26, Z+2	; 0x02
    3dd2:	b3 81       	ldd	r27, Z+3	; 0x03
    3dd4:	e8 16       	cp	r14, r24
    3dd6:	f9 06       	cpc	r15, r25
    3dd8:	0a 07       	cpc	r16, r26
    3dda:	1b 07       	cpc	r17, r27
    3ddc:	20 f4       	brcc	.+8      	; 0x3de6 <serwrite_uint32_vf+0x32>
\param fp number of decimal places to the right of the decimal point
*/
void serwrite_uint32_vf(uint32_t v, uint8_t fp) {
	uint8_t e, t;

	for (e = 9; e > 0; e--) {
    3dde:	21 50       	subi	r18, 0x01	; 1
    3de0:	34 97       	sbiw	r30, 0x04	; 4
    3de2:	22 23       	and	r18, r18
    3de4:	99 f7       	brne	.-26     	; 0x3dcc <serwrite_uint32_vf+0x18>
    3de6:	d2 2e       	mov	r13, r18
    3de8:	2c 15       	cp	r18, r12
    3dea:	08 f4       	brcc	.+2      	; 0x3dee <serwrite_uint32_vf+0x3a>
    3dec:	dc 2c       	mov	r13, r12
	if (e < fp)
		e = fp;

	do
	{
		for (t = 0; v >= powers[e]; v -= powers[e], t++);
    3dee:	ed 2d       	mov	r30, r13
    3df0:	f0 e0       	ldi	r31, 0x00	; 0
    3df2:	ee 0f       	add	r30, r30
    3df4:	ff 1f       	adc	r31, r31
    3df6:	ee 0f       	add	r30, r30
    3df8:	ff 1f       	adc	r31, r31
    3dfa:	e0 50       	subi	r30, 0x00	; 0
    3dfc:	fe 4f       	sbci	r31, 0xFE	; 254
    3dfe:	20 81       	ld	r18, Z
    3e00:	31 81       	ldd	r19, Z+1	; 0x01
    3e02:	42 81       	ldd	r20, Z+2	; 0x02
    3e04:	53 81       	ldd	r21, Z+3	; 0x03
    3e06:	80 e0       	ldi	r24, 0x00	; 0
    3e08:	05 c0       	rjmp	.+10     	; 0x3e14 <serwrite_uint32_vf+0x60>
    3e0a:	e2 1a       	sub	r14, r18
    3e0c:	f3 0a       	sbc	r15, r19
    3e0e:	04 0b       	sbc	r16, r20
    3e10:	15 0b       	sbc	r17, r21
    3e12:	8f 5f       	subi	r24, 0xFF	; 255
    3e14:	e2 16       	cp	r14, r18
    3e16:	f3 06       	cpc	r15, r19
    3e18:	04 07       	cpc	r16, r20
    3e1a:	15 07       	cpc	r17, r21
    3e1c:	b0 f7       	brcc	.-20     	; 0x3e0a <serwrite_uint32_vf+0x56>
		serial_writechar(t + '0');
    3e1e:	80 5d       	subi	r24, 0xD0	; 208
    3e20:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <serial_writechar>
		if (e == fp)
    3e24:	dc 14       	cp	r13, r12
    3e26:	19 f4       	brne	.+6      	; 0x3e2e <serwrite_uint32_vf+0x7a>
			serial_writechar('.');
    3e28:	8e e2       	ldi	r24, 0x2E	; 46
    3e2a:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <serial_writechar>
	}
	while (e--);
    3e2e:	dd 20       	and	r13, r13
    3e30:	11 f0       	breq	.+4      	; 0x3e36 <serwrite_uint32_vf+0x82>
    3e32:	da 94       	dec	r13
    3e34:	dc cf       	rjmp	.-72     	; 0x3dee <serwrite_uint32_vf+0x3a>
}
    3e36:	1f 91       	pop	r17
    3e38:	0f 91       	pop	r16
    3e3a:	ff 90       	pop	r15
    3e3c:	ef 90       	pop	r14
    3e3e:	df 90       	pop	r13
    3e40:	cf 90       	pop	r12
    3e42:	08 95       	ret

00003e44 <serwrite_int32_vf>:

/** write decimal digits from a long signed int
\param v number to send
\param fp number of decimal places to the right of the decimal point
*/
void serwrite_int32_vf(int32_t v, uint8_t fp) {
    3e44:	df 92       	push	r13
    3e46:	ef 92       	push	r14
    3e48:	ff 92       	push	r15
    3e4a:	0f 93       	push	r16
    3e4c:	1f 93       	push	r17
    3e4e:	7b 01       	movw	r14, r22
    3e50:	8c 01       	movw	r16, r24
    3e52:	d4 2e       	mov	r13, r20
	if (v < 0) {
    3e54:	97 ff       	sbrs	r25, 7
    3e56:	0b c0       	rjmp	.+22     	; 0x3e6e <serwrite_int32_vf+0x2a>
		serial_writechar('-');
    3e58:	8d e2       	ldi	r24, 0x2D	; 45
    3e5a:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <serial_writechar>
		v = -v;
    3e5e:	10 95       	com	r17
    3e60:	00 95       	com	r16
    3e62:	f0 94       	com	r15
    3e64:	e0 94       	com	r14
    3e66:	e1 1c       	adc	r14, r1
    3e68:	f1 1c       	adc	r15, r1
    3e6a:	01 1d       	adc	r16, r1
    3e6c:	11 1d       	adc	r17, r1
	}

	serwrite_uint32_vf(v, fp);
    3e6e:	c8 01       	movw	r24, r16
    3e70:	b7 01       	movw	r22, r14
    3e72:	4d 2d       	mov	r20, r13
    3e74:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <serwrite_uint32_vf>
}
    3e78:	1f 91       	pop	r17
    3e7a:	0f 91       	pop	r16
    3e7c:	ff 90       	pop	r15
    3e7e:	ef 90       	pop	r14
    3e80:	df 90       	pop	r13
    3e82:	08 95       	ret

00003e84 <serwrite_uint32>:
const uint32_t powers[] = {1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000};

/** write decimal digits from a long unsigned int
	\param v number to send
*/
void serwrite_uint32(uint32_t v) {
    3e84:	df 92       	push	r13
    3e86:	ef 92       	push	r14
    3e88:	ff 92       	push	r15
    3e8a:	0f 93       	push	r16
    3e8c:	1f 93       	push	r17
    3e8e:	7b 01       	movw	r14, r22
    3e90:	8c 01       	movw	r16, r24
    3e92:	e4 e2       	ldi	r30, 0x24	; 36
    3e94:	f2 e0       	ldi	r31, 0x02	; 2
    3e96:	29 e0       	ldi	r18, 0x09	; 9
    3e98:	d2 2e       	mov	r13, r18
	uint8_t e, t;

	for (e = 9; e > 0; e--) {
		if (v >= powers[e])
    3e9a:	80 81       	ld	r24, Z
    3e9c:	91 81       	ldd	r25, Z+1	; 0x01
    3e9e:	a2 81       	ldd	r26, Z+2	; 0x02
    3ea0:	b3 81       	ldd	r27, Z+3	; 0x03
    3ea2:	e8 16       	cp	r14, r24
    3ea4:	f9 06       	cpc	r15, r25
    3ea6:	0a 07       	cpc	r16, r26
    3ea8:	1b 07       	cpc	r17, r27
    3eaa:	20 f4       	brcc	.+8      	; 0x3eb4 <serwrite_uint32+0x30>
	\param v number to send
*/
void serwrite_uint32(uint32_t v) {
	uint8_t e, t;

	for (e = 9; e > 0; e--) {
    3eac:	da 94       	dec	r13
    3eae:	34 97       	sbiw	r30, 0x04	; 4
    3eb0:	dd 20       	and	r13, r13
    3eb2:	99 f7       	brne	.-26     	; 0x3e9a <serwrite_uint32+0x16>
			break;
	}

	do
	{
		for (t = 0; v >= powers[e]; v -= powers[e], t++);
    3eb4:	ed 2d       	mov	r30, r13
    3eb6:	f0 e0       	ldi	r31, 0x00	; 0
    3eb8:	ee 0f       	add	r30, r30
    3eba:	ff 1f       	adc	r31, r31
    3ebc:	ee 0f       	add	r30, r30
    3ebe:	ff 1f       	adc	r31, r31
    3ec0:	e0 50       	subi	r30, 0x00	; 0
    3ec2:	fe 4f       	sbci	r31, 0xFE	; 254
    3ec4:	20 81       	ld	r18, Z
    3ec6:	31 81       	ldd	r19, Z+1	; 0x01
    3ec8:	42 81       	ldd	r20, Z+2	; 0x02
    3eca:	53 81       	ldd	r21, Z+3	; 0x03
    3ecc:	80 e0       	ldi	r24, 0x00	; 0
    3ece:	05 c0       	rjmp	.+10     	; 0x3eda <serwrite_uint32+0x56>
    3ed0:	e2 1a       	sub	r14, r18
    3ed2:	f3 0a       	sbc	r15, r19
    3ed4:	04 0b       	sbc	r16, r20
    3ed6:	15 0b       	sbc	r17, r21
    3ed8:	8f 5f       	subi	r24, 0xFF	; 255
    3eda:	e2 16       	cp	r14, r18
    3edc:	f3 06       	cpc	r15, r19
    3ede:	04 07       	cpc	r16, r20
    3ee0:	15 07       	cpc	r17, r21
    3ee2:	b0 f7       	brcc	.-20     	; 0x3ed0 <serwrite_uint32+0x4c>
		serial_writechar(t + '0');
    3ee4:	80 5d       	subi	r24, 0xD0	; 208
    3ee6:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <serial_writechar>
	}
	while (e--);
    3eea:	dd 20       	and	r13, r13
    3eec:	11 f0       	breq	.+4      	; 0x3ef2 <serwrite_uint32+0x6e>
    3eee:	da 94       	dec	r13
    3ef0:	e1 cf       	rjmp	.-62     	; 0x3eb4 <serwrite_uint32+0x30>
}
    3ef2:	1f 91       	pop	r17
    3ef4:	0f 91       	pop	r16
    3ef6:	ff 90       	pop	r15
    3ef8:	ef 90       	pop	r14
    3efa:	df 90       	pop	r13
    3efc:	08 95       	ret

00003efe <serwrite_int32>:

/** write decimal digits from a long signed int
	\param v number to send
*/
void serwrite_int32(int32_t v) {
    3efe:	ef 92       	push	r14
    3f00:	ff 92       	push	r15
    3f02:	0f 93       	push	r16
    3f04:	1f 93       	push	r17
    3f06:	7b 01       	movw	r14, r22
    3f08:	8c 01       	movw	r16, r24
	if (v < 0) {
    3f0a:	97 ff       	sbrs	r25, 7
    3f0c:	0b c0       	rjmp	.+22     	; 0x3f24 <serwrite_int32+0x26>
		serial_writechar('-');
    3f0e:	8d e2       	ldi	r24, 0x2D	; 45
    3f10:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <serial_writechar>
		v = -v;
    3f14:	10 95       	com	r17
    3f16:	00 95       	com	r16
    3f18:	f0 94       	com	r15
    3f1a:	e0 94       	com	r14
    3f1c:	e1 1c       	adc	r14, r1
    3f1e:	f1 1c       	adc	r15, r1
    3f20:	01 1d       	adc	r16, r1
    3f22:	11 1d       	adc	r17, r1
	}

	serwrite_uint32(v);
    3f24:	c8 01       	movw	r24, r16
    3f26:	b7 01       	movw	r22, r14
    3f28:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <serwrite_uint32>
}
    3f2c:	1f 91       	pop	r17
    3f2e:	0f 91       	pop	r16
    3f30:	ff 90       	pop	r15
    3f32:	ef 90       	pop	r14
    3f34:	08 95       	ret

00003f36 <serwrite_hex4>:

/** write a single hex digit
	\param v hex digit to write, higher nibble ignored
*/
void serwrite_hex4(uint8_t v) {
	v &= 0xF;
    3f36:	8f 70       	andi	r24, 0x0F	; 15
	if (v < 10)
    3f38:	8a 30       	cpi	r24, 0x0A	; 10
    3f3a:	10 f4       	brcc	.+4      	; 0x3f40 <serwrite_hex4+0xa>
		serial_writechar('0' + v);
    3f3c:	80 5d       	subi	r24, 0xD0	; 208
    3f3e:	01 c0       	rjmp	.+2      	; 0x3f42 <serwrite_hex4+0xc>
	else
		serial_writechar('A' - 10 + v);
    3f40:	89 5c       	subi	r24, 0xC9	; 201
    3f42:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <serial_writechar>
    3f46:	08 95       	ret

00003f48 <serwrite_hex8>:
}

/** write a pair of hex digits
	\param v byte to write. One byte gives two hex digits
*/
void serwrite_hex8(uint8_t v) {
    3f48:	1f 93       	push	r17
    3f4a:	18 2f       	mov	r17, r24
	serwrite_hex4(v >> 4);
    3f4c:	82 95       	swap	r24
    3f4e:	8f 70       	andi	r24, 0x0F	; 15
    3f50:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <serwrite_hex4>
	serwrite_hex4(v & 0x0F);
    3f54:	81 2f       	mov	r24, r17
    3f56:	8f 70       	andi	r24, 0x0F	; 15
    3f58:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <serwrite_hex4>
}
    3f5c:	1f 91       	pop	r17
    3f5e:	08 95       	ret

00003f60 <serwrite_hex16>:

/** write four hex digits
	\param v word to write
*/
void serwrite_hex16(uint16_t v) {
    3f60:	1f 93       	push	r17
    3f62:	18 2f       	mov	r17, r24
	serwrite_hex8(v >> 8);
    3f64:	89 2f       	mov	r24, r25
    3f66:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <serwrite_hex8>
	serwrite_hex8(v & 0xFF);
    3f6a:	81 2f       	mov	r24, r17
    3f6c:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <serwrite_hex8>
}
    3f70:	1f 91       	pop	r17
    3f72:	08 95       	ret

00003f74 <serwrite_hex32>:

/** write eight hex digits
	\param v long word to write
*/
void serwrite_hex32(uint32_t v) {
    3f74:	ef 92       	push	r14
    3f76:	ff 92       	push	r15
    3f78:	0f 93       	push	r16
    3f7a:	1f 93       	push	r17
    3f7c:	7b 01       	movw	r14, r22
    3f7e:	8c 01       	movw	r16, r24
	serwrite_hex16(v >> 16);
    3f80:	aa 27       	eor	r26, r26
    3f82:	bb 27       	eor	r27, r27
    3f84:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <serwrite_hex16>
	serwrite_hex16(v & 0xFFFF);
    3f88:	c7 01       	movw	r24, r14
    3f8a:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <serwrite_hex16>
}
    3f8e:	1f 91       	pop	r17
    3f90:	0f 91       	pop	r16
    3f92:	ff 90       	pop	r15
    3f94:	ef 90       	pop	r14
    3f96:	08 95       	ret

00003f98 <sersendf_P>:
  #define GET_ARG(T) (va_arg(args, int))
#else
  #define GET_ARG(T) (va_arg(args, T))
#endif

void sersendf_P(PGM_P format_P, ...) {
    3f98:	a0 e0       	ldi	r26, 0x00	; 0
    3f9a:	b0 e0       	ldi	r27, 0x00	; 0
    3f9c:	e2 ed       	ldi	r30, 0xD2	; 210
    3f9e:	ff e1       	ldi	r31, 0x1F	; 31
    3fa0:	0c 94 6f 23 	jmp	0x46de	; 0x46de <__prologue_saves__+0x10>
    3fa4:	90 e1       	ldi	r25, 0x10	; 16
    3fa6:	e9 2e       	mov	r14, r25
    3fa8:	f1 2c       	mov	r15, r1
    3faa:	ec 0e       	add	r14, r28
    3fac:	fd 1e       	adc	r15, r29
    3fae:	8e 85       	ldd	r24, Y+14	; 0x0e
    3fb0:	9f 85       	ldd	r25, Y+15	; 0x0f
    3fb2:	fc 01       	movw	r30, r24
    3fb4:	5f 01       	movw	r10, r30
    3fb6:	00 e0       	ldi	r16, 0x00	; 0
    3fb8:	91 c0       	rjmp	.+290    	; 0x40dc <sersendf_P+0x144>
	va_start(args, format_P);

	uint16_t i = 0;
	uint8_t c = 1, j = 0;
	while ((c = pgm_read_byte(&format_P[i++]))) {
		if (j) {
    3fba:	00 23       	and	r16, r16
    3fbc:	09 f4       	brne	.+2      	; 0x3fc0 <sersendf_P+0x28>
    3fbe:	85 c0       	rjmp	.+266    	; 0x40ca <sersendf_P+0x132>
			switch(c) {
    3fc0:	81 37       	cpi	r24, 0x71	; 113
    3fc2:	09 f4       	brne	.+2      	; 0x3fc6 <sersendf_P+0x2e>
    3fc4:	72 c0       	rjmp	.+228    	; 0x40aa <sersendf_P+0x112>
    3fc6:	82 37       	cpi	r24, 0x72	; 114
    3fc8:	40 f4       	brcc	.+16     	; 0x3fda <sersendf_P+0x42>
    3fca:	84 36       	cpi	r24, 0x64	; 100
    3fcc:	49 f1       	breq	.+82     	; 0x4020 <sersendf_P+0x88>
    3fce:	8c 36       	cpi	r24, 0x6C	; 108
    3fd0:	69 f0       	breq	.+26     	; 0x3fec <sersendf_P+0x54>
    3fd2:	83 36       	cpi	r24, 0x63	; 99
    3fd4:	09 f0       	breq	.+2      	; 0x3fd8 <sersendf_P+0x40>
    3fd6:	75 c0       	rjmp	.+234    	; 0x40c2 <sersendf_P+0x12a>
    3fd8:	3b c0       	rjmp	.+118    	; 0x4050 <sersendf_P+0xb8>
    3fda:	85 37       	cpi	r24, 0x75	; 117
    3fdc:	59 f0       	breq	.+22     	; 0x3ff4 <sersendf_P+0x5c>
    3fde:	88 37       	cpi	r24, 0x78	; 120
    3fe0:	09 f4       	brne	.+2      	; 0x3fe4 <sersendf_P+0x4c>
    3fe2:	3f c0       	rjmp	.+126    	; 0x4062 <sersendf_P+0xca>
    3fe4:	83 37       	cpi	r24, 0x73	; 115
    3fe6:	09 f0       	breq	.+2      	; 0x3fea <sersendf_P+0x52>
    3fe8:	6c c0       	rjmp	.+216    	; 0x40c2 <sersendf_P+0x12a>
    3fea:	02 c0       	rjmp	.+4      	; 0x3ff0 <sersendf_P+0x58>
    3fec:	04 e0       	ldi	r16, 0x04	; 4
    3fee:	73 c0       	rjmp	.+230    	; 0x40d6 <sersendf_P+0x13e>
    3ff0:	01 e0       	ldi	r16, 0x01	; 1
    3ff2:	71 c0       	rjmp	.+226    	; 0x40d6 <sersendf_P+0x13e>
					break;
				case 'l':
					j = 4;
					break;
				case 'u':
					if (j == 4)
    3ff4:	04 30       	cpi	r16, 0x04	; 4
    3ff6:	49 f4       	brne	.+18     	; 0x400a <sersendf_P+0x72>
            serwrite_uint32(GET_ARG(uint32_t));
    3ff8:	87 01       	movw	r16, r14
    3ffa:	0c 5f       	subi	r16, 0xFC	; 252
    3ffc:	1f 4f       	sbci	r17, 0xFF	; 255
    3ffe:	f7 01       	movw	r30, r14
    4000:	60 81       	ld	r22, Z
    4002:	71 81       	ldd	r23, Z+1	; 0x01
    4004:	82 81       	ldd	r24, Z+2	; 0x02
    4006:	93 81       	ldd	r25, Z+3	; 0x03
    4008:	08 c0       	rjmp	.+16     	; 0x401a <sersendf_P+0x82>
					else
            serwrite_uint16(GET_ARG(uint16_t));
    400a:	87 01       	movw	r16, r14
    400c:	0e 5f       	subi	r16, 0xFE	; 254
    400e:	1f 4f       	sbci	r17, 0xFF	; 255
    4010:	f7 01       	movw	r30, r14
    4012:	60 81       	ld	r22, Z
    4014:	71 81       	ldd	r23, Z+1	; 0x01
    4016:	80 e0       	ldi	r24, 0x00	; 0
    4018:	90 e0       	ldi	r25, 0x00	; 0
    401a:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <serwrite_uint32>
    401e:	1f c0       	rjmp	.+62     	; 0x405e <sersendf_P+0xc6>
					j = 0;
					break;
				case 'd':
					if (j == 4)
    4020:	04 30       	cpi	r16, 0x04	; 4
    4022:	49 f4       	brne	.+18     	; 0x4036 <sersendf_P+0x9e>
            serwrite_int32(GET_ARG(int32_t));
    4024:	87 01       	movw	r16, r14
    4026:	0c 5f       	subi	r16, 0xFC	; 252
    4028:	1f 4f       	sbci	r17, 0xFF	; 255
    402a:	f7 01       	movw	r30, r14
    402c:	60 81       	ld	r22, Z
    402e:	71 81       	ldd	r23, Z+1	; 0x01
    4030:	82 81       	ldd	r24, Z+2	; 0x02
    4032:	93 81       	ldd	r25, Z+3	; 0x03
    4034:	0a c0       	rjmp	.+20     	; 0x404a <sersendf_P+0xb2>
					else
            serwrite_int16(GET_ARG(int16_t));
    4036:	87 01       	movw	r16, r14
    4038:	0e 5f       	subi	r16, 0xFE	; 254
    403a:	1f 4f       	sbci	r17, 0xFF	; 255
    403c:	f7 01       	movw	r30, r14
    403e:	60 81       	ld	r22, Z
    4040:	71 81       	ldd	r23, Z+1	; 0x01
    4042:	88 27       	eor	r24, r24
    4044:	77 fd       	sbrc	r23, 7
    4046:	80 95       	com	r24
    4048:	98 2f       	mov	r25, r24
    404a:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <serwrite_int32>
    404e:	07 c0       	rjmp	.+14     	; 0x405e <sersendf_P+0xc6>
					j = 0;
					break;
				case 'c':
          serial_writechar(GET_ARG(uint16_t));
    4050:	87 01       	movw	r16, r14
    4052:	0e 5f       	subi	r16, 0xFE	; 254
    4054:	1f 4f       	sbci	r17, 0xFF	; 255
    4056:	f7 01       	movw	r30, r14
    4058:	80 81       	ld	r24, Z
    405a:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <serial_writechar>
    405e:	78 01       	movw	r14, r16
    4060:	32 c0       	rjmp	.+100    	; 0x40c6 <sersendf_P+0x12e>
					j = 0;
					break;
				case 'x':
					serial_writestr_P(PSTR("0x"));
    4062:	8f ea       	ldi	r24, 0xAF	; 175
    4064:	93 e0       	ldi	r25, 0x03	; 3
    4066:	0e 94 c7 1e 	call	0x3d8e	; 0x3d8e <serial_writestr_P>
					if (j == 4)
    406a:	04 30       	cpi	r16, 0x04	; 4
    406c:	59 f4       	brne	.+22     	; 0x4084 <sersendf_P+0xec>
            serwrite_hex32(GET_ARG(uint32_t));
    406e:	87 01       	movw	r16, r14
    4070:	0c 5f       	subi	r16, 0xFC	; 252
    4072:	1f 4f       	sbci	r17, 0xFF	; 255
    4074:	f7 01       	movw	r30, r14
    4076:	60 81       	ld	r22, Z
    4078:	71 81       	ldd	r23, Z+1	; 0x01
    407a:	82 81       	ldd	r24, Z+2	; 0x02
    407c:	93 81       	ldd	r25, Z+3	; 0x03
    407e:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <serwrite_hex32>
    4082:	ed cf       	rjmp	.-38     	; 0x405e <sersendf_P+0xc6>
    4084:	82 e0       	ldi	r24, 0x02	; 2
    4086:	c8 2e       	mov	r12, r24
    4088:	d1 2c       	mov	r13, r1
    408a:	ce 0c       	add	r12, r14
    408c:	df 1c       	adc	r13, r15
					else if (j == 1)
    408e:	01 30       	cpi	r16, 0x01	; 1
    4090:	29 f4       	brne	.+10     	; 0x409c <sersendf_P+0x104>
            serwrite_hex8(GET_ARG(uint16_t));
    4092:	f7 01       	movw	r30, r14
    4094:	80 81       	ld	r24, Z
    4096:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <serwrite_hex8>
    409a:	05 c0       	rjmp	.+10     	; 0x40a6 <sersendf_P+0x10e>
					else
            serwrite_hex16(GET_ARG(uint16_t));
    409c:	f7 01       	movw	r30, r14
    409e:	80 81       	ld	r24, Z
    40a0:	91 81       	ldd	r25, Z+1	; 0x01
    40a2:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <serwrite_hex16>
    40a6:	76 01       	movw	r14, r12
    40a8:	0e c0       	rjmp	.+28     	; 0x40c6 <sersendf_P+0x12e>
					j = 0;
					break;
/*				case 'p':
          serwrite_hex16(GET_ARG(uint16_t));*/
				case 'q':
          serwrite_int32_vf(GET_ARG(uint32_t), 3);
    40aa:	87 01       	movw	r16, r14
    40ac:	0c 5f       	subi	r16, 0xFC	; 252
    40ae:	1f 4f       	sbci	r17, 0xFF	; 255
    40b0:	f7 01       	movw	r30, r14
    40b2:	60 81       	ld	r22, Z
    40b4:	71 81       	ldd	r23, Z+1	; 0x01
    40b6:	82 81       	ldd	r24, Z+2	; 0x02
    40b8:	93 81       	ldd	r25, Z+3	; 0x03
    40ba:	43 e0       	ldi	r20, 0x03	; 3
    40bc:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <serwrite_int32_vf>
    40c0:	ce cf       	rjmp	.-100    	; 0x405e <sersendf_P+0xc6>
					j = 0;
					break;
				default:
					serial_writechar(c);
    40c2:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <serial_writechar>
    40c6:	00 e0       	ldi	r16, 0x00	; 0
    40c8:	06 c0       	rjmp	.+12     	; 0x40d6 <sersendf_P+0x13e>
					j = 0;
					break;
			}
		}
		else {
			if (c == '%') {
    40ca:	85 32       	cpi	r24, 0x25	; 37
    40cc:	11 f4       	brne	.+4      	; 0x40d2 <sersendf_P+0x13a>
    40ce:	02 e0       	ldi	r16, 0x02	; 2
    40d0:	02 c0       	rjmp	.+4      	; 0x40d6 <sersendf_P+0x13e>
				j = 2;
			}
			else {
				serial_writechar(c);
    40d2:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <serial_writechar>
    40d6:	08 94       	sec
    40d8:	a1 1c       	adc	r10, r1
    40da:	b1 1c       	adc	r11, r1
	va_list args;
	va_start(args, format_P);

	uint16_t i = 0;
	uint8_t c = 1, j = 0;
	while ((c = pgm_read_byte(&format_P[i++]))) {
    40dc:	f5 01       	movw	r30, r10
    40de:	84 91       	lpm	r24, Z+
    40e0:	88 23       	and	r24, r24
    40e2:	09 f0       	breq	.+2      	; 0x40e6 <sersendf_P+0x14e>
    40e4:	6a cf       	rjmp	.-300    	; 0x3fba <sersendf_P+0x22>
				serial_writechar(c);
			}
		}
	}
	va_end(args);
}
    40e6:	20 96       	adiw	r28, 0x00	; 0
    40e8:	ea e0       	ldi	r30, 0x0A	; 10
    40ea:	0c 94 8b 23 	jmp	0x4716	; 0x4716 <__epilogue_restores__+0x10>

000040ee <temp_init>:

			default: /* prevent compiler warning */
				break;
		}
	}
}
    40ee:	08 95       	ret

000040f0 <temp_sensor_tick>:
                 temp_sensors_runtime[i].last_read_temp / 4,
                 (temp_sensors_runtime[i].last_read_temp & 0x03) * 25);
	}
  if (DEBUG_PID && (debug_flags & DEBUG_PID))
    sersendf_P(PSTR("\n"));
}
    40f0:	08 95       	ret

000040f2 <temp_achieved>:
    if (temp_sensors_runtime[i].target_temp > 0 &&
        temp_sensors_runtime[i].temp_residency < (TEMP_RESIDENCY_TIME*100))
			all_ok = 0;
	}
	return all_ok;
}
    40f2:	8f ef       	ldi	r24, 0xFF	; 255
    40f4:	08 95       	ret

000040f6 <temp_set>:
	#ifdef	TEMP_INTERCOM
		if (temp_sensors[index].temp_type == TT_INTERCOM)
			send_temperature(temp_sensors[index].temp_pin, temperature);
	#endif
	}
}
    40f6:	08 95       	ret

000040f8 <temp_print>:
		if (index >= NUM_TEMP_SENSORS)
			return;
		sersendf_P(PSTR("T[%su]:"), index);
		single_temp_print(index);
	}
}
    40f8:	08 95       	ret

000040fa <timer_init>:
/// initialise timer and enable system clock interrupt.
/// step interrupt is enabled later when we start using it
void timer_init()
{
	// no outputs
	TCCR1A = 0;
    40fa:	10 92 80 00 	sts	0x0080, r1
	// Normal Mode
	TCCR1B = MASK(CS10);
    40fe:	81 e0       	ldi	r24, 0x01	; 1
    4100:	80 93 81 00 	sts	0x0081, r24
	// set up "clock" comparator for first tick
	OCR1B = TICK_TIME & 0xFFFF;
    4104:	80 e0       	ldi	r24, 0x00	; 0
    4106:	9d e7       	ldi	r25, 0x7D	; 125
    4108:	90 93 8b 00 	sts	0x008B, r25
    410c:	80 93 8a 00 	sts	0x008A, r24
	// enable interrupt
	TIMSK1 = MASK(OCIE1B);
    4110:	84 e0       	ldi	r24, 0x04	; 4
    4112:	80 93 6f 00 	sts	0x006F, r24
#ifdef SIMULATOR
  // Tell simulator
  sim_setTimer();
#endif
}
    4116:	08 95       	ret

00004118 <setTimer>:
	uint32_t earliest_time, actual_time;
	#endif /* ACCELERATION_TEMPORAL */

	// An interrupt would make all our timing calculations invalid,
	// so stop that here.
	cli();
    4118:	f8 94       	cli

	// Assume all steps belong to one move. Within one move the delay is
	// from one step to the next one, which should be more or less the same
	// as from one step interrupt to the next one. The last step interrupt happend
	// at OCR1A, so start delay from there.
	step_start = OCR1A;
    411a:	20 91 88 00 	lds	r18, 0x0088
    411e:	30 91 89 00 	lds	r19, 0x0089
	next_step_time = delay;
    4122:	60 93 0c 07 	sts	0x070C, r22
    4126:	70 93 0d 07 	sts	0x070D, r23
    412a:	80 93 0e 07 	sts	0x070E, r24
    412e:	90 93 0f 07 	sts	0x070F, r25
		}
	}
	#endif /* ACCELERATION_TEMPORAL */

	// Now we know how long we actually want to delay, so set the timer.
	if (next_step_time < 65536) {
    4132:	60 30       	cpi	r22, 0x00	; 0
    4134:	40 e0       	ldi	r20, 0x00	; 0
    4136:	74 07       	cpc	r23, r20
    4138:	41 e0       	ldi	r20, 0x01	; 1
    413a:	84 07       	cpc	r24, r20
    413c:	40 e0       	ldi	r20, 0x00	; 0
    413e:	94 07       	cpc	r25, r20
    4140:	18 f4       	brcc	.+6      	; 0x4148 <setTimer+0x30>
		// set the comparator directly to the next real step
		OCR1A = (next_step_time + step_start) & 0xFFFF;
    4142:	26 0f       	add	r18, r22
    4144:	37 1f       	adc	r19, r23
    4146:	1b c0       	rjmp	.+54     	; 0x417e <setTimer+0x66>
	}
	else if (next_step_time < 75536) {
    4148:	60 31       	cpi	r22, 0x10	; 16
    414a:	47 e2       	ldi	r20, 0x27	; 39
    414c:	74 07       	cpc	r23, r20
    414e:	41 e0       	ldi	r20, 0x01	; 1
    4150:	84 07       	cpc	r24, r20
    4152:	40 e0       	ldi	r20, 0x00	; 0
    4154:	94 07       	cpc	r25, r20
    4156:	98 f4       	brcc	.+38     	; 0x417e <setTimer+0x66>
		// Next comparator interrupt would have to trigger another
		// interrupt within a short time (possibly within 1 cycle).
		// Avoid the impossible by firing the interrupt earlier.
		OCR1A = (step_start - 10000) & 0xFFFF;
    4158:	20 51       	subi	r18, 0x10	; 16
    415a:	37 42       	sbci	r19, 0x27	; 39
    415c:	30 93 89 00 	sts	0x0089, r19
    4160:	20 93 88 00 	sts	0x0088, r18
		next_step_time += 10000;
    4164:	60 5f       	subi	r22, 0xF0	; 240
    4166:	78 4d       	sbci	r23, 0xD8	; 216
    4168:	8f 4f       	sbci	r24, 0xFF	; 255
    416a:	9f 4f       	sbci	r25, 0xFF	; 255
    416c:	60 93 0c 07 	sts	0x070C, r22
    4170:	70 93 0d 07 	sts	0x070D, r23
    4174:	80 93 0e 07 	sts	0x070E, r24
    4178:	90 93 0f 07 	sts	0x070F, r25
    417c:	04 c0       	rjmp	.+8      	; 0x4186 <setTimer+0x6e>
	}
	else {
		OCR1A = step_start;
    417e:	30 93 89 00 	sts	0x0089, r19
    4182:	20 93 88 00 	sts	0x0088, r18

	// Enable this interrupt, but only do it after disabling
	// global interrupts (see above). This will cause push any possible
	// timer1a interrupt to the far side of the return, protecting the 
	// stack from recursively clobbering memory.
	TIMSK1 |= MASK(OCIE1A);
    4186:	80 91 6f 00 	lds	r24, 0x006F
    418a:	82 60       	ori	r24, 0x02	; 2
    418c:	80 93 6f 00 	sts	0x006F, r24
  #ifdef SIMULATOR
    // Tell simulator
    sim_setTimer();
  #endif
}
    4190:	08 95       	ret

00004192 <timer_stop>:

/// stop timers - emergency stop
void timer_stop() {
	// disable all interrupts
	TIMSK1 = 0;
    4192:	10 92 6f 00 	sts	0x006F, r1
  #ifdef SIMULATOR
    // Tell simulator
    sim_timer_stop();
  #endif
}
    4196:	08 95       	ret

00004198 <__vector_17>:
}

#ifdef	MOTHERBOARD

/// comparator A is the step timer. It has higher priority then B.
ISR(TIMER1_COMPA_vect) {
    4198:	1f 92       	push	r1
    419a:	0f 92       	push	r0
    419c:	0f b6       	in	r0, 0x3f	; 63
    419e:	0f 92       	push	r0
    41a0:	0b b6       	in	r0, 0x3b	; 59
    41a2:	0f 92       	push	r0
    41a4:	11 24       	eor	r1, r1
    41a6:	ef 92       	push	r14
    41a8:	ff 92       	push	r15
    41aa:	0f 93       	push	r16
    41ac:	1f 93       	push	r17
    41ae:	2f 93       	push	r18
    41b0:	3f 93       	push	r19
    41b2:	4f 93       	push	r20
    41b4:	5f 93       	push	r21
    41b6:	6f 93       	push	r22
    41b8:	7f 93       	push	r23
    41ba:	8f 93       	push	r24
    41bc:	9f 93       	push	r25
    41be:	af 93       	push	r26
    41c0:	bf 93       	push	r27
    41c2:	ef 93       	push	r30
    41c4:	ff 93       	push	r31
	// Check if this is a real step, or just a next_step_time "overflow"
	if (next_step_time < 65536) {
    41c6:	e0 90 0c 07 	lds	r14, 0x070C
    41ca:	f0 90 0d 07 	lds	r15, 0x070D
    41ce:	00 91 0e 07 	lds	r16, 0x070E
    41d2:	10 91 0f 07 	lds	r17, 0x070F
    41d6:	80 e0       	ldi	r24, 0x00	; 0
    41d8:	e8 16       	cp	r14, r24
    41da:	80 e0       	ldi	r24, 0x00	; 0
    41dc:	f8 06       	cpc	r15, r24
    41de:	81 e0       	ldi	r24, 0x01	; 1
    41e0:	08 07       	cpc	r16, r24
    41e2:	80 e0       	ldi	r24, 0x00	; 0
    41e4:	18 07       	cpc	r17, r24
    41e6:	40 f4       	brcc	.+16     	; 0x41f8 <__vector_17+0x60>
		#ifdef DEBUG_LED_PIN
			WRITE(DEBUG_LED_PIN, 1);
		#endif

		// disable this interrupt. if we set a new timeout, it will be re-enabled when appropriate
		TIMSK1 &= ~MASK(OCIE1A);
    41e8:	80 91 6f 00 	lds	r24, 0x006F
    41ec:	8d 7f       	andi	r24, 0xFD	; 253
    41ee:	80 93 6f 00 	sts	0x006F, r24
		
		// stepper tick
		queue_step();
    41f2:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <queue_step>
    41f6:	40 c0       	rjmp	.+128    	; 0x4278 <__vector_17+0xe0>
		#endif

		return;
	}

	next_step_time -= 65536;
    41f8:	a8 01       	movw	r20, r16
    41fa:	97 01       	movw	r18, r14
    41fc:	20 50       	subi	r18, 0x00	; 0
    41fe:	30 40       	sbci	r19, 0x00	; 0
    4200:	41 40       	sbci	r20, 0x01	; 1
    4202:	50 40       	sbci	r21, 0x00	; 0
    4204:	20 93 0c 07 	sts	0x070C, r18
    4208:	30 93 0d 07 	sts	0x070D, r19
    420c:	40 93 0e 07 	sts	0x070E, r20
    4210:	50 93 0f 07 	sts	0x070F, r21

	// similar algorithm as described in setTimer below.
	if (next_step_time < 65536) {
    4214:	20 30       	cpi	r18, 0x00	; 0
    4216:	90 e0       	ldi	r25, 0x00	; 0
    4218:	39 07       	cpc	r19, r25
    421a:	91 e0       	ldi	r25, 0x01	; 1
    421c:	49 07       	cpc	r20, r25
    421e:	90 e0       	ldi	r25, 0x00	; 0
    4220:	59 07       	cpc	r21, r25
    4222:	58 f4       	brcc	.+22     	; 0x423a <__vector_17+0xa2>
		OCR1A = (OCR1A + next_step_time) & 0xFFFF;
    4224:	80 91 88 00 	lds	r24, 0x0088
    4228:	90 91 89 00 	lds	r25, 0x0089
    422c:	82 0f       	add	r24, r18
    422e:	93 1f       	adc	r25, r19
    4230:	90 93 89 00 	sts	0x0089, r25
    4234:	80 93 88 00 	sts	0x0088, r24
    4238:	1f c0       	rjmp	.+62     	; 0x4278 <__vector_17+0xe0>
	} else if(next_step_time < 75536){
    423a:	20 51       	subi	r18, 0x10	; 16
    423c:	37 42       	sbci	r19, 0x27	; 39
    423e:	41 40       	sbci	r20, 0x01	; 1
    4240:	50 40       	sbci	r21, 0x00	; 0
    4242:	d0 f4       	brcc	.+52     	; 0x4278 <__vector_17+0xe0>
		OCR1A = (OCR1A - 10000) & 0xFFFF;
    4244:	80 91 88 00 	lds	r24, 0x0088
    4248:	90 91 89 00 	lds	r25, 0x0089
    424c:	80 51       	subi	r24, 0x10	; 16
    424e:	97 42       	sbci	r25, 0x27	; 39
    4250:	90 93 89 00 	sts	0x0089, r25
    4254:	80 93 88 00 	sts	0x0088, r24
		next_step_time += 10000;
    4258:	80 e1       	ldi	r24, 0x10	; 16
    425a:	97 e2       	ldi	r25, 0x27	; 39
    425c:	af ef       	ldi	r26, 0xFF	; 255
    425e:	bf ef       	ldi	r27, 0xFF	; 255
    4260:	e8 0e       	add	r14, r24
    4262:	f9 1e       	adc	r15, r25
    4264:	0a 1f       	adc	r16, r26
    4266:	1b 1f       	adc	r17, r27
    4268:	e0 92 0c 07 	sts	0x070C, r14
    426c:	f0 92 0d 07 	sts	0x070D, r15
    4270:	00 93 0e 07 	sts	0x070E, r16
    4274:	10 93 0f 07 	sts	0x070F, r17
	}
	// leave OCR1A as it was
}
    4278:	ff 91       	pop	r31
    427a:	ef 91       	pop	r30
    427c:	bf 91       	pop	r27
    427e:	af 91       	pop	r26
    4280:	9f 91       	pop	r25
    4282:	8f 91       	pop	r24
    4284:	7f 91       	pop	r23
    4286:	6f 91       	pop	r22
    4288:	5f 91       	pop	r21
    428a:	4f 91       	pop	r20
    428c:	3f 91       	pop	r19
    428e:	2f 91       	pop	r18
    4290:	1f 91       	pop	r17
    4292:	0f 91       	pop	r16
    4294:	ff 90       	pop	r15
    4296:	ef 90       	pop	r14
    4298:	0f 90       	pop	r0
    429a:	0b be       	out	0x3b, r0	; 59
    429c:	0f 90       	pop	r0
    429e:	0f be       	out	0x3f, r0	; 63
    42a0:	0f 90       	pop	r0
    42a2:	1f 90       	pop	r1
    42a4:	18 95       	reti

000042a6 <__vector_18>:
volatile uint8_t	clock_flag_10ms = 0;
volatile uint8_t	clock_flag_250ms = 0;
volatile uint8_t	clock_flag_1s = 0;

/// comparator B is the system clock, happens every TICK_TIME
ISR(TIMER1_COMPB_vect) {
    42a6:	1f 92       	push	r1
    42a8:	0f 92       	push	r0
    42aa:	0f b6       	in	r0, 0x3f	; 63
    42ac:	0f 92       	push	r0
    42ae:	0b b6       	in	r0, 0x3b	; 59
    42b0:	0f 92       	push	r0
    42b2:	11 24       	eor	r1, r1
    42b4:	2f 93       	push	r18
    42b6:	3f 93       	push	r19
    42b8:	4f 93       	push	r20
    42ba:	5f 93       	push	r21
    42bc:	6f 93       	push	r22
    42be:	7f 93       	push	r23
    42c0:	8f 93       	push	r24
    42c2:	9f 93       	push	r25
    42c4:	af 93       	push	r26
    42c6:	bf 93       	push	r27
    42c8:	ef 93       	push	r30
    42ca:	ff 93       	push	r31
	// set output compare register to the next clock tick
	OCR1B = (OCR1B + TICK_TIME) & 0xFFFF;
    42cc:	80 91 8a 00 	lds	r24, 0x008A
    42d0:	90 91 8b 00 	lds	r25, 0x008B
    42d4:	80 50       	subi	r24, 0x00	; 0
    42d6:	93 48       	sbci	r25, 0x83	; 131
    42d8:	90 93 8b 00 	sts	0x008B, r25
    42dc:	80 93 8a 00 	sts	0x008A, r24

	/*
	clock stuff
	*/
	clock_counter_10ms += TICK_TIME_MS;
    42e0:	90 91 39 06 	lds	r25, 0x0639
    42e4:	89 2f       	mov	r24, r25
    42e6:	8e 5f       	subi	r24, 0xFE	; 254
    42e8:	80 93 39 06 	sts	0x0639, r24
	if (clock_counter_10ms >= 10) {
    42ec:	8a 30       	cpi	r24, 0x0A	; 10
    42ee:	e0 f0       	brcs	.+56     	; 0x4328 <__vector_18+0x82>
		clock_counter_10ms -= 10;
    42f0:	98 50       	subi	r25, 0x08	; 8
    42f2:	90 93 39 06 	sts	0x0639, r25
		clock_flag_10ms = 1;
    42f6:	91 e0       	ldi	r25, 0x01	; 1
    42f8:	90 93 3c 06 	sts	0x063C, r25

		clock_counter_250ms++;
    42fc:	80 91 3a 06 	lds	r24, 0x063A
    4300:	8f 5f       	subi	r24, 0xFF	; 255
    4302:	80 93 3a 06 	sts	0x063A, r24
		if (clock_counter_250ms >= 25) {
    4306:	89 31       	cpi	r24, 0x19	; 25
    4308:	78 f0       	brcs	.+30     	; 0x4328 <__vector_18+0x82>
			clock_counter_250ms = 0;
    430a:	10 92 3a 06 	sts	0x063A, r1
			clock_flag_250ms = 1;
    430e:	90 93 3d 06 	sts	0x063D, r25

			clock_counter_1s++;
    4312:	80 91 3b 06 	lds	r24, 0x063B
    4316:	8f 5f       	subi	r24, 0xFF	; 255
    4318:	80 93 3b 06 	sts	0x063B, r24
			if (clock_counter_1s >= 4) {
    431c:	84 30       	cpi	r24, 0x04	; 4
    431e:	20 f0       	brcs	.+8      	; 0x4328 <__vector_18+0x82>
				clock_counter_1s = 0;
    4320:	10 92 3b 06 	sts	0x063B, r1
				clock_flag_1s = 1;
    4324:	90 93 3e 06 	sts	0x063E, r25
			}
		}
	}

  dda_clock();
    4328:	0e 94 ee 05 	call	0xbdc	; 0xbdc <dda_clock>
}
    432c:	ff 91       	pop	r31
    432e:	ef 91       	pop	r30
    4330:	bf 91       	pop	r27
    4332:	af 91       	pop	r26
    4334:	9f 91       	pop	r25
    4336:	8f 91       	pop	r24
    4338:	7f 91       	pop	r23
    433a:	6f 91       	pop	r22
    433c:	5f 91       	pop	r21
    433e:	4f 91       	pop	r20
    4340:	3f 91       	pop	r19
    4342:	2f 91       	pop	r18
    4344:	0f 90       	pop	r0
    4346:	0b be       	out	0x3b, r0	; 59
    4348:	0f 90       	pop	r0
    434a:	0f be       	out	0x3f, r0	; 63
    434c:	0f 90       	pop	r0
    434e:	1f 90       	pop	r1
    4350:	18 95       	reti

00004352 <__cmpsf2>:
    4352:	d4 d0       	rcall	.+424    	; 0x44fc <__fp_cmp>
    4354:	08 f4       	brcc	.+2      	; 0x4358 <__cmpsf2+0x6>
    4356:	81 e0       	ldi	r24, 0x01	; 1
    4358:	08 95       	ret

0000435a <__divsf3>:
    435a:	0c d0       	rcall	.+24     	; 0x4374 <__divsf3x>
    435c:	0a c1       	rjmp	.+532    	; 0x4572 <__fp_round>
    435e:	02 d1       	rcall	.+516    	; 0x4564 <__fp_pscB>
    4360:	40 f0       	brcs	.+16     	; 0x4372 <__divsf3+0x18>
    4362:	f9 d0       	rcall	.+498    	; 0x4556 <__fp_pscA>
    4364:	30 f0       	brcs	.+12     	; 0x4372 <__divsf3+0x18>
    4366:	21 f4       	brne	.+8      	; 0x4370 <__divsf3+0x16>
    4368:	5f 3f       	cpi	r21, 0xFF	; 255
    436a:	19 f0       	breq	.+6      	; 0x4372 <__divsf3+0x18>
    436c:	eb c0       	rjmp	.+470    	; 0x4544 <__fp_inf>
    436e:	51 11       	cpse	r21, r1
    4370:	34 c1       	rjmp	.+616    	; 0x45da <__fp_szero>
    4372:	ee c0       	rjmp	.+476    	; 0x4550 <__fp_nan>

00004374 <__divsf3x>:
    4374:	0f d1       	rcall	.+542    	; 0x4594 <__fp_split3>
    4376:	98 f3       	brcs	.-26     	; 0x435e <__divsf3+0x4>

00004378 <__divsf3_pse>:
    4378:	99 23       	and	r25, r25
    437a:	c9 f3       	breq	.-14     	; 0x436e <__divsf3+0x14>
    437c:	55 23       	and	r21, r21
    437e:	b1 f3       	breq	.-20     	; 0x436c <__divsf3+0x12>
    4380:	95 1b       	sub	r25, r21
    4382:	55 0b       	sbc	r21, r21
    4384:	bb 27       	eor	r27, r27
    4386:	aa 27       	eor	r26, r26
    4388:	62 17       	cp	r22, r18
    438a:	73 07       	cpc	r23, r19
    438c:	84 07       	cpc	r24, r20
    438e:	38 f0       	brcs	.+14     	; 0x439e <__divsf3_pse+0x26>
    4390:	9f 5f       	subi	r25, 0xFF	; 255
    4392:	5f 4f       	sbci	r21, 0xFF	; 255
    4394:	22 0f       	add	r18, r18
    4396:	33 1f       	adc	r19, r19
    4398:	44 1f       	adc	r20, r20
    439a:	aa 1f       	adc	r26, r26
    439c:	a9 f3       	breq	.-22     	; 0x4388 <__divsf3_pse+0x10>
    439e:	33 d0       	rcall	.+102    	; 0x4406 <__divsf3_pse+0x8e>
    43a0:	0e 2e       	mov	r0, r30
    43a2:	3a f0       	brmi	.+14     	; 0x43b2 <__divsf3_pse+0x3a>
    43a4:	e0 e8       	ldi	r30, 0x80	; 128
    43a6:	30 d0       	rcall	.+96     	; 0x4408 <__divsf3_pse+0x90>
    43a8:	91 50       	subi	r25, 0x01	; 1
    43aa:	50 40       	sbci	r21, 0x00	; 0
    43ac:	e6 95       	lsr	r30
    43ae:	00 1c       	adc	r0, r0
    43b0:	ca f7       	brpl	.-14     	; 0x43a4 <__divsf3_pse+0x2c>
    43b2:	29 d0       	rcall	.+82     	; 0x4406 <__divsf3_pse+0x8e>
    43b4:	fe 2f       	mov	r31, r30
    43b6:	27 d0       	rcall	.+78     	; 0x4406 <__divsf3_pse+0x8e>
    43b8:	66 0f       	add	r22, r22
    43ba:	77 1f       	adc	r23, r23
    43bc:	88 1f       	adc	r24, r24
    43be:	bb 1f       	adc	r27, r27
    43c0:	26 17       	cp	r18, r22
    43c2:	37 07       	cpc	r19, r23
    43c4:	48 07       	cpc	r20, r24
    43c6:	ab 07       	cpc	r26, r27
    43c8:	b0 e8       	ldi	r27, 0x80	; 128
    43ca:	09 f0       	breq	.+2      	; 0x43ce <__divsf3_pse+0x56>
    43cc:	bb 0b       	sbc	r27, r27
    43ce:	80 2d       	mov	r24, r0
    43d0:	bf 01       	movw	r22, r30
    43d2:	ff 27       	eor	r31, r31
    43d4:	93 58       	subi	r25, 0x83	; 131
    43d6:	5f 4f       	sbci	r21, 0xFF	; 255
    43d8:	2a f0       	brmi	.+10     	; 0x43e4 <__divsf3_pse+0x6c>
    43da:	9e 3f       	cpi	r25, 0xFE	; 254
    43dc:	51 05       	cpc	r21, r1
    43de:	68 f0       	brcs	.+26     	; 0x43fa <__divsf3_pse+0x82>
    43e0:	b1 c0       	rjmp	.+354    	; 0x4544 <__fp_inf>
    43e2:	fb c0       	rjmp	.+502    	; 0x45da <__fp_szero>
    43e4:	5f 3f       	cpi	r21, 0xFF	; 255
    43e6:	ec f3       	brlt	.-6      	; 0x43e2 <__divsf3_pse+0x6a>
    43e8:	98 3e       	cpi	r25, 0xE8	; 232
    43ea:	dc f3       	brlt	.-10     	; 0x43e2 <__divsf3_pse+0x6a>
    43ec:	86 95       	lsr	r24
    43ee:	77 95       	ror	r23
    43f0:	67 95       	ror	r22
    43f2:	b7 95       	ror	r27
    43f4:	f7 95       	ror	r31
    43f6:	9f 5f       	subi	r25, 0xFF	; 255
    43f8:	c9 f7       	brne	.-14     	; 0x43ec <__divsf3_pse+0x74>
    43fa:	88 0f       	add	r24, r24
    43fc:	91 1d       	adc	r25, r1
    43fe:	96 95       	lsr	r25
    4400:	87 95       	ror	r24
    4402:	97 f9       	bld	r25, 7
    4404:	08 95       	ret
    4406:	e1 e0       	ldi	r30, 0x01	; 1
    4408:	66 0f       	add	r22, r22
    440a:	77 1f       	adc	r23, r23
    440c:	88 1f       	adc	r24, r24
    440e:	bb 1f       	adc	r27, r27
    4410:	62 17       	cp	r22, r18
    4412:	73 07       	cpc	r23, r19
    4414:	84 07       	cpc	r24, r20
    4416:	ba 07       	cpc	r27, r26
    4418:	20 f0       	brcs	.+8      	; 0x4422 <__divsf3_pse+0xaa>
    441a:	62 1b       	sub	r22, r18
    441c:	73 0b       	sbc	r23, r19
    441e:	84 0b       	sbc	r24, r20
    4420:	ba 0b       	sbc	r27, r26
    4422:	ee 1f       	adc	r30, r30
    4424:	88 f7       	brcc	.-30     	; 0x4408 <__divsf3_pse+0x90>
    4426:	e0 95       	com	r30
    4428:	08 95       	ret

0000442a <__fixunssfsi>:
    442a:	bc d0       	rcall	.+376    	; 0x45a4 <__fp_splitA>
    442c:	88 f0       	brcs	.+34     	; 0x4450 <__fixunssfsi+0x26>
    442e:	9f 57       	subi	r25, 0x7F	; 127
    4430:	90 f0       	brcs	.+36     	; 0x4456 <__fixunssfsi+0x2c>
    4432:	b9 2f       	mov	r27, r25
    4434:	99 27       	eor	r25, r25
    4436:	b7 51       	subi	r27, 0x17	; 23
    4438:	a0 f0       	brcs	.+40     	; 0x4462 <__fixunssfsi+0x38>
    443a:	d1 f0       	breq	.+52     	; 0x4470 <__fixunssfsi+0x46>
    443c:	66 0f       	add	r22, r22
    443e:	77 1f       	adc	r23, r23
    4440:	88 1f       	adc	r24, r24
    4442:	99 1f       	adc	r25, r25
    4444:	1a f0       	brmi	.+6      	; 0x444c <__fixunssfsi+0x22>
    4446:	ba 95       	dec	r27
    4448:	c9 f7       	brne	.-14     	; 0x443c <__fixunssfsi+0x12>
    444a:	12 c0       	rjmp	.+36     	; 0x4470 <__fixunssfsi+0x46>
    444c:	b1 30       	cpi	r27, 0x01	; 1
    444e:	81 f0       	breq	.+32     	; 0x4470 <__fixunssfsi+0x46>
    4450:	c3 d0       	rcall	.+390    	; 0x45d8 <__fp_zero>
    4452:	b1 e0       	ldi	r27, 0x01	; 1
    4454:	08 95       	ret
    4456:	c0 c0       	rjmp	.+384    	; 0x45d8 <__fp_zero>
    4458:	67 2f       	mov	r22, r23
    445a:	78 2f       	mov	r23, r24
    445c:	88 27       	eor	r24, r24
    445e:	b8 5f       	subi	r27, 0xF8	; 248
    4460:	39 f0       	breq	.+14     	; 0x4470 <__fixunssfsi+0x46>
    4462:	b9 3f       	cpi	r27, 0xF9	; 249
    4464:	cc f3       	brlt	.-14     	; 0x4458 <__fixunssfsi+0x2e>
    4466:	86 95       	lsr	r24
    4468:	77 95       	ror	r23
    446a:	67 95       	ror	r22
    446c:	b3 95       	inc	r27
    446e:	d9 f7       	brne	.-10     	; 0x4466 <__fixunssfsi+0x3c>
    4470:	3e f4       	brtc	.+14     	; 0x4480 <__fixunssfsi+0x56>
    4472:	90 95       	com	r25
    4474:	80 95       	com	r24
    4476:	70 95       	com	r23
    4478:	61 95       	neg	r22
    447a:	7f 4f       	sbci	r23, 0xFF	; 255
    447c:	8f 4f       	sbci	r24, 0xFF	; 255
    447e:	9f 4f       	sbci	r25, 0xFF	; 255
    4480:	08 95       	ret

00004482 <__floatunsisf>:
    4482:	e8 94       	clt
    4484:	09 c0       	rjmp	.+18     	; 0x4498 <__floatsisf+0x12>

00004486 <__floatsisf>:
    4486:	97 fb       	bst	r25, 7
    4488:	3e f4       	brtc	.+14     	; 0x4498 <__floatsisf+0x12>
    448a:	90 95       	com	r25
    448c:	80 95       	com	r24
    448e:	70 95       	com	r23
    4490:	61 95       	neg	r22
    4492:	7f 4f       	sbci	r23, 0xFF	; 255
    4494:	8f 4f       	sbci	r24, 0xFF	; 255
    4496:	9f 4f       	sbci	r25, 0xFF	; 255
    4498:	99 23       	and	r25, r25
    449a:	a9 f0       	breq	.+42     	; 0x44c6 <__floatsisf+0x40>
    449c:	f9 2f       	mov	r31, r25
    449e:	96 e9       	ldi	r25, 0x96	; 150
    44a0:	bb 27       	eor	r27, r27
    44a2:	93 95       	inc	r25
    44a4:	f6 95       	lsr	r31
    44a6:	87 95       	ror	r24
    44a8:	77 95       	ror	r23
    44aa:	67 95       	ror	r22
    44ac:	b7 95       	ror	r27
    44ae:	f1 11       	cpse	r31, r1
    44b0:	f8 cf       	rjmp	.-16     	; 0x44a2 <__floatsisf+0x1c>
    44b2:	fa f4       	brpl	.+62     	; 0x44f2 <__floatsisf+0x6c>
    44b4:	bb 0f       	add	r27, r27
    44b6:	11 f4       	brne	.+4      	; 0x44bc <__floatsisf+0x36>
    44b8:	60 ff       	sbrs	r22, 0
    44ba:	1b c0       	rjmp	.+54     	; 0x44f2 <__floatsisf+0x6c>
    44bc:	6f 5f       	subi	r22, 0xFF	; 255
    44be:	7f 4f       	sbci	r23, 0xFF	; 255
    44c0:	8f 4f       	sbci	r24, 0xFF	; 255
    44c2:	9f 4f       	sbci	r25, 0xFF	; 255
    44c4:	16 c0       	rjmp	.+44     	; 0x44f2 <__floatsisf+0x6c>
    44c6:	88 23       	and	r24, r24
    44c8:	11 f0       	breq	.+4      	; 0x44ce <__floatsisf+0x48>
    44ca:	96 e9       	ldi	r25, 0x96	; 150
    44cc:	11 c0       	rjmp	.+34     	; 0x44f0 <__floatsisf+0x6a>
    44ce:	77 23       	and	r23, r23
    44d0:	21 f0       	breq	.+8      	; 0x44da <__floatsisf+0x54>
    44d2:	9e e8       	ldi	r25, 0x8E	; 142
    44d4:	87 2f       	mov	r24, r23
    44d6:	76 2f       	mov	r23, r22
    44d8:	05 c0       	rjmp	.+10     	; 0x44e4 <__floatsisf+0x5e>
    44da:	66 23       	and	r22, r22
    44dc:	71 f0       	breq	.+28     	; 0x44fa <__floatsisf+0x74>
    44de:	96 e8       	ldi	r25, 0x86	; 134
    44e0:	86 2f       	mov	r24, r22
    44e2:	70 e0       	ldi	r23, 0x00	; 0
    44e4:	60 e0       	ldi	r22, 0x00	; 0
    44e6:	2a f0       	brmi	.+10     	; 0x44f2 <__floatsisf+0x6c>
    44e8:	9a 95       	dec	r25
    44ea:	66 0f       	add	r22, r22
    44ec:	77 1f       	adc	r23, r23
    44ee:	88 1f       	adc	r24, r24
    44f0:	da f7       	brpl	.-10     	; 0x44e8 <__floatsisf+0x62>
    44f2:	88 0f       	add	r24, r24
    44f4:	96 95       	lsr	r25
    44f6:	87 95       	ror	r24
    44f8:	97 f9       	bld	r25, 7
    44fa:	08 95       	ret

000044fc <__fp_cmp>:
    44fc:	99 0f       	add	r25, r25
    44fe:	00 08       	sbc	r0, r0
    4500:	55 0f       	add	r21, r21
    4502:	aa 0b       	sbc	r26, r26
    4504:	e0 e8       	ldi	r30, 0x80	; 128
    4506:	fe ef       	ldi	r31, 0xFE	; 254
    4508:	16 16       	cp	r1, r22
    450a:	17 06       	cpc	r1, r23
    450c:	e8 07       	cpc	r30, r24
    450e:	f9 07       	cpc	r31, r25
    4510:	c0 f0       	brcs	.+48     	; 0x4542 <__fp_cmp+0x46>
    4512:	12 16       	cp	r1, r18
    4514:	13 06       	cpc	r1, r19
    4516:	e4 07       	cpc	r30, r20
    4518:	f5 07       	cpc	r31, r21
    451a:	98 f0       	brcs	.+38     	; 0x4542 <__fp_cmp+0x46>
    451c:	62 1b       	sub	r22, r18
    451e:	73 0b       	sbc	r23, r19
    4520:	84 0b       	sbc	r24, r20
    4522:	95 0b       	sbc	r25, r21
    4524:	39 f4       	brne	.+14     	; 0x4534 <__fp_cmp+0x38>
    4526:	0a 26       	eor	r0, r26
    4528:	61 f0       	breq	.+24     	; 0x4542 <__fp_cmp+0x46>
    452a:	23 2b       	or	r18, r19
    452c:	24 2b       	or	r18, r20
    452e:	25 2b       	or	r18, r21
    4530:	21 f4       	brne	.+8      	; 0x453a <__fp_cmp+0x3e>
    4532:	08 95       	ret
    4534:	0a 26       	eor	r0, r26
    4536:	09 f4       	brne	.+2      	; 0x453a <__fp_cmp+0x3e>
    4538:	a1 40       	sbci	r26, 0x01	; 1
    453a:	a6 95       	lsr	r26
    453c:	8f ef       	ldi	r24, 0xFF	; 255
    453e:	81 1d       	adc	r24, r1
    4540:	81 1d       	adc	r24, r1
    4542:	08 95       	ret

00004544 <__fp_inf>:
    4544:	97 f9       	bld	r25, 7
    4546:	9f 67       	ori	r25, 0x7F	; 127
    4548:	80 e8       	ldi	r24, 0x80	; 128
    454a:	70 e0       	ldi	r23, 0x00	; 0
    454c:	60 e0       	ldi	r22, 0x00	; 0
    454e:	08 95       	ret

00004550 <__fp_nan>:
    4550:	9f ef       	ldi	r25, 0xFF	; 255
    4552:	80 ec       	ldi	r24, 0xC0	; 192
    4554:	08 95       	ret

00004556 <__fp_pscA>:
    4556:	00 24       	eor	r0, r0
    4558:	0a 94       	dec	r0
    455a:	16 16       	cp	r1, r22
    455c:	17 06       	cpc	r1, r23
    455e:	18 06       	cpc	r1, r24
    4560:	09 06       	cpc	r0, r25
    4562:	08 95       	ret

00004564 <__fp_pscB>:
    4564:	00 24       	eor	r0, r0
    4566:	0a 94       	dec	r0
    4568:	12 16       	cp	r1, r18
    456a:	13 06       	cpc	r1, r19
    456c:	14 06       	cpc	r1, r20
    456e:	05 06       	cpc	r0, r21
    4570:	08 95       	ret

00004572 <__fp_round>:
    4572:	09 2e       	mov	r0, r25
    4574:	03 94       	inc	r0
    4576:	00 0c       	add	r0, r0
    4578:	11 f4       	brne	.+4      	; 0x457e <__fp_round+0xc>
    457a:	88 23       	and	r24, r24
    457c:	52 f0       	brmi	.+20     	; 0x4592 <__fp_round+0x20>
    457e:	bb 0f       	add	r27, r27
    4580:	40 f4       	brcc	.+16     	; 0x4592 <__fp_round+0x20>
    4582:	bf 2b       	or	r27, r31
    4584:	11 f4       	brne	.+4      	; 0x458a <__fp_round+0x18>
    4586:	60 ff       	sbrs	r22, 0
    4588:	04 c0       	rjmp	.+8      	; 0x4592 <__fp_round+0x20>
    458a:	6f 5f       	subi	r22, 0xFF	; 255
    458c:	7f 4f       	sbci	r23, 0xFF	; 255
    458e:	8f 4f       	sbci	r24, 0xFF	; 255
    4590:	9f 4f       	sbci	r25, 0xFF	; 255
    4592:	08 95       	ret

00004594 <__fp_split3>:
    4594:	57 fd       	sbrc	r21, 7
    4596:	90 58       	subi	r25, 0x80	; 128
    4598:	44 0f       	add	r20, r20
    459a:	55 1f       	adc	r21, r21
    459c:	59 f0       	breq	.+22     	; 0x45b4 <__fp_splitA+0x10>
    459e:	5f 3f       	cpi	r21, 0xFF	; 255
    45a0:	71 f0       	breq	.+28     	; 0x45be <__fp_splitA+0x1a>
    45a2:	47 95       	ror	r20

000045a4 <__fp_splitA>:
    45a4:	88 0f       	add	r24, r24
    45a6:	97 fb       	bst	r25, 7
    45a8:	99 1f       	adc	r25, r25
    45aa:	61 f0       	breq	.+24     	; 0x45c4 <__fp_splitA+0x20>
    45ac:	9f 3f       	cpi	r25, 0xFF	; 255
    45ae:	79 f0       	breq	.+30     	; 0x45ce <__fp_splitA+0x2a>
    45b0:	87 95       	ror	r24
    45b2:	08 95       	ret
    45b4:	12 16       	cp	r1, r18
    45b6:	13 06       	cpc	r1, r19
    45b8:	14 06       	cpc	r1, r20
    45ba:	55 1f       	adc	r21, r21
    45bc:	f2 cf       	rjmp	.-28     	; 0x45a2 <__fp_split3+0xe>
    45be:	46 95       	lsr	r20
    45c0:	f1 df       	rcall	.-30     	; 0x45a4 <__fp_splitA>
    45c2:	08 c0       	rjmp	.+16     	; 0x45d4 <__fp_splitA+0x30>
    45c4:	16 16       	cp	r1, r22
    45c6:	17 06       	cpc	r1, r23
    45c8:	18 06       	cpc	r1, r24
    45ca:	99 1f       	adc	r25, r25
    45cc:	f1 cf       	rjmp	.-30     	; 0x45b0 <__fp_splitA+0xc>
    45ce:	86 95       	lsr	r24
    45d0:	71 05       	cpc	r23, r1
    45d2:	61 05       	cpc	r22, r1
    45d4:	08 94       	sec
    45d6:	08 95       	ret

000045d8 <__fp_zero>:
    45d8:	e8 94       	clt

000045da <__fp_szero>:
    45da:	bb 27       	eor	r27, r27
    45dc:	66 27       	eor	r22, r22
    45de:	77 27       	eor	r23, r23
    45e0:	cb 01       	movw	r24, r22
    45e2:	97 f9       	bld	r25, 7
    45e4:	08 95       	ret

000045e6 <__gesf2>:
    45e6:	8a df       	rcall	.-236    	; 0x44fc <__fp_cmp>
    45e8:	08 f4       	brcc	.+2      	; 0x45ec <__gesf2+0x6>
    45ea:	8f ef       	ldi	r24, 0xFF	; 255
    45ec:	08 95       	ret

000045ee <__mulsi3>:
    45ee:	62 9f       	mul	r22, r18
    45f0:	d0 01       	movw	r26, r0
    45f2:	73 9f       	mul	r23, r19
    45f4:	f0 01       	movw	r30, r0
    45f6:	82 9f       	mul	r24, r18
    45f8:	e0 0d       	add	r30, r0
    45fa:	f1 1d       	adc	r31, r1
    45fc:	64 9f       	mul	r22, r20
    45fe:	e0 0d       	add	r30, r0
    4600:	f1 1d       	adc	r31, r1
    4602:	92 9f       	mul	r25, r18
    4604:	f0 0d       	add	r31, r0
    4606:	83 9f       	mul	r24, r19
    4608:	f0 0d       	add	r31, r0
    460a:	74 9f       	mul	r23, r20
    460c:	f0 0d       	add	r31, r0
    460e:	65 9f       	mul	r22, r21
    4610:	f0 0d       	add	r31, r0
    4612:	99 27       	eor	r25, r25
    4614:	72 9f       	mul	r23, r18
    4616:	b0 0d       	add	r27, r0
    4618:	e1 1d       	adc	r30, r1
    461a:	f9 1f       	adc	r31, r25
    461c:	63 9f       	mul	r22, r19
    461e:	b0 0d       	add	r27, r0
    4620:	e1 1d       	adc	r30, r1
    4622:	f9 1f       	adc	r31, r25
    4624:	bd 01       	movw	r22, r26
    4626:	cf 01       	movw	r24, r30
    4628:	11 24       	eor	r1, r1
    462a:	08 95       	ret

0000462c <__udivmodhi4>:
    462c:	aa 1b       	sub	r26, r26
    462e:	bb 1b       	sub	r27, r27
    4630:	51 e1       	ldi	r21, 0x11	; 17
    4632:	07 c0       	rjmp	.+14     	; 0x4642 <__udivmodhi4_ep>

00004634 <__udivmodhi4_loop>:
    4634:	aa 1f       	adc	r26, r26
    4636:	bb 1f       	adc	r27, r27
    4638:	a6 17       	cp	r26, r22
    463a:	b7 07       	cpc	r27, r23
    463c:	10 f0       	brcs	.+4      	; 0x4642 <__udivmodhi4_ep>
    463e:	a6 1b       	sub	r26, r22
    4640:	b7 0b       	sbc	r27, r23

00004642 <__udivmodhi4_ep>:
    4642:	88 1f       	adc	r24, r24
    4644:	99 1f       	adc	r25, r25
    4646:	5a 95       	dec	r21
    4648:	a9 f7       	brne	.-22     	; 0x4634 <__udivmodhi4_loop>
    464a:	80 95       	com	r24
    464c:	90 95       	com	r25
    464e:	bc 01       	movw	r22, r24
    4650:	cd 01       	movw	r24, r26
    4652:	08 95       	ret

00004654 <__udivmodsi4>:
    4654:	a1 e2       	ldi	r26, 0x21	; 33
    4656:	1a 2e       	mov	r1, r26
    4658:	aa 1b       	sub	r26, r26
    465a:	bb 1b       	sub	r27, r27
    465c:	fd 01       	movw	r30, r26
    465e:	0d c0       	rjmp	.+26     	; 0x467a <__udivmodsi4_ep>

00004660 <__udivmodsi4_loop>:
    4660:	aa 1f       	adc	r26, r26
    4662:	bb 1f       	adc	r27, r27
    4664:	ee 1f       	adc	r30, r30
    4666:	ff 1f       	adc	r31, r31
    4668:	a2 17       	cp	r26, r18
    466a:	b3 07       	cpc	r27, r19
    466c:	e4 07       	cpc	r30, r20
    466e:	f5 07       	cpc	r31, r21
    4670:	20 f0       	brcs	.+8      	; 0x467a <__udivmodsi4_ep>
    4672:	a2 1b       	sub	r26, r18
    4674:	b3 0b       	sbc	r27, r19
    4676:	e4 0b       	sbc	r30, r20
    4678:	f5 0b       	sbc	r31, r21

0000467a <__udivmodsi4_ep>:
    467a:	66 1f       	adc	r22, r22
    467c:	77 1f       	adc	r23, r23
    467e:	88 1f       	adc	r24, r24
    4680:	99 1f       	adc	r25, r25
    4682:	1a 94       	dec	r1
    4684:	69 f7       	brne	.-38     	; 0x4660 <__udivmodsi4_loop>
    4686:	60 95       	com	r22
    4688:	70 95       	com	r23
    468a:	80 95       	com	r24
    468c:	90 95       	com	r25
    468e:	9b 01       	movw	r18, r22
    4690:	ac 01       	movw	r20, r24
    4692:	bd 01       	movw	r22, r26
    4694:	cf 01       	movw	r24, r30
    4696:	08 95       	ret

00004698 <__divmodsi4>:
    4698:	97 fb       	bst	r25, 7
    469a:	09 2e       	mov	r0, r25
    469c:	05 26       	eor	r0, r21
    469e:	0e d0       	rcall	.+28     	; 0x46bc <__divmodsi4_neg1>
    46a0:	57 fd       	sbrc	r21, 7
    46a2:	04 d0       	rcall	.+8      	; 0x46ac <__divmodsi4_neg2>
    46a4:	d7 df       	rcall	.-82     	; 0x4654 <__udivmodsi4>
    46a6:	0a d0       	rcall	.+20     	; 0x46bc <__divmodsi4_neg1>
    46a8:	00 1c       	adc	r0, r0
    46aa:	38 f4       	brcc	.+14     	; 0x46ba <__divmodsi4_exit>

000046ac <__divmodsi4_neg2>:
    46ac:	50 95       	com	r21
    46ae:	40 95       	com	r20
    46b0:	30 95       	com	r19
    46b2:	21 95       	neg	r18
    46b4:	3f 4f       	sbci	r19, 0xFF	; 255
    46b6:	4f 4f       	sbci	r20, 0xFF	; 255
    46b8:	5f 4f       	sbci	r21, 0xFF	; 255

000046ba <__divmodsi4_exit>:
    46ba:	08 95       	ret

000046bc <__divmodsi4_neg1>:
    46bc:	f6 f7       	brtc	.-4      	; 0x46ba <__divmodsi4_exit>
    46be:	90 95       	com	r25
    46c0:	80 95       	com	r24
    46c2:	70 95       	com	r23
    46c4:	61 95       	neg	r22
    46c6:	7f 4f       	sbci	r23, 0xFF	; 255
    46c8:	8f 4f       	sbci	r24, 0xFF	; 255
    46ca:	9f 4f       	sbci	r25, 0xFF	; 255
    46cc:	08 95       	ret

000046ce <__prologue_saves__>:
    46ce:	2f 92       	push	r2
    46d0:	3f 92       	push	r3
    46d2:	4f 92       	push	r4
    46d4:	5f 92       	push	r5
    46d6:	6f 92       	push	r6
    46d8:	7f 92       	push	r7
    46da:	8f 92       	push	r8
    46dc:	9f 92       	push	r9
    46de:	af 92       	push	r10
    46e0:	bf 92       	push	r11
    46e2:	cf 92       	push	r12
    46e4:	df 92       	push	r13
    46e6:	ef 92       	push	r14
    46e8:	ff 92       	push	r15
    46ea:	0f 93       	push	r16
    46ec:	1f 93       	push	r17
    46ee:	cf 93       	push	r28
    46f0:	df 93       	push	r29
    46f2:	cd b7       	in	r28, 0x3d	; 61
    46f4:	de b7       	in	r29, 0x3e	; 62
    46f6:	ca 1b       	sub	r28, r26
    46f8:	db 0b       	sbc	r29, r27
    46fa:	0f b6       	in	r0, 0x3f	; 63
    46fc:	f8 94       	cli
    46fe:	de bf       	out	0x3e, r29	; 62
    4700:	0f be       	out	0x3f, r0	; 63
    4702:	cd bf       	out	0x3d, r28	; 61
    4704:	19 94       	eijmp

00004706 <__epilogue_restores__>:
    4706:	2a 88       	ldd	r2, Y+18	; 0x12
    4708:	39 88       	ldd	r3, Y+17	; 0x11
    470a:	48 88       	ldd	r4, Y+16	; 0x10
    470c:	5f 84       	ldd	r5, Y+15	; 0x0f
    470e:	6e 84       	ldd	r6, Y+14	; 0x0e
    4710:	7d 84       	ldd	r7, Y+13	; 0x0d
    4712:	8c 84       	ldd	r8, Y+12	; 0x0c
    4714:	9b 84       	ldd	r9, Y+11	; 0x0b
    4716:	aa 84       	ldd	r10, Y+10	; 0x0a
    4718:	b9 84       	ldd	r11, Y+9	; 0x09
    471a:	c8 84       	ldd	r12, Y+8	; 0x08
    471c:	df 80       	ldd	r13, Y+7	; 0x07
    471e:	ee 80       	ldd	r14, Y+6	; 0x06
    4720:	fd 80       	ldd	r15, Y+5	; 0x05
    4722:	0c 81       	ldd	r16, Y+4	; 0x04
    4724:	1b 81       	ldd	r17, Y+3	; 0x03
    4726:	aa 81       	ldd	r26, Y+2	; 0x02
    4728:	b9 81       	ldd	r27, Y+1	; 0x01
    472a:	ce 0f       	add	r28, r30
    472c:	d1 1d       	adc	r29, r1
    472e:	0f b6       	in	r0, 0x3f	; 63
    4730:	f8 94       	cli
    4732:	de bf       	out	0x3e, r29	; 62
    4734:	0f be       	out	0x3f, r0	; 63
    4736:	cd bf       	out	0x3d, r28	; 61
    4738:	ed 01       	movw	r28, r26
    473a:	08 95       	ret

0000473c <__tablejump2__>:
    473c:	ee 0f       	add	r30, r30
    473e:	ff 1f       	adc	r31, r31

00004740 <__tablejump__>:
    4740:	05 90       	lpm	r0, Z+
    4742:	f4 91       	lpm	r31, Z+
    4744:	e0 2d       	mov	r30, r0
    4746:	19 94       	eijmp

00004748 <_exit>:
    4748:	f8 94       	cli

0000474a <__stop_program>:
    474a:	ff cf       	rjmp	.-2      	; 0x474a <__stop_program>
